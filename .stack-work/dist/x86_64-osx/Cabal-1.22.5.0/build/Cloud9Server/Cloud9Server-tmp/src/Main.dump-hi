
==================== FINAL INTERFACE ====================
2016-04-10 20:25:29.946254 UTC

interface main@main:Main [family instance module] 7103
  interface hash: e654a4826135a0423a40fcc9387d7407
  ABI hash: 1fb0527528651b1f1b46de89058e801c
  export-list hash: f5e743444993e44000014d566e8008e6
  orphan hash: 2aab9186867bbd80d6c06ef8b9efa894
  flag hash: 0cf6e4820ad8c03ff1c20f75d7fd66e2
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
module dependencies:
package dependencies: aeson-compat-0.3.2.0@aeson_3ksJrprimYA6rSQ9jJmLhw
                      aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG
                      auto-update-0.1.3@autou_19qtEoqMgV6FQlA1CkY9Cg base-4.8.2.0
                      base64-bytestring-1.0.0.1@base6_AkCk8zInckjJsyQ4AIFHPN
                      base-compat-0.9.0@basec_3G7TOYmSpaF0smBtbGU3h4
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-builder-0.4.0.1@blaze_4KI2nf4lf9oHEgXiILyTYj
                      blaze-markup-0.7.0.3@blaze_C7imNkL0ufD2cjmU64FP9k
                      blaze-html-0.8.1.1@blaze_Iq6GES6DAMS0745KzFL7i6
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      conduit-1.2.6.4@condu_2UbZnXbItcrIzVTBhFteW1
                      conduit-extra-1.1.13.1@condu_8TQSFzw8Jmj8k5oEnE75rA
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_0hFG6ZxK1nk4zsyOqbNHfm
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      extensible-exceptions-0.1.1.4@exten_FEBYnjUcabpEXD3JqlYlJc
                      fast-logger-2.4.1@fastl_6RfINExTeqMADspupiv1CI
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m ghc-prim-0.4.0.0
                      happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I
                      hashmap-1.3.0.1@hashm_F00kyVSzhoUHUlxMWs73j7
                      hslogger-1.2.9@hslog_BLLA2mHMd1Y30ogCyK2blO
                      html-1.0.1.2@html_3z3nL6m7IhuGkUl83NkAdQ
                      http-api-data-0.2.2@httpa_3kiLcpdXTUe4CYRpIoinpP
                      integer-gmp-1.0.0.0
                      lifted-base-0.2.3.6@lifte_30rpZxN2vBHCGvcAJlKDqd
                      mmorph-1.0.6@mmorp_42KUkOfzC6q3qCtAMiSHam
                      monad-control-1.0.0.5@monad_0V0Z5ArSaI68lPP0A0bpaP
                      monad-logger-0.3.18@monad_DDswX4memIm8MfndtLpIJq
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
                      network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl
                      path-pieces-0.2.1@pathp_4qW9xznk5mC6aJZVVgmWEO
                      persistent-template-2.1.6@persi_Gpsvel0bjLI8lmye09iEhv
                      persistent-sqlite-2.2.1@persi_HNjd1LRsYhv1fh2UH91R7l
                      persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      resource-pool-0.2.3.2@resou_0YNOsFj8f3r9swWq9A3jJQ
                      resourcet-1.1.7.3@resou_7yZh8XREike1m76ztKXn6v
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO
                      sendfile-0.7.9@sendf_7X6R5hfyS6cEyhGFeBdSiM
                      silently-1.2.5@silen_5nVdOe0bUXfLPEbxHJT4m4
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      stm-chans-3.0.0.4@stmch_4ac5OLG4E0w1rpuIDCribD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE
                      system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc
                      tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD template-haskell-2.10.0.0
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      threads-0.5.1.3@threa_J7eGAjCOdWt4cJOPxjh5VF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      time-compat-0.1.0.3@timec_68E93jkFTDc4X2aFKrddlk
                      time-locale-compat-0.1.1.1@timel_Ciz7M1U3da73rRwCjRF3Np
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      xhtml-3000.2.1@xhtml_0ACfOp3hebWD9jGWE4v4Gh
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
orphans: aeson-compat-0.3.2.0@aeson_3ksJrprimYA6rSQ9jJmLhw:Data.Aeson.Compat
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Instances
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
         persistent-template-2.1.6@persi_Gpsvel0bjLI8lmye09iEhv:Database.Persist.TH
         persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Sql.Orphan.PersistUnique
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc:Filesystem.Path
         system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc:Filesystem.Path.CurrentOS
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.0.1@attop_C6pUTDzrecbIO4LDYHwJUG:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY:Happstack.Server.Internal.Monads
                         monad-control-1.0.0.5@monad_0V0Z5ArSaI68lPP0A0bpaP:Control.Monad.Trans.Control
                         monad-logger-0.3.18@monad_DDswX4memIm8MfndtLpIJq:Control.Monad.Logger
                         network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67:Network.URI
                         persistent-sqlite-2.2.1@persi_HNjd1LRsYhv1fh2UH91R7l:Database.Persist.Sqlite
                         persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Class.PersistConfig
                         persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Sql.Orphan.PersistStore
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         resourcet-1.1.7.3@resou_7yZh8XREike1m76ztKXn6v:Control.Monad.Trans.Resource.Internal
                         semigroups-0.18.1@semig_EApcHsXPsrRKUkxxoKR3HO:Data.List.NonEmpty
                         tagged-0.8.3@tagge_5cptKNCoGdxJM6eqqNERxD:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashSet
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson bef554fbea5259b89d8771370426d062
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Encode.ByteString 6f1815d64b02d5489b8f3c07b5628774
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Class f1fc1c4f41bb5600b83b0c2595c1fd3a
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Instances 5e61c178ece7ce8fc8e045110475d109
import  -/  aeson-0.9.0.1@aeson_LJIBliiEkn4J9xnahdCeak:Data.Aeson.Types.Internal 5f2709b07dd63c03775e2206f7738370
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Data 6585ea937ab68cf3b63ec9c2b6433aec
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.Proxy ace6418f386b055d277aea86443e836b
import  -/  base-4.8.2.0:Data.String c2d7fed27a27fee276c179af07290091
import  -/  base-4.8.2.0:Data.Typeable.Internal 76b09e88499fa4ff7869a34e89976afb
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Generics c00a6d11ff9e9cf35a82831f837d9e97
import  -/  base-4.8.2.0:GHC.Int 28d8a9f7cfc272358fb4631d98c579ce
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Internal b99858e89f19feddd3dcb9e9d523065e
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy.Char8 3455f4159ac4b644563dfc2b667ec7e5
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Lazy.Internal 372874e1a7c751c0cb07b7dc746f232b
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY:Happstack.Server fdfcf7e0e43a3528cc3cb408b38c2a8d
import  -/  happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY:Happstack.Server.Internal.Monads b8b1a0c46cfc91dd8d441690e51c2b21
import  -/  happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY:Happstack.Server.Internal.Types 5e6af2fc7a00523d7c81d2359f4f6c7e
import  -/  happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY:Happstack.Server.Response c89ca664dd8282106e52ac4d7721776c
import  -/  happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY:Happstack.Server.Routing 279dc040e35b21c4c9b7be7a12af8bed
import  -/  happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY:Happstack.Server.SimpleHTTP 2e0664f3fd5dd08f851af078d9c5e39c
import  -/  happstack-server-7.4.6.1@happs_JW7uNtpujTb80MVOUeBmoY:Happstack.Server.Types 073496e6b86f19eeefb7835fea2dc82b
import  -/  hashmap-1.3.0.1@hashm_F00kyVSzhoUHUlxMWs73j7:Data.HashMap 9f3a07e4352656a8caec62f983327916
import  -/  http-api-data-0.2.2@httpa_3kiLcpdXTUe4CYRpIoinpP:Web.HttpApiData.Internal 8f6358f114d33f73fd505f4a4e5d431f
import  -/  monad-logger-0.3.18@monad_DDswX4memIm8MfndtLpIJq:Control.Monad.Logger cb70aecca6197ab9898e92578e6098ad
import  -/  path-pieces-0.2.1@pathp_4qW9xznk5mC6aJZVVgmWEO:Web.PathPieces 0fe3eeb95a3498a440fd74126910ecb5
import  -/  persistent-template-2.1.6@persi_Gpsvel0bjLI8lmye09iEhv:Database.Persist.TH 93dcc026e800c8ab7abe2a1e6aa4a65f
import  -/  persistent-sqlite-2.2.1@persi_HNjd1LRsYhv1fh2UH91R7l:Database.Persist.Sqlite 9f9c818306970930233a095c7c47f296
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist 2ffd5191392ecc4cf3cfd72e5737584f
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Class.PersistEntity f23c7aa4e9e97ff1f64232f7a0ba2d6b
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Class.PersistField c880387ddb34e00748e2ab154032e01e
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Class.PersistQuery ebf86a795ae14a3951612f37da1808fd
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Class.PersistStore c8f78749e1ee4b6f2307706bb69be540
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Sql.Class 21371c090a149fd11423f7ca6ac7a2d2
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Sql.Migration 114447dcfddbbb63466e1459840e4fd7
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Sql.Types 0d4260c8297187e37fb65c2a6076d1e7
import  -/  persistent-2.2.4.1@persi_IktxbLQqMoAHHvmCpusaqg:Database.Persist.Types.Base 0855ce3eaba3b5cdecc457a1dffe95ab
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text b53ae191632883b10562be5cbaa0b22b
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.IO.Class 37487179a2f5eb2ea7922b911abcae56
import  -/  unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base 8b6e4e2c21cf94e2ff98533964f52354
import  -/  unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Strict d342afe36a1a271007835b6bd54c8ce2
66e401564ed1a574e3dd576bf7caa768
  $crgL :: Data.Data.Constr
cf8dd6d45836bbf7cbcd882396b2f947
  $crhb :: Data.Data.Constr
f4d2cf8772c53d4f4a986544b65ea6e3
  $crig :: Data.Data.Constr
4b3f700594fa6608a72e447d4f0677ca
  $fConstructorPlaylist :: GHC.Generics.Constructor Main.C1_0Playlist
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.C1_0Playlist
                  Main.$fConstructorPlaylist_$cconName
                  Main.$fConstructorPlaylist_$s$dmconFixity
                  Main.$fConstructorPlaylist_$cconIsRecord -}
88125e3eecadeeaca5b1bb5481904034
  $fConstructorPlaylist1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Playlist"#) -}
4b3f700594fa6608a72e447d4f0677ca
  $fConstructorPlaylist_$cconIsRecord ::
    t Main.C1_0Playlist f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0Playlist f a141 ->
                 GHC.Types.True) -}
4b3f700594fa6608a72e447d4f0677ca
  $fConstructorPlaylist_$cconName ::
    t Main.C1_0Playlist f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0Playlist f a141 ->
                 Main.$fConstructorPlaylist1) -}
4b3f700594fa6608a72e447d4f0677ca
  $fConstructorPlaylist_$s$dmconFixity ::
    t Main.C1_0Playlist f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0Playlist f a141 ->
                 GHC.Generics.Prefix) -}
c2e91f779826e83b88580050b787238e
  $fConstructorSong :: GHC.Generics.Constructor Main.C1_0Song
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.C1_0Song
                  Main.$fConstructorSong_$cconName
                  Main.$fConstructorSong_$s$dmconFixity
                  Main.$fConstructorSong_$cconIsRecord -}
b76d4ceee69ca8004728633fc9340669
  $fConstructorSong1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Song"#) -}
c2e91f779826e83b88580050b787238e
  $fConstructorSong_$cconIsRecord ::
    t Main.C1_0Song f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0Song f a141 ->
                 GHC.Types.True) -}
c2e91f779826e83b88580050b787238e
  $fConstructorSong_$cconName ::
    t Main.C1_0Song f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0Song f a141 ->
                 Main.$fConstructorSong1) -}
c2e91f779826e83b88580050b787238e
  $fConstructorSong_$s$dmconFixity ::
    t Main.C1_0Song f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0Song f a141 ->
                 GHC.Generics.Prefix) -}
fc64664b38d85c933e4c014cc4bb577e
  $fConstructorUser :: GHC.Generics.Constructor Main.C1_0User
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.C1_0User
                  Main.$fConstructorUser_$cconName
                  Main.$fConstructorUser_$s$dmconFixity
                  Main.$fConstructorUser_$cconIsRecord -}
14c54adb746bc6ae72f006a2b640ea3e
  $fConstructorUser1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "User"#) -}
fc64664b38d85c933e4c014cc4bb577e
  $fConstructorUser_$cconIsRecord ::
    t Main.C1_0User f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0User f a141 ->
                 GHC.Types.True) -}
fc64664b38d85c933e4c014cc4bb577e
  $fConstructorUser_$cconName ::
    t Main.C1_0User f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0User f a141 ->
                 Main.$fConstructorUser1) -}
fc64664b38d85c933e4c014cc4bb577e
  $fConstructorUser_$s$dmconFixity ::
    t Main.C1_0User f a -> GHC.Generics.Fixity
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.C1_0User f a141 ->
                 GHC.Generics.Prefix) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist :: Data.Data.Data Main.Playlist
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Playlist
                  Main.$fDataPlaylist21
                  Main.$fDataPlaylist_$cgfoldl
                  Main.$fDataPlaylist_$cgunfold
                  Main.$fDataPlaylist_$ctoConstr
                  Main.$fDataPlaylist_$cdataTypeOf
                  Main.$fDataPlaylist_$s$dmdataCast1
                  Main.$fDataPlaylist_$s$dmdataCast2
                  Main.$fDataPlaylist_$cgmapT
                  Main.$fDataPlaylist_$cgmapQl
                  Main.$fDataPlaylist_$cgmapQr
                  Main.$fDataPlaylist_$cgmapQ
                  Main.$fDataPlaylist_$cgmapQi
                  Main.$fDataPlaylist_$cgmapM
                  Main.$fDataPlaylist_$cgmapMp
                  Main.$fDataPlaylist_$cgmapMo -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist1 ::
    ([Main.Song] -> [Main.User] -> Main.Playlist, GHC.Types.Bool)
  {- HasNoCafRefs, Unfolding: ((Main.$WPlaylist, GHC.Types.False)) -}
f034c7ba3ae1deff1b83fe132e3e224a
  $fDataPlaylist10 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Main.$fDataSong6
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
3669e973126113d05711d3a6b8d43609
  $fDataPlaylist11 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [Main.User])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (c :: * -> *)
                   @ (t :: * -> * -> *)
                   $dTypeable1 :: Data.Typeable.Internal.Typeable t
                   ds :: forall d e.
                         (Data.Data.Data d, Data.Data.Data e) =>
                         c (t d e) ->
                 GHC.Base.Nothing @ (c [Main.User])) -}
2a677646b6279ecb87ce14aeab0e1a8d
  $fDataPlaylist12 :: [Main.User] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: [Main.User] -> Data.Data.listDataType) -}
a1acf8ca5da3ad2d048e3b3b32c74d8e
  $fDataPlaylist13 :: [Main.User] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: [Main.User] ->
                 case ds of wild {
                   [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr }) -}
52fddec4cb5fa8a1f5f168ecbfd921a9
  $fDataPlaylist14 ::
    GHC.Prim.Proxy# [Main.User] -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ wild :: GHC.Prim.Proxy# [Main.User] -> Main.$fDataPlaylist15) -}
de08751eaafc8ebdde2742c8081ea858
  $fDataPlaylist15 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Main.$fDataPlaylist_w2 of wild2 {
                   []
                   -> Data.Typeable.Internal.TypeRep
                        __word 17730107610217102821
                        __word 9866972337190828755
                        Main.$fDataPlaylist_wild
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   : ipv ipv1
                   -> case GHC.Fingerprint.fingerprintFingerprints
                             Main.$fDataPlaylist16 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                      Data.Typeable.Internal.TypeRep
                        dt1
                        dt2
                        Main.$fDataPlaylist_wild
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        wild2 } }) -}
f93abc86c5ff5e9f77548b873897cafd
  $fDataPlaylist16 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Main.$fDataPlaylist9
                   Main.$fDataPlaylist17) -}
1f329f2a8837c3af9a79514fcc8d43be
  $fDataPlaylist17 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (Main.$fDataPlaylist_go1
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)) -}
138a04933e0f64ce4efb40f7c3f413bc
  $fDataPlaylist18 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Main.$fDataUser6
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
e76eccead6c38da6843fd75c8a778dd2
  $fDataPlaylist19 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep Main.$fDataPlaylist20) -}
d82d6718e51200625bbb5f6f9c8b0ba9
  $fDataPlaylist2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c [Main.Song])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (c :: * -> *)
                   @ (t :: * -> * -> *)
                   $dTypeable1 :: Data.Typeable.Internal.Typeable t
                   ds :: forall d e.
                         (Data.Data.Data d, Data.Data.Data e) =>
                         c (t d e) ->
                 GHC.Base.Nothing @ (c [Main.Song])) -}
4ae39962d4219b60a5338871fc4ecf8a
  $fDataPlaylist20 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Main.$crig
                   (GHC.Types.[] @ Data.Data.Constr)) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist21 :: Data.Typeable.Internal.Typeable Main.Playlist
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fDataPlaylist22
                  `cast`
                (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                          <*>_N <Main.Playlist>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist22 ::
    GHC.Prim.Proxy# Main.Playlist -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ wild :: GHC.Prim.Proxy# Main.Playlist ->
                 Main.$fDataPlaylist23) -}
389f44688b080afcb4a82b9207bd1582
  $fDataPlaylist23 :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 1823157555683100089
                   __word 6075095393958815813
                   Main.$fDataPlaylist_wild1
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
e7e48ba8f7db0c9fa18afab0ba1397a0
  $fDataPlaylist3 :: [Main.Song] -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: [Main.Song] -> Data.Data.listDataType) -}
c00a2c8109be3c92beb1dd6833a2fe05
  $fDataPlaylist4 :: [Main.Song] -> Data.Data.Constr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: [Main.Song] ->
                 case ds of wild {
                   [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr }) -}
71f59d3329d15ba7510d9e74250349b3
  $fDataPlaylist5 ::
    GHC.Prim.Proxy# [Main.Song] -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ wild :: GHC.Prim.Proxy# [Main.Song] -> Main.$fDataPlaylist6) -}
e1baa76a0191e0d4c112a2ad7b59b068
  $fDataPlaylist6 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Main.$fDataPlaylist_w1 of wild2 {
                   []
                   -> Data.Typeable.Internal.TypeRep
                        __word 17730107610217102821
                        __word 9866972337190828755
                        Main.$fDataPlaylist_wild
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   : ipv ipv1
                   -> case GHC.Fingerprint.fingerprintFingerprints
                             Main.$fDataPlaylist7 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                      Data.Typeable.Internal.TypeRep
                        dt1
                        dt2
                        Main.$fDataPlaylist_wild
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        wild2 } }) -}
240db3196202eb5013d7f413c95d9982
  $fDataPlaylist7 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Main.$fDataPlaylist9
                   Main.$fDataPlaylist8) -}
da17999a8fcedc7888ca32cbd7f53afc
  $fDataPlaylist8 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (Main.$fDataPlaylist_go
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)) -}
640342a4f302e4dca5b2de74e9c658bb
  $fDataPlaylist9 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   __word 17730107610217102821
                   __word 9866972337190828755) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cdataTypeOf :: Main.Playlist -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Main.Playlist -> Main.$trj7) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgfoldl ::
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g) -> Main.Playlist -> c Main.Playlist
  {- Arity: 3,
     Strictness: <C(C(C(S))),C(C1(C1(U)))><L,1*C1(U)><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (c :: * -> *)
                   w :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b
                   w1 :: forall g. g -> c g
                   w2 :: Main.Playlist ->
                 case w2 of ww { Main.Playlist ww1 ww2 ->
                 w @ [Main.User]
                   @ Main.Playlist
                   Main.$fDataPlaylist_$s$fData[]1
                   (w @ [Main.Song]
                      @ ([Main.User] -> Main.Playlist)
                      Main.$fDataPlaylist_$s$fData[]
                      (w1
                         @ ([Main.Song] -> [Main.User] -> Main.Playlist)
                         Main.$WPlaylist)
                      ww1)
                   ww2 }) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgmapM ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.Playlist -> m Main.Playlist
  {- Arity: 3,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   w :: GHC.Base.Monad m
                   w1 :: forall d. Data.Data.Data d => d -> m d
                   w2 :: Main.Playlist ->
                 case w2 of ww { Main.Playlist ww1 ww2 ->
                 Main.$w$cgmapM2 @ m w w1 ww1 ww2 }) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgmapMo ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.Playlist -> m Main.Playlist
  {- Arity: 3,
     Strictness: <S(LSLL),U(A,1*U,U,C(C1(U)))><L,C(C1(U))><L,1*U(U,U)>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonadPlus :: GHC.Base.MonadPlus m
                   eta :: forall d. Data.Data.Data d => d -> m d
                   eta1 :: Main.Playlist ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl80 :: m Main.Playlist
                   = GHC.Base.mzero @ m $dMonadPlus @ Main.Playlist
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Main.Playlist, GHC.Types.Bool)
                   @ Main.Playlist
                   (case eta1 of wild { Main.Playlist a141 a142 ->
                    let {
                      a143 :: forall d b.
                              Data.Data.Data d =>
                              Data.Data.Mp m (d -> b) -> d -> m (b, GHC.Types.Bool)
                        {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
                      = \ @ d
                          @ b
                          $dData1 :: Data.Data.Data d
                          ds :: Data.Data.Mp m (d -> b)[OneShot]
                          y :: d[OneShot] ->
                        let {
                          lvl81 :: m d = eta @ d $dData1 y
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad
                          @ (d -> b, GHC.Types.Bool)
                          @ (b, GHC.Types.Bool)
                          ds `cast` (Data.Data.NTCo:Mp[0] <m>_R <d -> b>_N)
                          (\ ds1 :: (d -> b, GHC.Types.Bool) ->
                           case ds1 of wild1 { (,) h b1 ->
                           case b1 of wild2 {
                             GHC.Types.False
                             -> GHC.Base.mplus
                                  @ m
                                  $dMonadPlus
                                  @ (b, GHC.Types.Bool)
                                  (GHC.Base.>>=
                                     @ m
                                     $dMonad
                                     @ d
                                     @ (b, GHC.Types.Bool)
                                     lvl81
                                     (\ y' :: d ->
                                      GHC.Base.return
                                        @ m
                                        $dMonad
                                        @ (b, GHC.Types.Bool)
                                        (h y', GHC.Types.True)))
                                  (GHC.Base.return
                                     @ m
                                     $dMonad
                                     @ (b, GHC.Types.Bool)
                                     (h y, GHC.Types.False))
                             GHC.Types.True
                             -> GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y, GHC.Types.True) } })
                    } in
                    a143
                      @ [Main.User]
                      @ Main.Playlist
                      Main.$fDataPlaylist_$s$fData[]1
                      (a143
                         @ [Main.Song]
                         @ ([Main.User] -> Main.Playlist)
                         Main.$fDataPlaylist_$s$fData[]
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ ([Main.Song] -> [Main.User] -> Main.Playlist, GHC.Types.Bool)
                            Main.$fDataPlaylist1)
                           `cast`
                         (Sym (Data.Data.NTCo:Mp[0]
                                   <m>_R <[Main.Song] -> [Main.User] -> Main.Playlist>_N))
                         a141)
                        `cast`
                      (Sym (Data.Data.NTCo:Mp[0] <m>_R <[Main.User] -> Main.Playlist>_N))
                      a142 })
                   (\ ds :: (Main.Playlist, GHC.Types.Bool) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl80
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ Main.Playlist x' } })) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgmapMp ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.Playlist -> m Main.Playlist
  {- Arity: 3,
     Strictness: <S(LSLL),U(A,1*U,U,C(C1(U)))><L,C(C1(U))><L,1*U(U,U)>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonadPlus :: GHC.Base.MonadPlus m
                   eta :: forall d. Data.Data.Data d => d -> m d
                   eta1 :: Main.Playlist ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl80 :: m Main.Playlist
                   = GHC.Base.mzero @ m $dMonadPlus @ Main.Playlist
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Main.Playlist, GHC.Types.Bool)
                   @ Main.Playlist
                   (case eta1 of wild { Main.Playlist a141 a142 ->
                    let {
                      a143 :: forall d b.
                              Data.Data.Data d =>
                              Data.Data.Mp m (d -> b) -> d -> m (b, GHC.Types.Bool)
                        {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
                      = \ @ d
                          @ b
                          $dData1 :: Data.Data.Data d
                          ds :: Data.Data.Mp m (d -> b)[OneShot]
                          y :: d[OneShot] ->
                        let {
                          lvl81 :: m d = eta @ d $dData1 y
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad
                          @ (d -> b, GHC.Types.Bool)
                          @ (b, GHC.Types.Bool)
                          ds `cast` (Data.Data.NTCo:Mp[0] <m>_R <d -> b>_N)
                          (\ ds1 :: (d -> b, GHC.Types.Bool) ->
                           case ds1 of wild1 { (,) h b1 ->
                           GHC.Base.mplus
                             @ m
                             $dMonadPlus
                             @ (b, GHC.Types.Bool)
                             (GHC.Base.>>=
                                @ m
                                $dMonad
                                @ d
                                @ (b, GHC.Types.Bool)
                                lvl81
                                (\ y' :: d ->
                                 GHC.Base.return
                                   @ m
                                   $dMonad
                                   @ (b, GHC.Types.Bool)
                                   (h y', GHC.Types.True)))
                             (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) })
                    } in
                    a143
                      @ [Main.User]
                      @ Main.Playlist
                      Main.$fDataPlaylist_$s$fData[]1
                      (a143
                         @ [Main.Song]
                         @ ([Main.User] -> Main.Playlist)
                         Main.$fDataPlaylist_$s$fData[]
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ ([Main.Song] -> [Main.User] -> Main.Playlist, GHC.Types.Bool)
                            Main.$fDataPlaylist1)
                           `cast`
                         (Sym (Data.Data.NTCo:Mp[0]
                                   <m>_R <[Main.Song] -> [Main.User] -> Main.Playlist>_N))
                         a141)
                        `cast`
                      (Sym (Data.Data.NTCo:Mp[0] <m>_R <[Main.User] -> Main.Playlist>_N))
                      a142 })
                   (\ ds :: (Main.Playlist, GHC.Types.Bool) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl80
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ Main.Playlist x' } })) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgmapQ ::
    (forall d. Data.Data.Data d => d -> u) -> Main.Playlist -> [u]
  {- Arity: 2, Strictness: <L,C(C1(U))><S(SS),1*U(U,U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ u
                   f :: forall d. Data.Data.Data d => d -> u
                   x0 :: Main.Playlist ->
                 case x0 of wild { Main.Playlist a141 a142 ->
                 GHC.Types.:
                   @ u
                   (f @ [Main.Song] Main.$fDataPlaylist_$s$fData[] a141)
                   (GHC.Types.:
                      @ u
                      (f @ [Main.User] Main.$fDataPlaylist_$s$fData[]1 a142)
                      (GHC.Types.[] @ u)) }) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgmapQi ::
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u) -> Main.Playlist -> u
  {- Arity: 3,
     Strictness: <S(S),1*U(1*U)><C(C(S)),1*C1(C1(U))><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ u
                   w :: GHC.Types.Int
                   w1 :: forall d. Data.Data.Data d => d -> u
                   w2 :: Main.Playlist ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Main.Playlist ww3 ww4 ->
                 case ww1 of wild {
                   DEFAULT -> Data.Maybe.fromJust1 @ u
                   0 -> w1 @ [Main.Song] Main.$fDataPlaylist_$s$fData[] ww3
                   1 -> w1 @ [Main.User] Main.$fDataPlaylist_$s$fData[]1 ww4 } } }) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgmapQl ::
    (r -> r' -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Main.Playlist
    -> r
  {- Arity: 4,
     Strictness: <C(C(S)),C(C1(U))><L,U><L,C(C1(U))><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   w :: r -> r' -> r
                   w1 :: r
                   w2 :: forall d. Data.Data.Data d => d -> r'
                   w3 :: Main.Playlist ->
                 case w3 of ww { Main.Playlist ww1 ww2 ->
                 w (w w1 (w2 @ [Main.Song] Main.$fDataPlaylist_$s$fData[] ww1))
                   (w2 @ [Main.User] Main.$fDataPlaylist_$s$fData[]1 ww2) }) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgmapQr ::
    (r' -> r -> r)
    -> r
    -> (forall d. Data.Data.Data d => d -> r')
    -> Main.Playlist
    -> r
  {- Arity: 4,
     Strictness: <C(C(S)),C(C1(U))><L,U><L,C(C1(U))><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   w :: r' -> r -> r
                   w1 :: r
                   w2 :: forall d. Data.Data.Data d => d -> r'
                   w3 :: Main.Playlist ->
                 case w3 of ww { Main.Playlist ww1 ww2 ->
                 w (w2 @ [Main.Song] Main.$fDataPlaylist_$s$fData[] ww1)
                   (w (w2 @ [Main.User] Main.$fDataPlaylist_$s$fData[]1 ww2) w1) }) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgmapT ::
    (forall b. Data.Data.Data b => b -> b)
    -> Main.Playlist -> Main.Playlist
  {- Arity: 2, Strictness: <C(C(S)),C(C1(U))><S(SS),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: forall b. Data.Data.Data b => b -> b w1 :: Main.Playlist ->
                 case w1 of ww { Main.Playlist ww1 ww2 ->
                 case w @ [Main.Song]
                        Main.$fDataPlaylist_$s$fData[]
                        ww1 of dt { DEFAULT ->
                 case w @ [Main.User]
                        Main.$fDataPlaylist_$s$fData[]1
                        ww2 of dt1 { DEFAULT ->
                 Main.Playlist dt dt1 } } }) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r) -> Data.Data.Constr -> c Main.Playlist
  {- Arity: 3, Strictness: <C(C(S)),C(C1(U))><L,1*C1(U)><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (c :: * -> *)
                   k :: forall b r. Data.Data.Data b => c (b -> r) -> c r
                   z2 :: forall r. r -> c r
                   ds :: Data.Data.Constr ->
                 k @ [Main.User]
                   @ Main.Playlist
                   Main.$fDataPlaylist_$s$fData[]1
                   (k @ [Main.Song]
                      @ ([Main.User] -> Main.Playlist)
                      Main.$fDataPlaylist_$s$fData[]
                      (z2
                         @ ([Main.Song] -> [Main.User] -> Main.Playlist)
                         Main.$WPlaylist))) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$ctoConstr :: Main.Playlist -> Data.Data.Constr
  {- Arity: 1, Strictness: <S(SS),1*U(1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Playlist ->
                 case ds of wild { Main.Playlist ds1 ds2 -> Main.$crig }) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$s$dmdataCast1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c Main.Playlist)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (c :: * -> *)
                   @ (t :: * -> *)
                   $dTypeable :: Data.Typeable.Internal.Typeable t
                   ds :: forall d. Data.Data.Data d => c (t d) ->
                 GHC.Base.Nothing @ (c Main.Playlist)) -}
261e99bff73ad820977b6332d53528b9
  $fDataPlaylist_$s$dmdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c Main.Playlist)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (c :: * -> *)
                   @ (t :: * -> * -> *)
                   $dTypeable :: Data.Typeable.Internal.Typeable t
                   ds :: forall d e.
                         (Data.Data.Data d, Data.Data.Data e) =>
                         c (t d e) ->
                 GHC.Base.Nothing @ (c Main.Playlist)) -}
57e6ce274205bca20dddc9e4f3a38e5d
  $fDataPlaylist_$s$fData[] :: Data.Data.Data [Main.Song]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Main.Song]
                  Main.$fDataPlaylist5
                    `cast`
                  (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                            <*>_N <[Main.Song]>_N))
                  (Data.Data.$fData[]_$cgfoldl
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  (Data.Data.$fData[]_$cgunfold
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  Main.$fDataPlaylist4
                  Main.$fDataPlaylist3
                  Main.$fDataPlaylist_$s$fData[]_$cdataCast1
                  Main.$fDataPlaylist2
                  (Data.Data.$fData[]_$cgmapT
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  (Data.Data.$fData[]_$cgmapQl
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  (Data.Data.$fData[]_$cgmapQr
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  (Data.Data.$fData[]_$cgmapQ
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  (Data.Data.$fData[]_$cgmapQi
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  (Data.Data.$fData[]_$cgmapM
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  (Data.Data.$fData[]_$cgmapMp
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong)
                  (Data.Data.$fData[]_$cgmapMo
                     @ Main.Song
                     Main.$fDataPlaylist5
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.Song]>_N))
                     Main.$fDataSong) -}
46e660cadab4c1bd3c9b74d9818bde6d
  $fDataPlaylist_$s$fData[]1 :: Data.Data.Data [Main.User]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Main.User]
                  Main.$fDataPlaylist14
                    `cast`
                  (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                            <*>_N <[Main.User]>_N))
                  (Data.Data.$fData[]_$cgfoldl
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  (Data.Data.$fData[]_$cgunfold
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  Main.$fDataPlaylist13
                  Main.$fDataPlaylist12
                  Main.$fDataPlaylist_$s$fData[]_$cdataCast2
                  Main.$fDataPlaylist11
                  (Data.Data.$fData[]_$cgmapT
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  (Data.Data.$fData[]_$cgmapQl
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  (Data.Data.$fData[]_$cgmapQr
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  (Data.Data.$fData[]_$cgmapQ
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  (Data.Data.$fData[]_$cgmapQi
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  (Data.Data.$fData[]_$cgmapM
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  (Data.Data.$fData[]_$cgmapMp
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser)
                  (Data.Data.$fData[]_$cgmapMo
                     @ Main.User
                     Main.$fDataPlaylist14
                       `cast`
                     (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                               <*>_N <[Main.User]>_N))
                     Main.$fDataUser) -}
ff251b149cfe133fb024989c8109dc10
  $fDataPlaylist_$s$fData[]_$cdataCast1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c [Main.Song])
  {- Arity: 2,
     Strictness: <C(S(SLLLL)),1*C1(U(1*U,1*U,A,A,A))><L,1*C1(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (c :: * -> *)
                   @ (t :: * -> *)
                   $dTypeable1 :: Data.Typeable.Internal.Typeable t
                   f :: forall d. Data.Data.Data d => c (t d) ->
                 case $dTypeable1
                        `cast`
                      (Data.Typeable.Internal.NTCo:Typeable[0] <* -> *>_N <t>_N)
                        (GHC.Prim.proxy#
                           @ (* -> *)
                           @ t) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                 case dt of wild1 {
                   DEFAULT -> GHC.Base.Nothing @ (c [Main.Song])
                   __word 17730107610217102821
                   -> case dt1 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ (c [Main.Song])
                        __word 9866972337190828755
                        -> GHC.Base.Just
                             @ (c [Main.Song])
                             (f @ Main.Song Main.$fDataSong)
                               `cast`
                             (<c>_R (Trans
                                         (UnivCo mkUnsafeCo nominal t GHC.Prim.Any)
                                         (UnivCo mkUnsafeCo nominal GHC.Prim.Any []) <Main.Song>_N)) } } }) -}
660cd445d944c14023eecbcf37d15c87
  $fDataPlaylist_$s$fData[]_$cdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c [Main.User])
  {- Arity: 2,
     Strictness: <C(S(SLLLL)),1*C1(U(1*U,1*U,A,A,A))><L,1*C1(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (c :: * -> *)
                   @ (t :: * -> *)
                   $dTypeable1 :: Data.Typeable.Internal.Typeable t
                   f :: forall d. Data.Data.Data d => c (t d) ->
                 case $dTypeable1
                        `cast`
                      (Data.Typeable.Internal.NTCo:Typeable[0] <* -> *>_N <t>_N)
                        (GHC.Prim.proxy#
                           @ (* -> *)
                           @ t) of wild { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                 case dt of wild1 {
                   DEFAULT -> GHC.Base.Nothing @ (c [Main.User])
                   __word 17730107610217102821
                   -> case dt1 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ (c [Main.User])
                        __word 9866972337190828755
                        -> GHC.Base.Just
                             @ (c [Main.User])
                             (f @ Main.User Main.$fDataUser)
                               `cast`
                             (<c>_R (Trans
                                         (UnivCo mkUnsafeCo nominal t GHC.Prim.Any)
                                         (UnivCo mkUnsafeCo nominal GHC.Prim.Any []) <Main.User>_N)) } } }) -}
d98e1b6b4028a2a4d798415c5e024128
  $fDataPlaylist_go ::
    [Data.Typeable.Internal.TypeRep]
    -> [GHC.Fingerprint.Type.Fingerprint]
  {- Arity: 1, Strictness: <S,1*U> -}
45e8e5f99469bc2706566ac50461ef3a
  $fDataPlaylist_go1 ::
    [Data.Typeable.Internal.TypeRep]
    -> [GHC.Fingerprint.Type.Fingerprint]
  {- Arity: 1, Strictness: <S,1*U> -}
eb6d3e5d29b3814dbda07b2b0ba18bb6
  $fDataPlaylist_w1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Main.$fDataPlaylist10) -}
d15807b1302c9dd0a0968ae6652a51ce
  $fDataPlaylist_w2 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Main.$fDataPlaylist18) -}
64b481fe8f9e0c6453c40e50bb71e757
  $fDataPlaylist_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 17730107610217102821
                   __word 9866972337190828755
                   Main.$fDataPlaylist_ww2
                   Main.$fDataPlaylist_ww3
                   Main.$fDataPlaylist_ww4) -}
d0c6344d41849257b446da548a8ceace
  $fDataPlaylist_wild1 :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 1823157555683100089
                   __word 6075095393958815813
                   Main.$fDataSong_ww2
                   Main.$fDataSong7
                   Main.$fConstructorPlaylist1) -}
25eb1cbc623e7de7bba971760e73c04f
  $fDataPlaylist_ww2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "ghc-prim"#) -}
811d6e2409706fff0a37b69ede68f04b
  $fDataPlaylist_ww3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "GHC.Types"#) -}
261ff36af5be02962c75c8f6a88c8e95
  $fDataPlaylist_ww4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "[]"#) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong :: Data.Data.Data Main.Song
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Song
                  Main.$fDataSong4
                  Main.$fDataSong_$cgfoldl
                  Main.$fDataSong_$cgunfold
                  Main.$fDataSong_$ctoConstr
                  Main.$fDataSong_$cdataTypeOf
                  Main.$fDataSong_$s$dmdataCast1
                  Main.$fDataSong_$s$dmdataCast2
                  Main.$fDataSong_$cgmapT
                  Main.$fDataSong_$cgmapQl
                  Main.$fDataSong_$cgmapQr
                  Main.$fDataSong_$cgmapQ
                  Main.$fDataSong_$cgmapQi
                  Main.$fDataSong_$cgmapM
                  Main.$fDataSong_$cgmapMp
                  Main.$fDataSong_$cgmapMo -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong1 ::
    (GHC.Base.String -> GHC.Base.String -> Main.Song, GHC.Types.Bool)
  {- HasNoCafRefs, Unfolding: ((Main.$WSong, GHC.Types.False)) -}
64338a193fdb3ee607c1fb3d496875e6
  $fDataSong2 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep Main.$fDataSong3) -}
071e11f68eded0752aaec85d55fb0112
  $fDataSong3 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Main.$crhb
                   (GHC.Types.[] @ Data.Data.Constr)) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong4 :: Data.Typeable.Internal.Typeable Main.Song
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fDataSong5
                  `cast`
                (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                          <*>_N <Main.Song>_N)) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong5 ::
    GHC.Prim.Proxy# Main.Song -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ wild :: GHC.Prim.Proxy# Main.Song -> Main.$fDataSong6) -}
428d5f2c74d1c1f1dd06129adf2eecc3
  $fDataSong6 :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 1440637862605605668
                   __word 12575646498848817258
                   Main.$fDataSong_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
6e15de445f78dcb5dd4a603a1e738d26
  $fDataSong7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cdataTypeOf :: Main.Song -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Main.Song -> Main.$triR) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgfoldl ::
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g) -> Main.Song -> c Main.Song
  {- Arity: 3,
     Strictness: <C(C(C(S))),C(C1(C1(U)))><L,1*C1(U)><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (c :: * -> *)
                   w :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b
                   w1 :: forall g. g -> c g
                   w2 :: Main.Song ->
                 case w2 of ww { Main.Song ww1 ww2 ->
                 w @ GHC.Base.String
                   @ Main.Song
                   Data.Text.$fDataText_$s$fData[]
                   (w @ GHC.Base.String
                      @ (GHC.Base.String -> Main.Song)
                      Data.Text.$fDataText_$s$fData[]
                      (w1
                         @ (GHC.Base.String -> GHC.Base.String -> Main.Song)
                         Main.$WSong)
                      ww1)
                   ww2 }) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgmapM ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.Song -> m Main.Song
  {- Arity: 3,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   w :: GHC.Base.Monad m
                   w1 :: forall d. Data.Data.Data d => d -> m d
                   w2 :: Main.Song ->
                 case w2 of ww { Main.Song ww1 ww2 ->
                 Main.$w$cgmapM @ m w w1 ww1 ww2 }) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgmapMo ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.Song -> m Main.Song
  {- Arity: 3,
     Strictness: <S(LSLL),U(A,1*U,U,C(C1(U)))><L,C(C1(U))><L,1*U(U,U)>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonadPlus :: GHC.Base.MonadPlus m
                   eta :: forall d. Data.Data.Data d => d -> m d
                   eta1 :: Main.Song ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl80 :: m Main.Song = GHC.Base.mzero @ m $dMonadPlus @ Main.Song
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Main.Song, GHC.Types.Bool)
                   @ Main.Song
                   (case eta1 of wild { Main.Song a141 a142 ->
                    let {
                      a143 :: forall d b.
                              Data.Data.Data d =>
                              Data.Data.Mp m (d -> b) -> d -> m (b, GHC.Types.Bool)
                        {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
                      = \ @ d
                          @ b
                          $dData1 :: Data.Data.Data d
                          ds :: Data.Data.Mp m (d -> b)[OneShot]
                          y :: d[OneShot] ->
                        let {
                          lvl81 :: m d = eta @ d $dData1 y
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad
                          @ (d -> b, GHC.Types.Bool)
                          @ (b, GHC.Types.Bool)
                          ds `cast` (Data.Data.NTCo:Mp[0] <m>_R <d -> b>_N)
                          (\ ds1 :: (d -> b, GHC.Types.Bool) ->
                           case ds1 of wild1 { (,) h b1 ->
                           case b1 of wild2 {
                             GHC.Types.False
                             -> GHC.Base.mplus
                                  @ m
                                  $dMonadPlus
                                  @ (b, GHC.Types.Bool)
                                  (GHC.Base.>>=
                                     @ m
                                     $dMonad
                                     @ d
                                     @ (b, GHC.Types.Bool)
                                     lvl81
                                     (\ y' :: d ->
                                      GHC.Base.return
                                        @ m
                                        $dMonad
                                        @ (b, GHC.Types.Bool)
                                        (h y', GHC.Types.True)))
                                  (GHC.Base.return
                                     @ m
                                     $dMonad
                                     @ (b, GHC.Types.Bool)
                                     (h y, GHC.Types.False))
                             GHC.Types.True
                             -> GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (b, GHC.Types.Bool)
                                  (h y, GHC.Types.True) } })
                    } in
                    a143
                      @ GHC.Base.String
                      @ Main.Song
                      Data.Text.$fDataText_$s$fData[]
                      (a143
                         @ GHC.Base.String
                         @ (GHC.Base.String -> Main.Song)
                         Data.Text.$fDataText_$s$fData[]
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (GHC.Base.String -> GHC.Base.String -> Main.Song, GHC.Types.Bool)
                            Main.$fDataSong1)
                           `cast`
                         (Sym (Data.Data.NTCo:Mp[0]
                                   <m>_R <GHC.Base.String -> GHC.Base.String -> Main.Song>_N))
                         a141)
                        `cast`
                      (Sym (Data.Data.NTCo:Mp[0] <m>_R <GHC.Base.String -> Main.Song>_N))
                      a142 })
                   (\ ds :: (Main.Song, GHC.Types.Bool) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl80
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ Main.Song x' } })) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgmapMp ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.Song -> m Main.Song
  {- Arity: 3,
     Strictness: <S(LSLL),U(A,1*U,U,C(C1(U)))><L,C(C1(U))><L,1*U(U,U)>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonadPlus :: GHC.Base.MonadPlus m
                   eta :: forall d. Data.Data.Data d => d -> m d
                   eta1 :: Main.Song ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl80 :: m Main.Song = GHC.Base.mzero @ m $dMonadPlus @ Main.Song
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Main.Song, GHC.Types.Bool)
                   @ Main.Song
                   (case eta1 of wild { Main.Song a141 a142 ->
                    let {
                      a143 :: forall d b.
                              Data.Data.Data d =>
                              Data.Data.Mp m (d -> b) -> d -> m (b, GHC.Types.Bool)
                        {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
                      = \ @ d
                          @ b
                          $dData1 :: Data.Data.Data d
                          ds :: Data.Data.Mp m (d -> b)[OneShot]
                          y :: d[OneShot] ->
                        let {
                          lvl81 :: m d = eta @ d $dData1 y
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad
                          @ (d -> b, GHC.Types.Bool)
                          @ (b, GHC.Types.Bool)
                          ds `cast` (Data.Data.NTCo:Mp[0] <m>_R <d -> b>_N)
                          (\ ds1 :: (d -> b, GHC.Types.Bool) ->
                           case ds1 of wild1 { (,) h b1 ->
                           GHC.Base.mplus
                             @ m
                             $dMonadPlus
                             @ (b, GHC.Types.Bool)
                             (GHC.Base.>>=
                                @ m
                                $dMonad
                                @ d
                                @ (b, GHC.Types.Bool)
                                lvl81
                                (\ y' :: d ->
                                 GHC.Base.return
                                   @ m
                                   $dMonad
                                   @ (b, GHC.Types.Bool)
                                   (h y', GHC.Types.True)))
                             (GHC.Base.return @ m $dMonad @ (b, GHC.Types.Bool) (h y, b1)) })
                    } in
                    a143
                      @ GHC.Base.String
                      @ Main.Song
                      Data.Text.$fDataText_$s$fData[]
                      (a143
                         @ GHC.Base.String
                         @ (GHC.Base.String -> Main.Song)
                         Data.Text.$fDataText_$s$fData[]
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (GHC.Base.String -> GHC.Base.String -> Main.Song, GHC.Types.Bool)
                            Main.$fDataSong1)
                           `cast`
                         (Sym (Data.Data.NTCo:Mp[0]
                                   <m>_R <GHC.Base.String -> GHC.Base.String -> Main.Song>_N))
                         a141)
                        `cast`
                      (Sym (Data.Data.NTCo:Mp[0] <m>_R <GHC.Base.String -> Main.Song>_N))
                      a142 })
                   (\ ds :: (Main.Song, GHC.Types.Bool) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl80
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ Main.Song x' } })) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgmapQ ::
    (forall d. Data.Data.Data d => d -> u) -> Main.Song -> [u]
  {- Arity: 2, Strictness: <L,C(C1(U))><S(SS),1*U(U,U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ u f :: forall d. Data.Data.Data d => d -> u x0 :: Main.Song ->
                 case x0 of wild { Main.Song a141 a142 ->
                 GHC.Types.:
                   @ u
                   (f @ GHC.Base.String Data.Text.$fDataText_$s$fData[] a141)
                   (GHC.Types.:
                      @ u
                      (f @ GHC.Base.String Data.Text.$fDataText_$s$fData[] a142)
                      (GHC.Types.[] @ u)) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgmapQi ::
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u) -> Main.Song -> u
  {- Arity: 3,
     Strictness: <S(S),1*U(1*U)><C(C(S)),1*C1(C1(U))><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ u
                   w :: GHC.Types.Int
                   w1 :: forall d. Data.Data.Data d => d -> u
                   w2 :: Main.Song ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Main.Song ww3 ww4 ->
                 case ww1 of wild {
                   DEFAULT -> Data.Maybe.fromJust1 @ u
                   0 -> w1 @ GHC.Base.String Data.Text.$fDataText_$s$fData[] ww3
                   1
                   -> w1
                        @ GHC.Base.String
                        Data.Text.$fDataText_$s$fData[]
                        ww4 } } }) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgmapQl ::
    (r -> r' -> r)
    -> r -> (forall d. Data.Data.Data d => d -> r') -> Main.Song -> r
  {- Arity: 4,
     Strictness: <C(C(S)),C(C1(U))><L,U><L,C(C1(U))><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   w :: r -> r' -> r
                   w1 :: r
                   w2 :: forall d. Data.Data.Data d => d -> r'
                   w3 :: Main.Song ->
                 case w3 of ww { Main.Song ww1 ww2 ->
                 w (w w1 (w2 @ GHC.Base.String Data.Text.$fDataText_$s$fData[] ww1))
                   (w2 @ GHC.Base.String Data.Text.$fDataText_$s$fData[] ww2) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgmapQr ::
    (r' -> r -> r)
    -> r -> (forall d. Data.Data.Data d => d -> r') -> Main.Song -> r
  {- Arity: 4,
     Strictness: <C(C(S)),C(C1(U))><L,U><L,C(C1(U))><S(SS),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   w :: r' -> r -> r
                   w1 :: r
                   w2 :: forall d. Data.Data.Data d => d -> r'
                   w3 :: Main.Song ->
                 case w3 of ww { Main.Song ww1 ww2 ->
                 w (w2 @ GHC.Base.String Data.Text.$fDataText_$s$fData[] ww1)
                   (w (w2 @ GHC.Base.String Data.Text.$fDataText_$s$fData[] ww2)
                      w1) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgmapT ::
    (forall b. Data.Data.Data b => b -> b) -> Main.Song -> Main.Song
  {- Arity: 2, Strictness: <C(C(S)),C(C1(U))><S(SS),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: forall b. Data.Data.Data b => b -> b w1 :: Main.Song ->
                 case w1 of ww { Main.Song ww1 ww2 ->
                 case w @ GHC.Base.String
                        Data.Text.$fDataText_$s$fData[]
                        ww1 of dt { DEFAULT ->
                 case w @ GHC.Base.String
                        Data.Text.$fDataText_$s$fData[]
                        ww2 of dt1 { DEFAULT ->
                 Main.Song dt dt1 } } }) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r) -> Data.Data.Constr -> c Main.Song
  {- Arity: 3, Strictness: <C(C(S)),C(C1(U))><L,1*C1(U)><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (c :: * -> *)
                   k :: forall b r. Data.Data.Data b => c (b -> r) -> c r
                   z2 :: forall r. r -> c r
                   ds :: Data.Data.Constr ->
                 k @ GHC.Base.String
                   @ Main.Song
                   Data.Text.$fDataText_$s$fData[]
                   (k @ GHC.Base.String
                      @ (GHC.Base.String -> Main.Song)
                      Data.Text.$fDataText_$s$fData[]
                      (z2
                         @ (GHC.Base.String -> GHC.Base.String -> Main.Song)
                         Main.$WSong))) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$ctoConstr :: Main.Song -> Data.Data.Constr
  {- Arity: 1, Strictness: <S(SS),1*U(1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Song ->
                 case ds of wild { Main.Song ds1 ds2 -> Main.$crhb }) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$s$dmdataCast1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c Main.Song)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (c :: * -> *)
                   @ (t :: * -> *)
                   $dTypeable :: Data.Typeable.Internal.Typeable t
                   ds :: forall d. Data.Data.Data d => c (t d) ->
                 GHC.Base.Nothing @ (c Main.Song)) -}
49814fff28b1b1012fadefc14273c7cd
  $fDataSong_$s$dmdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c Main.Song)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (c :: * -> *)
                   @ (t :: * -> * -> *)
                   $dTypeable :: Data.Typeable.Internal.Typeable t
                   ds :: forall d e.
                         (Data.Data.Data d, Data.Data.Data e) =>
                         c (t d e) ->
                 GHC.Base.Nothing @ (c Main.Song)) -}
a7118a03b5e342b15778c6296aef5411
  $fDataSong_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 1440637862605605668
                   __word 12575646498848817258
                   Main.$fDataSong_ww2
                   Main.$fDataSong7
                   Main.$fConstructorSong1) -}
40504cf2a7df1f8074fe24ccd274f8cd
  $fDataSong_ww2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser :: Data.Data.Data Main.User
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User
                  Main.$fDataUser4
                  Main.$fDataUser_$cgfoldl
                  Main.$fDataUser_$cgunfold
                  Main.$fDataUser_$ctoConstr
                  Main.$fDataUser_$cdataTypeOf
                  Main.$fDataUser_$s$dmdataCast1
                  Main.$fDataUser_$s$dmdataCast2
                  Main.$fDataUser_$cgmapT
                  Main.$fDataUser_$cgmapQl
                  Main.$fDataUser_$cgmapQr
                  Main.$fDataUser_$cgmapQ
                  Main.$fDataUser_$cgmapQi
                  Main.$fDataUser_$cgmapM
                  Main.$fDataUser_$cgmapMp
                  Main.$fDataUser_$cgmapMo -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser1 :: (GHC.Base.String -> Main.User, GHC.Types.Bool)
  {- HasNoCafRefs, Unfolding: ((Main.$WUser, GHC.Types.False)) -}
b362d7a02375368a357220d3558757ee
  $fDataUser2 :: Data.Data.DataRep
  {- Strictness: m1,
     Unfolding: (Data.Data.AlgRep Main.$fDataUser3) -}
57e7866d01b06e9a8060d66a21ffcf7c
  $fDataUser3 :: [Data.Data.Constr]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Data.Constr
                   Main.$crgL
                   (GHC.Types.[] @ Data.Data.Constr)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser4 :: Data.Typeable.Internal.Typeable Main.User
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Main.$fDataUser5
                  `cast`
                (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                          <*>_N <Main.User>_N)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser5 ::
    GHC.Prim.Proxy# Main.User -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ wild :: GHC.Prim.Proxy# Main.User -> Main.$fDataUser6) -}
8c26a0f697409116b0d97d5fa14f4b44
  $fDataUser6 :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 8072041860742076866
                   __word 8858956647680378335
                   Main.$fDataUser_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cdataTypeOf :: Main.User -> Data.Data.DataType
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Main.User -> Main.$triQ) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgfoldl ::
    (forall d b. Data.Data.Data d => c (d -> b) -> d -> c b)
    -> (forall g. g -> c g) -> Main.User -> c Main.User
  {- Arity: 3,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U)))><L,1*C1(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (c :: * -> *)
                   k :: forall d b. Data.Data.Data d => c (d -> b) -> d -> c b
                   z2 :: forall g. g -> c g
                   ds :: Main.User ->
                 case ds of wild { Main.User a141 ->
                 k @ GHC.Base.String
                   @ Main.User
                   Data.Text.$fDataText_$s$fData[]
                   (z2 @ (GHC.Base.String -> Main.User) Main.$WUser)
                   a141 }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgmapM ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.User -> m Main.User
  {- Arity: 3,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   w :: GHC.Base.Monad m
                   w1 :: forall d. Data.Data.Data d => d -> m d
                   w2 :: Main.User ->
                 case w2 of ww { Main.User ww1 -> Main.$w$cgmapM1 @ m w w1 ww1 }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgmapMo ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.User -> m Main.User
  {- Arity: 3,
     Strictness: <S(LSLL),U(A,1*U,U,C(C1(U)))><L,C(C1(U))><L,1*U(U)>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonadPlus :: GHC.Base.MonadPlus m
                   eta :: forall d. Data.Data.Data d => d -> m d
                   eta1 :: Main.User ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl80 :: m Main.User = GHC.Base.mzero @ m $dMonadPlus @ Main.User
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Main.User, GHC.Types.Bool)
                   @ Main.User
                   (case eta1 of wild { Main.User a141 ->
                    let {
                      lvl81 :: m GHC.Base.String
                      = eta @ GHC.Base.String Data.Text.$fDataText_$s$fData[] a141
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (GHC.Base.String -> Main.User, GHC.Types.Bool)
                      @ (Main.User, GHC.Types.Bool)
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (GHC.Base.String -> Main.User, GHC.Types.Bool)
                         Main.$fDataUser1)
                      (\ ds1 :: (GHC.Base.String -> Main.User, GHC.Types.Bool) ->
                       case ds1 of wild1 { (,) h b1 ->
                       case b1 of wild2 {
                         GHC.Types.False
                         -> GHC.Base.mplus
                              @ m
                              $dMonadPlus
                              @ (Main.User, GHC.Types.Bool)
                              (GHC.Base.>>=
                                 @ m
                                 $dMonad
                                 @ GHC.Base.String
                                 @ (Main.User, GHC.Types.Bool)
                                 lvl81
                                 (\ y' :: GHC.Base.String ->
                                  GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (Main.User, GHC.Types.Bool)
                                    (h y', GHC.Types.True)))
                              (GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ (Main.User, GHC.Types.Bool)
                                 (h a141, GHC.Types.False))
                         GHC.Types.True
                         -> GHC.Base.return
                              @ m
                              $dMonad
                              @ (Main.User, GHC.Types.Bool)
                              (h a141, GHC.Types.True) } }) })
                   (\ ds :: (Main.User, GHC.Types.Bool) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl80
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ Main.User x' } })) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgmapMp ::
    GHC.Base.MonadPlus m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> Main.User -> m Main.User
  {- Arity: 3,
     Strictness: <S(LSLL),U(A,1*U,U,C(C1(U)))><L,C(C1(U))><L,1*U(U)>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonadPlus :: GHC.Base.MonadPlus m
                   eta :: forall d. Data.Data.Data d => d -> m d
                   eta1 :: Main.User ->
                 let {
                   $dMonad :: GHC.Base.Monad m = GHC.Base.$p2MonadPlus @ m $dMonadPlus
                 } in
                 let {
                   lvl80 :: m Main.User = GHC.Base.mzero @ m $dMonadPlus @ Main.User
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Main.User, GHC.Types.Bool)
                   @ Main.User
                   (case eta1 of wild { Main.User a141 ->
                    let {
                      lvl81 :: m GHC.Base.String
                      = eta @ GHC.Base.String Data.Text.$fDataText_$s$fData[] a141
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (GHC.Base.String -> Main.User, GHC.Types.Bool)
                      @ (Main.User, GHC.Types.Bool)
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (GHC.Base.String -> Main.User, GHC.Types.Bool)
                         Main.$fDataUser1)
                      (\ ds1 :: (GHC.Base.String -> Main.User, GHC.Types.Bool) ->
                       case ds1 of wild1 { (,) h b1 ->
                       GHC.Base.mplus
                         @ m
                         $dMonadPlus
                         @ (Main.User, GHC.Types.Bool)
                         (GHC.Base.>>=
                            @ m
                            $dMonad
                            @ GHC.Base.String
                            @ (Main.User, GHC.Types.Bool)
                            lvl81
                            (\ y' :: GHC.Base.String ->
                             GHC.Base.return
                               @ m
                               $dMonad
                               @ (Main.User, GHC.Types.Bool)
                               (h y', GHC.Types.True)))
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Main.User, GHC.Types.Bool)
                            (h a141, b1)) }) })
                   (\ ds :: (Main.User, GHC.Types.Bool) ->
                    case ds of wild { (,) x' b ->
                    case b of wild1 {
                      GHC.Types.False -> lvl80
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ Main.User x' } })) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgmapQ ::
    (forall d. Data.Data.Data d => d -> u) -> Main.User -> [u]
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S(S),1*U(U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ u f :: forall d. Data.Data.Data d => d -> u x0 :: Main.User ->
                 case x0 of wild { Main.User a141 ->
                 GHC.Types.:
                   @ u
                   (f @ GHC.Base.String Data.Text.$fDataText_$s$fData[] a141)
                   (GHC.Types.[] @ u) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgmapQi ::
    GHC.Types.Int
    -> (forall d. Data.Data.Data d => d -> u) -> Main.User -> u
  {- Arity: 3,
     Strictness: <S(S),1*U(1*U)><C(C(S)),1*C1(C1(U))><S(S),1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ u
                   i :: GHC.Types.Int
                   f :: forall d. Data.Data.Data d => d -> u
                   x :: Main.User ->
                 case x of wild { Main.User a141 ->
                 case i of wild1 { GHC.Types.I# x1 ->
                 case x1 of wild2 {
                   DEFAULT -> Data.Maybe.fromJust1 @ u
                   0
                   -> f @ GHC.Base.String
                        Data.Text.$fDataText_$s$fData[]
                        a141 } } }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgmapQl ::
    (r -> r' -> r)
    -> r -> (forall d. Data.Data.Data d => d -> r') -> Main.User -> r
  {- Arity: 4,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><S(S),1*U(U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   o :: r -> r' -> r
                   r1 :: r
                   f :: forall d. Data.Data.Data d => d -> r'
                   eta :: Main.User ->
                 case eta of wild { Main.User a141 ->
                 o r1
                   (f @ GHC.Base.String Data.Text.$fDataText_$s$fData[] a141) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgmapQr ::
    (r' -> r -> r)
    -> r -> (forall d. Data.Data.Data d => d -> r') -> Main.User -> r
  {- Arity: 4,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,1*C1(C1(U))><S(S),1*U(U)>,
     Unfolding: InlineRule (4, True, False)
                (\ @ r
                   @ r'
                   o :: r' -> r -> r
                   r0 :: r
                   f :: forall d. Data.Data.Data d => d -> r'
                   x0 :: Main.User ->
                 case x0 of wild { Main.User a141 ->
                 o (f @ GHC.Base.String Data.Text.$fDataText_$s$fData[] a141)
                   r0 }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgmapT ::
    (forall b. Data.Data.Data b => b -> b) -> Main.User -> Main.User
  {- Arity: 2, Strictness: <C(C(S)),1*C1(C1(U))><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ f :: forall b. Data.Data.Data b => b -> b x0 :: Main.User ->
                 case x0 of wild { Main.User a141 ->
                 case f @ GHC.Base.String
                        Data.Text.$fDataText_$s$fData[]
                        a141 of dt { DEFAULT ->
                 Main.User dt } }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$cgunfold ::
    (forall b r. Data.Data.Data b => c (b -> r) -> c r)
    -> (forall r. r -> c r) -> Data.Data.Constr -> c Main.User
  {- Arity: 3, Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (c :: * -> *)
                   k :: forall b r. Data.Data.Data b => c (b -> r) -> c r
                   z2 :: forall r. r -> c r
                   ds :: Data.Data.Constr ->
                 k @ GHC.Base.String
                   @ Main.User
                   Data.Text.$fDataText_$s$fData[]
                   (z2 @ (GHC.Base.String -> Main.User) Main.$WUser)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$ctoConstr :: Main.User -> Data.Data.Constr
  {- Arity: 1, Strictness: <S(S),1*U(1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.User ->
                 case ds of wild { Main.User ds1 -> Main.$crgL }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$s$dmdataCast1 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d. Data.Data.Data d => c (t d))
    -> GHC.Base.Maybe (c Main.User)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (c :: * -> *)
                   @ (t :: * -> *)
                   $dTypeable :: Data.Typeable.Internal.Typeable t
                   ds :: forall d. Data.Data.Data d => c (t d) ->
                 GHC.Base.Nothing @ (c Main.User)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fDataUser_$s$dmdataCast2 ::
    Data.Typeable.Internal.Typeable t =>
    (forall d e. (Data.Data.Data d, Data.Data.Data e) => c (t d e))
    -> GHC.Base.Maybe (c Main.User)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (c :: * -> *)
                   @ (t :: * -> * -> *)
                   $dTypeable :: Data.Typeable.Internal.Typeable t
                   ds :: forall d e.
                         (Data.Data.Data d, Data.Data.Data e) =>
                         c (t d e) ->
                 GHC.Base.Nothing @ (c Main.User)) -}
8ab1f3dba0c1b21bba5770e2dcffb1db
  $fDataUser_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 8072041860742076866
                   __word 8858956647680378335
                   Main.$fDataSong_ww2
                   Main.$fDataSong7
                   Main.$fConstructorUser1) -}
2313f1afc8fb4edd03b9fb6f1bcc56b7
  $fDatatypePlaylist :: GHC.Generics.Datatype Main.D1Playlist
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.D1Playlist
                  Main.$fDatatypePlaylist_$cdatatypeName
                  Main.$fDatatypePlaylist_$cmoduleName
                  Main.$fDatatypePlaylist_$s$dmisNewtype -}
2313f1afc8fb4edd03b9fb6f1bcc56b7
  $fDatatypePlaylist_$cdatatypeName ::
    t Main.D1Playlist f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1Playlist f a141 ->
                 Main.$fConstructorPlaylist1) -}
2313f1afc8fb4edd03b9fb6f1bcc56b7
  $fDatatypePlaylist_$cmoduleName ::
    t Main.D1Playlist f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1Playlist f a141 ->
                 Main.$fDataSong7) -}
2313f1afc8fb4edd03b9fb6f1bcc56b7
  $fDatatypePlaylist_$s$dmisNewtype ::
    t Main.D1Playlist f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1Playlist f a141 ->
                 GHC.Types.False) -}
cc197cf2738de2f52fdff74c4ade9c8b
  $fDatatypeSong :: GHC.Generics.Datatype Main.D1Song
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.D1Song
                  Main.$fDatatypeSong_$cdatatypeName
                  Main.$fDatatypeSong_$cmoduleName
                  Main.$fDatatypeSong_$s$dmisNewtype -}
cc197cf2738de2f52fdff74c4ade9c8b
  $fDatatypeSong_$cdatatypeName ::
    t Main.D1Song f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1Song f a141 ->
                 Main.$fConstructorSong1) -}
cc197cf2738de2f52fdff74c4ade9c8b
  $fDatatypeSong_$cmoduleName ::
    t Main.D1Song f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1Song f a141 ->
                 Main.$fDataSong7) -}
cc197cf2738de2f52fdff74c4ade9c8b
  $fDatatypeSong_$s$dmisNewtype ::
    t Main.D1Song f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1Song f a141 ->
                 GHC.Types.False) -}
87b5311e9012040d900b7ca090214d2f
  $fDatatypeUser :: GHC.Generics.Datatype Main.D1User
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.D1User
                  Main.$fDatatypeUser_$cdatatypeName
                  Main.$fDatatypeUser_$cmoduleName
                  Main.$fDatatypeUser_$s$dmisNewtype -}
87b5311e9012040d900b7ca090214d2f
  $fDatatypeUser_$cdatatypeName ::
    t Main.D1User f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1User f a141 ->
                 Main.$fConstructorUser1) -}
87b5311e9012040d900b7ca090214d2f
  $fDatatypeUser_$cmoduleName ::
    t Main.D1User f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1User f a141 ->
                 Main.$fDataSong7) -}
87b5311e9012040d900b7ca090214d2f
  $fDatatypeUser_$s$dmisNewtype ::
    t Main.D1User f a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.D1User f a141 ->
                 GHC.Types.False) -}
49814fff28b1b1012fadefc14273c7cd
  $fEqKey ::
    GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fEqKey_$c==
                  Main.$fEqKey_$c/= -}
261e99bff73ad820977b6332d53528b9
  $fEqKey0 ::
    GHC.Classes.Eq
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fEqKey0_$c==
                  Main.$fEqKey0_$c/= -}
261e99bff73ad820977b6332d53528b9
  $fEqKey0_$c/= ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fBitsInt64_$c/=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
261e99bff73ad820977b6332d53528b9
  $fEqKey0_$c== ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fEqInt64_$c==
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fEqKey1 ::
    GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fEqKey1_$c==
                  Main.$fEqKey1_$c/= -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fEqKey1_$c/= ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fBitsInt64_$c/=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fEqKey1_$c== ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fEqInt64_$c==
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fEqKey_$c/= ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fBitsInt64_$c/=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fEqKey_$c== ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fEqInt64_$c==
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
261e99bff73ad820977b6332d53528b9
  $fEqPlaylist :: GHC.Classes.Eq Main.Playlist
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Playlist Main.$fEqPlaylist_$c== Main.$fEqPlaylist_$c/= -}
261e99bff73ad820977b6332d53528b9
  $fEqPlaylist_$c/= ::
    Main.Playlist -> Main.Playlist -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(U,U)><S(SS),1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a141 :: Main.Playlist b :: Main.Playlist ->
                 case Main.$fEqPlaylist_$c== a141 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
261e99bff73ad820977b6332d53528b9
  $fEqPlaylist_$c== ::
    Main.Playlist -> Main.Playlist -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(U,U)><S(SS),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Main.Playlist w1 :: Main.Playlist ->
                 case w of ww { Main.Playlist ww1 ww2 ->
                 case w1 of ww3 { Main.Playlist ww4 ww5 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Main.Song
                        Main.$fEqSong
                        ww1
                        ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ Main.User
                        Main.$fEqUser
                        ww2
                        ww5 } } }) -}
49814fff28b1b1012fadefc14273c7cd
  $fEqSong :: GHC.Classes.Eq Main.Song
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Song Main.$fEqSong_$c== Main.$fEqSong_$c/= -}
49814fff28b1b1012fadefc14273c7cd
  $fEqSong_$c/= :: Main.Song -> Main.Song -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(U,U)><S(SS),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Main.Song w1 :: Main.Song ->
                 case w of ww { Main.Song ww1 ww2 ->
                 case w1 of ww3 { Main.Song ww4 ww5 ->
                 case GHC.Base.eqString ww1 ww4 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Base.eqString ww2 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
49814fff28b1b1012fadefc14273c7cd
  $fEqSong_$c== :: Main.Song -> Main.Song -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(U,U)><S(SS),1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Main.Song w1 :: Main.Song ->
                 case w of ww { Main.Song ww1 ww2 ->
                 case w1 of ww3 { Main.Song ww4 ww5 ->
                 case GHC.Base.eqString ww1 ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Base.eqString ww2 ww5 } } }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fEqUser :: GHC.Classes.Eq Main.User
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User Main.$fEqUser_$c== Main.$fEqUser_$c/= -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fEqUser_$c/= :: Main.User -> Main.User -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a141 :: Main.User b :: Main.User ->
                 case a141 of wild { Main.User a142 ->
                 case b of wild1 { Main.User b1 ->
                 case GHC.Base.eqString a142 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fEqUser_$c== :: Main.User -> Main.User -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Main.User ds1 :: Main.User ->
                 case ds of wild { Main.User a141 ->
                 case ds1 of wild1 { Main.User b1 ->
                 GHC.Base.eqString a141 b1 } }) -}
49814fff28b1b1012fadefc14273c7cd
  $fFromHttpApiDataKey ::
    Web.HttpApiData.Internal.FromHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fFromHttpApiDataKey_$cparseQueryParam
                  Main.$fFromHttpApiDataKey_$cparseHeader
                  Main.$fFromHttpApiDataKey_$cparseQueryParam -}
261e99bff73ad820977b6332d53528b9
  $fFromHttpApiDataKey0 ::
    Web.HttpApiData.Internal.FromHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fFromHttpApiDataKey0_$cparseQueryParam
                  Main.$fFromHttpApiDataKey0_$cparseHeader
                  Main.$fFromHttpApiDataKey0_$cparseQueryParam -}
261e99bff73ad820977b6332d53528b9
  $fFromHttpApiDataKey0_$cparseHeader ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseHeader
                  `cast`
                (<Data.ByteString.Internal.ByteString>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))))_R) -}
261e99bff73ad820977b6332d53528b9
  $fFromHttpApiDataKey0_$cparseQueryParam ::
    Data.Text.Internal.Text
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseUrlPiece
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))))_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fFromHttpApiDataKey1 ::
    Web.HttpApiData.Internal.FromHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fFromHttpApiDataKey1_$cparseQueryParam
                  Main.$fFromHttpApiDataKey1_$cparseHeader
                  Main.$fFromHttpApiDataKey1_$cparseQueryParam -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fFromHttpApiDataKey1_$cparseHeader ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseHeader
                  `cast`
                (<Data.ByteString.Internal.ByteString>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUser[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUser[0])))))))_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fFromHttpApiDataKey1_$cparseQueryParam ::
    Data.Text.Internal.Text
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseUrlPiece
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUser[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUser[0])))))))_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fFromHttpApiDataKey_$cparseHeader ::
    Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1, Strictness: <L,1*U(U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseHeader
                  `cast`
                (<Data.ByteString.Internal.ByteString>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeySong[0]))
                                        (Sub (Sym (Main.TFCo:R:KeySong[0])))))))_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fFromHttpApiDataKey_$cparseQueryParam ::
    Data.Text.Internal.Text
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fFromHttpApiDataInt64_$cparseUrlPiece
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeySong[0]))
                                        (Sub (Sym (Main.TFCo:R:KeySong[0])))))))_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fFromJSONEntity ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Entity Main.Song)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.Song>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fFromJSONEntity0 ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Entity Main.Playlist)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity0_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.Playlist>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fFromJSONEntity0_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Entity Main.Playlist)
  {- Arity: 1,
     Unfolding: (Database.Persist.Class.PersistEntity.entityIdFromJSON
                   @ Main.Playlist
                   Main.$fPersistEntityPlaylist
                   Main.$fFromJSONEntity0_$cparseJSON1
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0] <Main.Playlist>_N))
                   Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                     `cast`
                   (Trans
                        (<Data.Aeson.Types.Internal.Value>_R
                         ->_R (Data.Aeson.Types.Internal.Parser
                                 (Trans
                                      (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                                      (Trans
                                           (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                           (Trans
                                                (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                                (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))))_R)
                        (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.Playlist>_N)))) -}
261e99bff73ad820977b6332d53528b9
  $fFromJSONEntity0_$cparseJSON1 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Main.Playlist
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Data.Aeson.Types.Internal.Value ->
                 case ds of wild {
                   DEFAULT
                   -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero
                        @ Main.Playlist
                   Data.Aeson.Types.Internal.Object obj
                   -> let {
                        e :: Data.Aeson.Types.Internal.Parser [Main.Song]
                        = case Main.$fFromJSONEntity15 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.Instances.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 obj of wild1 {
                            GHC.Base.Nothing
                            -> Main.$fFromJSONEntity13
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.Song]>_R))
                            GHC.Base.Just v
                            -> case v of wild2 {
                                 DEFAULT
                                 -> Data.Aeson.Types.Instances.typeMismatch
                                      @ [Main.Song]
                                      Main.$fFromJSONEntity12
                                      wild2
                                 Data.Aeson.Types.Internal.Array arr
                                 -> case arr of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                                    Main.$wa2 ww5 ww6 ww7 } } } }
                      } in
                      let {
                        e1 :: Data.Aeson.Types.Internal.Parser [Main.User]
                        = case Main.$fFromJSONEntity10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.Instances.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 obj of wild1 {
                            GHC.Base.Nothing
                            -> Main.$fFromJSONEntity8
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.User]>_R))
                            GHC.Base.Just v
                            -> case v of wild2 {
                                 DEFAULT
                                 -> Data.Aeson.Types.Instances.typeMismatch
                                      @ [Main.User]
                                      Main.$fFromJSONEntity12
                                      wild2
                                 Data.Aeson.Types.Internal.Array arr
                                 -> case arr of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                                    Main.$wa1 ww5 ww6 ww7 } } } }
                      } in
                      (\ @ (f :: * -> *)
                         @ r
                         kf :: Data.Aeson.Types.Internal.Failure f r
                         ks :: Data.Aeson.Types.Internal.Success Main.Playlist f r ->
                       e `cast` (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.Song]>_R)
                         @ f
                         @ r
                         kf
                         (\ a141 :: [Main.Song] ->
                          e1
                            `cast`
                          (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.User]>_R)
                            @ f
                            @ r
                            kf
                            (\ a142 :: [Main.User] ->
                             ks
                               (case a141 of dt { DEFAULT ->
                                case a142 of dt1 { DEFAULT -> Main.Playlist dt dt1 } }))))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                <Main.Playlist>_R)) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fFromJSONEntity0_$cparseJSON2 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Main.User
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Data.Aeson.Types.Internal.Value ->
                 case ds of wild {
                   DEFAULT
                   -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero @ Main.User
                   Data.Aeson.Types.Internal.Object obj
                   -> let {
                        e :: Data.Aeson.Types.Internal.Parser GHC.Base.String
                        = case Main.$fFromJSONEntity7 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.Instances.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 obj of wild1 {
                            GHC.Base.Nothing
                            -> Main.$fFromJSONEntity4
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                         <GHC.Base.String>_R))
                            GHC.Base.Just v
                            -> case v of wild2 {
                                 DEFAULT
                                 -> Data.Aeson.Types.Instances.typeMismatch
                                      @ GHC.Base.String
                                      Main.$fFromJSONEntity3
                                      wild2
                                 Data.Aeson.Types.Internal.String txt
                                 -> case txt of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                                    let {
                                      a141 :: GHC.Base.String
                                      = let {
                                          a142 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                        } in
                                        letrec {
                                          $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                            {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                                          = \ ww4 :: GHC.Prim.Int# ->
                                            case GHC.Prim.tagToEnum#
                                                   @ GHC.Types.Bool
                                                   (GHC.Prim.>=# ww4 a142) of wild4 {
                                              GHC.Types.False
                                              -> case GHC.Prim.indexWord16Array#
                                                        dt
                                                        ww4 of r# { DEFAULT ->
                                                 case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.geWord#
                                                           r#
                                                           __word 55296) of wild5 {
                                                   GHC.Types.False
                                                   -> GHC.Types.:
                                                        @ GHC.Types.Char
                                                        (GHC.Types.C#
                                                           (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                        ($wunfold (GHC.Prim.+# ww4 1))
                                                   GHC.Types.True
                                                   -> case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.leWord#
                                                                r#
                                                                __word 56319) of wild6 {
                                                        GHC.Types.False
                                                        -> GHC.Types.:
                                                             @ GHC.Types.Char
                                                             (GHC.Types.C#
                                                                (GHC.Prim.chr#
                                                                   (GHC.Prim.word2Int# r#)))
                                                             ($wunfold (GHC.Prim.+# ww4 1))
                                                        GHC.Types.True
                                                        -> case GHC.Prim.indexWord16Array#
                                                                  dt
                                                                  (GHC.Prim.+#
                                                                     ww4
                                                                     1) of r#1 { DEFAULT ->
                                                           GHC.Types.:
                                                             @ GHC.Types.Char
                                                             (GHC.Types.C#
                                                                (GHC.Prim.chr#
                                                                   (GHC.Prim.+#
                                                                      (GHC.Prim.+#
                                                                         (GHC.Prim.uncheckedIShiftL#
                                                                            (GHC.Prim.-#
                                                                               (GHC.Prim.word2Int#
                                                                                  r#)
                                                                               55296)
                                                                            10)
                                                                         (GHC.Prim.-#
                                                                            (GHC.Prim.word2Int# r#1)
                                                                            56320))
                                                                      65536)))
                                                             ($wunfold (GHC.Prim.+# ww4 2)) } } } }
                                              GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                        } in
                                        $wunfold dt1
                                    } in
                                    (\ @ (f :: * -> *)
                                       @ r
                                       _kf :: Data.Aeson.Types.Internal.Failure f r
                                       ks :: Data.Aeson.Types.Internal.Success
                                               GHC.Base.String f r ->
                                     ks a141)
                                      `cast`
                                    (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                              <GHC.Base.String>_R)) } } } }
                      } in
                      (\ @ (f :: * -> *)
                         @ r
                         kf :: Data.Aeson.Types.Internal.Failure f r
                         ks :: Data.Aeson.Types.Internal.Success Main.User f r ->
                       e `cast`
                       (Data.Aeson.Types.Internal.NTCo:Parser[0] <GHC.Base.String>_R)
                         @ f
                         @ r
                         kf
                         (\ a141 :: GHC.Base.String ->
                          ks (case a141 of dt { DEFAULT -> Main.User dt })))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0]
                                <Main.User>_R)) }) -}
40c94915475d019c2be534a65e20d183
  $fFromJSONEntity0_msg1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "key "#
                   Main.$fFromJSONEntity9) -}
a2341330b928c0daae51876a95ba40fc
  $fFromJSONEntity0_msg2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "key "#
                   Main.$fFromJSONEntity14) -}
611d630e2cf63cc4b92b2264cf3e91bd
  $fFromJSONEntity0_msg3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "key "#
                   Main.$fFromJSONEntity5) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fFromJSONEntity1 ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Entity Main.User)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity1_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.User>_N)) -}
a1aa00b52ca143d3578875bbae932392
  $fFromJSONEntity10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "collaborators"#) -}
de192071dcff66846a5724653aa37f6e
  $fFromJSONEntity11 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success [Main.Song] f r -> f r
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (f :: * -> *)
                   @ r
                   _kf :: Data.Aeson.Types.Internal.Failure f r
                   ks :: Data.Aeson.Types.Internal.Success [Main.Song] f r ->
                 ks (GHC.Types.[] @ Main.Song)) -}
53ada54aff253c9a7a52b85ec6f5c7e1
  $fFromJSONEntity12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "[a]"#) -}
f058fa74437d2e04445b056a6bde923a
  $fFromJSONEntity13 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success [Main.Song] f r -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success [Main.Song] f r ->
                 kf Main.$fFromJSONEntity0_msg2) -}
83aa9d8e0624f709f79df955494624d2
  $fFromJSONEntity14 :: [GHC.Types.Char]
  {- Unfolding: (case Data.Text.Show.$w$cshow
                        Main.$fFromJSONEntity15 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                   Main.$fFromJSONEntity6 }) -}
6b7691f6bc6606c333a880aae2f58c0f
  $fFromJSONEntity15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "songs"#) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fFromJSONEntity1_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Entity Main.User)
  {- Arity: 1,
     Unfolding: (Database.Persist.Class.PersistEntity.entityIdFromJSON
                   @ Main.User
                   Main.$fPersistEntityUser
                   Main.$fFromJSONEntity0_$cparseJSON2
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0] <Main.User>_N))
                   Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                     `cast`
                   (Trans
                        (<Data.Aeson.Types.Internal.Value>_R
                         ->_R (Data.Aeson.Types.Internal.Parser
                                 (Trans
                                      (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                                      (Trans
                                           (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                           (Trans
                                                (Sym (Main.NTCo:R:KeyUser[0]))
                                                (Sub (Sym (Main.TFCo:R:KeyUser[0])))))))_R)
                        (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.User>_N)))) -}
938c2e9227c57f8c9846b403ef63c645
  $fFromJSONEntity2 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success [Main.User] f r -> f r
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (f :: * -> *)
                   @ r
                   _kf :: Data.Aeson.Types.Internal.Failure f r
                   ks :: Data.Aeson.Types.Internal.Success [Main.User] f r ->
                 ks (GHC.Types.[] @ Main.User)) -}
81d3fdea5ba0bc32ce1cce5199215f13
  $fFromJSONEntity3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "String"#) -}
4e6bfabe2f6fb5655e87c1c91650b326
  $fFromJSONEntity4 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success GHC.Base.String f r -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success GHC.Base.String f r ->
                 kf Main.$fFromJSONEntity0_msg3) -}
fd2ee3f9a78d4a93fdfb450d70c2f8bc
  $fFromJSONEntity5 :: [GHC.Types.Char]
  {- Unfolding: (case Data.Text.Show.$w$cshow
                        Main.$fFromJSONEntity7 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                   Main.$fFromJSONEntity6 }) -}
414e2728e63bcae243b8060c861e6ba2
  $fFromJSONEntity6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " not present"#) -}
c7deafe2c2be7f4fdfccd8a972127056
  $fFromJSONEntity7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "soundCloudId"#) -}
6065fd97d2d2db76b75e45a70fc6ef1e
  $fFromJSONEntity8 ::
    Data.Aeson.Types.Internal.Failure f r
    -> Data.Aeson.Types.Internal.Success [Main.User] f r -> f r
  {- Arity: 2,
     Unfolding: (\ @ (f :: * -> *)
                   @ r
                   kf :: Data.Aeson.Types.Internal.Failure f r
                   _ks :: Data.Aeson.Types.Internal.Success [Main.User] f r ->
                 kf Main.$fFromJSONEntity0_msg1) -}
c433c18e9fe64253d020d41ae28740af
  $fFromJSONEntity9 :: [GHC.Types.Char]
  {- Unfolding: (case Data.Text.Show.$w$cshow
                        Main.$fFromJSONEntity10 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                   Main.$fFromJSONEntity6 }) -}
49814fff28b1b1012fadefc14273c7cd
  $fFromJSONEntity_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Entity Main.Song)
  {- Arity: 1,
     Unfolding: (Database.Persist.Class.PersistEntity.entityIdFromJSON
                   @ Main.Song
                   Main.$fPersistEntitySong
                   Main.$fFromJSONEntity_$cparseJSON1
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0] <Main.Song>_N))
                   Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                     `cast`
                   (Trans
                        (<Data.Aeson.Types.Internal.Value>_R
                         ->_R (Data.Aeson.Types.Internal.Parser
                                 (Trans
                                      (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                                      (Trans
                                           (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                           (Trans
                                                (Sym (Main.NTCo:R:KeySong[0]))
                                                (Sub (Sym (Main.TFCo:R:KeySong[0])))))))_R)
                        (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.Song>_N)))) -}
49814fff28b1b1012fadefc14273c7cd
  $fFromJSONEntity_$cparseJSON1 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Main.Song
  {- Arity: 1, Strictness: <S,1*U> -}
49814fff28b1b1012fadefc14273c7cd
  $fFromJSONKey ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntitySong_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Song>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fFromJSONKey0 ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntityPlaylist_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Playlist>_N)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fFromJSONKey1 ::
    Data.Aeson.Types.Class.FromJSON
      (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntityUser_$cparseJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.User>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fFromJSONPlaylist :: Data.Aeson.Types.Class.FromJSON Main.Playlist
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity0_$cparseJSON1
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                          <Main.Playlist>_N)) -}
49814fff28b1b1012fadefc14273c7cd
  $fFromJSONSong :: Data.Aeson.Types.Class.FromJSON Main.Song
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity_$cparseJSON1
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0] <Main.Song>_N)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fFromJSONUser :: Data.Aeson.Types.Class.FromJSON Main.User
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fFromJSONEntity0_$cparseJSON2
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0] <Main.User>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fGenericPlaylist :: GHC.Generics.Generic Main.Playlist
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Playlist
                  Main.$fGenericPlaylist_$cfrom
                  Main.$fGenericPlaylist_$cto -}
261e99bff73ad820977b6332d53528b9
  $fGenericPlaylist_$cfrom ::
    Main.Playlist -> GHC.Generics.Rep Main.Playlist x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: Main.Playlist ->
                 case ds of wild { Main.Playlist g1 g2 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         Main.S1_0_0Playlist
                         (GHC.Generics.K1 GHC.Generics.R [Main.Song]))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         Main.S1_0_1Playlist
                         (GHC.Generics.K1 GHC.Generics.R [Main.User]))
                    @ x
                    g1
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <[Main.Song]>_R <x>_P))
                         (Sym (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <Main.S1_0_0Playlist>_P
                                   <GHC.Generics.K1 GHC.Generics.R [Main.Song]>_R) <x>_N))
                    g2
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <[Main.User]>_R <x>_P))
                         (Sym (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <Main.S1_0_1Playlist>_P
                                   <GHC.Generics.K1 GHC.Generics.R [Main.User]>_R) <x>_N)))
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.NTCo:M1[0]
                                <GHC.Generics.C>_P
                                <Main.C1_0Playlist>_P
                                <GHC.Generics.M1
                                   GHC.Generics.S
                                   Main.S1_0_0Playlist
                                   (GHC.Generics.K1 GHC.Generics.R [Main.Song])
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    Main.S1_0_1Playlist
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R [Main.User])>_R))
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <Main.D1Playlist>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        Main.C1_0Playlist
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           Main.S1_0_0Playlist
                                           (GHC.Generics.K1 GHC.Generics.R [Main.Song])
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            Main.S1_0_1Playlist
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R [Main.User]))>_R))
                           (Sub (Sym (Main.Rep_Playlist[0])))) <x>_N) }) -}
261e99bff73ad820977b6332d53528b9
  $fGenericPlaylist_$cto ::
    GHC.Generics.Rep Main.Playlist x -> Main.Playlist
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GHC.Generics.Rep Main.Playlist x ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Main.Rep_Playlist[0]))
                           (Trans
                                (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <Main.D1Playlist>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        Main.C1_0Playlist
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           Main.S1_0_0Playlist
                                           (GHC.Generics.K1 GHC.Generics.R [Main.Song])
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            Main.S1_0_1Playlist
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R [Main.User]))>_R)
                                (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.C>_P
                                     <Main.C1_0Playlist>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        Main.S1_0_0Playlist
                                        (GHC.Generics.K1 GHC.Generics.R [Main.Song])
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         Main.S1_0_1Playlist
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            [Main.User])>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Main.$WPlaylist
                   ds1
                     `cast`
                   (Trans
                        (GHC.Generics.NTCo:M1[0]
                             <GHC.Generics.S>_P
                             <Main.S1_0_0Playlist>_P
                             <GHC.Generics.K1 GHC.Generics.R [Main.Song]>_R <x>_N)
                        (GHC.Generics.NTCo:K1[0] <GHC.Generics.R>_P <[Main.Song]>_R <x>_P))
                   ds2
                     `cast`
                   (Trans
                        (GHC.Generics.NTCo:M1[0]
                             <GHC.Generics.S>_P
                             <Main.S1_0_1Playlist>_P
                             <GHC.Generics.K1 GHC.Generics.R [Main.User]>_R <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <[Main.User]>_R <x>_P)) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fGenericSong :: GHC.Generics.Generic Main.Song
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Song Main.$fGenericSong_$cfrom Main.$fGenericSong_$cto -}
49814fff28b1b1012fadefc14273c7cd
  $fGenericSong_$cfrom :: Main.Song -> GHC.Generics.Rep Main.Song x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: Main.Song ->
                 case ds of wild { Main.Song g1 g2 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         Main.S1_0_0Song
                         (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         Main.S1_0_1Song
                         (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                    @ x
                    g1
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                         (Sym (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <Main.S1_0_0Song>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R) <x>_N))
                    g2
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.NTCo:K1[0]
                                   <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                         (Sym (GHC.Generics.NTCo:M1[0]
                                   <GHC.Generics.S>_P
                                   <Main.S1_0_1Song>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R) <x>_N)))
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.NTCo:M1[0]
                                <GHC.Generics.C>_P
                                <Main.C1_0Song>_P
                                <GHC.Generics.M1
                                   GHC.Generics.S
                                   Main.S1_0_0Song
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    Main.S1_0_1Song
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Base.String)>_R))
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <Main.D1Song>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        Main.C1_0Song
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           Main.S1_0_0Song
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            Main.S1_0_1Song
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Base.String))>_R))
                           (Sub (Sym (Main.Rep_Song[0])))) <x>_N) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fGenericSong_$cto :: GHC.Generics.Rep Main.Song x -> Main.Song
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: GHC.Generics.Rep Main.Song x ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Main.Rep_Song[0]))
                           (Trans
                                (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.D>_P
                                     <Main.D1Song>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        Main.C1_0Song
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           Main.S1_0_0Song
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            Main.S1_0_1Song
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Base.String))>_R)
                                (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.C>_P
                                     <Main.C1_0Song>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        Main.S1_0_0Song
                                        (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         Main.S1_0_1Song
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Base.String)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Main.$WSong
                   ds1
                     `cast`
                   (Trans
                        (GHC.Generics.NTCo:M1[0]
                             <GHC.Generics.S>_P
                             <Main.S1_0_0Song>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                   ds2
                     `cast`
                   (Trans
                        (GHC.Generics.NTCo:M1[0]
                             <GHC.Generics.S>_P
                             <Main.S1_0_1Song>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P)) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fGenericUser :: GHC.Generics.Generic Main.User
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User Main.$fGenericUser_$cfrom Main.$fGenericUser_$cto -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fGenericUser_$cfrom :: Main.User -> GHC.Generics.Rep Main.User x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x ds :: Main.User ->
                 case ds of wild { Main.User g1 ->
                 g1
                   `cast`
                 (Trans
                      (Sym (GHC.Generics.NTCo:K1[0]
                                <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                      (Trans
                           (Sym (GHC.Generics.NTCo:M1[0]
                                     <GHC.Generics.S>_P
                                     <Main.S1_0_0User>_P
                                     <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R))
                           (Trans
                                (Sym (GHC.Generics.NTCo:M1[0]
                                          <GHC.Generics.C>_P
                                          <Main.C1_0User>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             Main.S1_0_0User
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_R))
                                (Trans
                                     (Sym (GHC.Generics.NTCo:M1[0]
                                               <GHC.Generics.D>_P
                                               <Main.D1User>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.C
                                                  Main.C1_0User
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     Main.S1_0_0User
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R GHC.Base.String))>_R))
                                     (Sub (Sym (Main.Rep_User[0]))))) <x>_N)) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fGenericUser_$cto :: GHC.Generics.Rep Main.User x -> Main.User
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ x ds :: GHC.Generics.Rep Main.User x ->
                 Main.$WUser
                   ds
                     `cast`
                   (Trans
                        (Trans
                             (Sub (Main.Rep_User[0]))
                             (Trans
                                  (GHC.Generics.NTCo:M1[0]
                                       <GHC.Generics.D>_P
                                       <Main.D1User>_P
                                       <GHC.Generics.M1
                                          GHC.Generics.C
                                          Main.C1_0User
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             Main.S1_0_0User
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))>_R)
                                  (Trans
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.C>_P
                                            <Main.C1_0User>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.S
                                               Main.S1_0_0User
                                               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)>_R)
                                       (GHC.Generics.NTCo:M1[0]
                                            <GHC.Generics.S>_P
                                            <Main.S1_0_0User>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R GHC.Base.String>_R))) <x>_N)
                        (GHC.Generics.NTCo:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))) -}
49814fff28b1b1012fadefc14273c7cd
  $fOrdKey ::
    GHC.Classes.Ord
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fEqKey
                  Main.$fOrdKey_$ccompare
                  Main.$fOrdKey_$c<
                  Main.$fOrdKey_$c<=
                  Main.$fOrdKey_$c>
                  Main.$fOrdKey_$c>=
                  Main.$fOrdKey_$cmax
                  Main.$fOrdKey_$cmin -}
261e99bff73ad820977b6332d53528b9
  $fOrdKey0 ::
    GHC.Classes.Ord
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fEqKey0
                  Main.$fOrdKey0_$ccompare
                  Main.$fOrdKey0_$c<
                  Main.$fOrdKey0_$c<=
                  Main.$fOrdKey0_$c>
                  Main.$fOrdKey0_$c>=
                  Main.$fOrdKey0_$cmax
                  Main.$fOrdKey0_$cmin -}
261e99bff73ad820977b6332d53528b9
  $fOrdKey0_$c< ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
261e99bff73ad820977b6332d53528b9
  $fOrdKey0_$c<= ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
261e99bff73ad820977b6332d53528b9
  $fOrdKey0_$c> ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
261e99bff73ad820977b6332d53528b9
  $fOrdKey0_$c>= ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
261e99bff73ad820977b6332d53528b9
  $fOrdKey0_$ccompare ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$ccompare
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <GHC.Types.Ordering>_R) -}
261e99bff73ad820977b6332d53528b9
  $fOrdKey0_$cmax ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmax
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))) -}
261e99bff73ad820977b6332d53528b9
  $fOrdKey0_$cmin ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmin
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fOrdKey1 ::
    GHC.Classes.Ord
      (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fEqKey1
                  Main.$fOrdKey1_$ccompare
                  Main.$fOrdKey1_$c<
                  Main.$fOrdKey1_$c<=
                  Main.$fOrdKey1_$c>
                  Main.$fOrdKey1_$c>=
                  Main.$fOrdKey1_$cmax
                  Main.$fOrdKey1_$cmin -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fOrdKey1_$c< ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fOrdKey1_$c<= ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fOrdKey1_$c> ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fOrdKey1_$c>= ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fOrdKey1_$ccompare ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$ccompare
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <GHC.Types.Ordering>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fOrdKey1_$cmax ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmax
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fOrdKey1_$cmin ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmin
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeyUser[0]))
                                    (Sub (Sym (Main.TFCo:R:KeyUser[0])))))) -}
49814fff28b1b1012fadefc14273c7cd
  $fOrdKey_$c< ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fOrdKey_$c<= ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c<=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fOrdKey_$c> ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fOrdKey_$c>= ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$c>=
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <GHC.Types.Bool>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fOrdKey_$ccompare ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$ccompare
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <GHC.Types.Ordering>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fOrdKey_$cmax ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmax
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))) -}
49814fff28b1b1012fadefc14273c7cd
  $fOrdKey_$cmin ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                GHC.Int.$fOrdInt64_$cmin
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R Trans
                          (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                          (Trans
                               (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                               (Trans
                                    (Sym (Main.NTCo:R:KeySong[0]))
                                    (Sub (Sym (Main.TFCo:R:KeySong[0])))))) -}
49814fff28b1b1012fadefc14273c7cd
  $fPathPieceKey ::
    Web.PathPieces.PathPiece
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fPathPieceKey_$cfromPathPiece
                  Main.$fPathPieceKey_$ctoPathPiece -}
261e99bff73ad820977b6332d53528b9
  $fPathPieceKey0 ::
    Web.PathPieces.PathPiece
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fPathPieceKey0_$cfromPathPiece
                  Main.$fPathPieceKey0_$ctoPathPiece -}
261e99bff73ad820977b6332d53528b9
  $fPathPieceKey0_$cfromPathPiece ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe
         (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$sparseIntegral
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (GHC.Base.Maybe
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))))_R) -}
261e99bff73ad820977b6332d53528b9
  $fPathPieceKey0_$ctoPathPiece ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$ctoPathPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPathPieceKey1 ::
    Web.PathPieces.PathPiece
      (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fPathPieceKey1_$cfromPathPiece
                  Main.$fPathPieceKey1_$ctoPathPiece -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPathPieceKey1_$cfromPathPiece ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$sparseIntegral
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (GHC.Base.Maybe
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUser[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUser[0])))))))_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPathPieceKey1_$ctoPathPiece ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$ctoPathPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fPathPieceKey_$cfromPathPiece ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe
         (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$sparseIntegral
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (GHC.Base.Maybe
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeySong[0]))
                                        (Sub (Sym (Main.TFCo:R:KeySong[0])))))))_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fPathPieceKey_$ctoPathPiece ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.PathPieces.$fPathPieceInt64_$ctoPathPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist ::
    Database.Persist.Class.PersistEntity.PersistEntity Main.Playlist
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Playlist
                  Main.$fPersistFieldKey0
                  Main.$fPersistEntityPlaylist_$ctoJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.Playlist>_N))
                  Main.$fPersistEntityPlaylist_$cparseJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.Playlist>_N))
                  Main.$fShowKey0
                  Main.$fReadKey0
                  Main.$fEqKey0
                  Main.$fOrdKey0
                  Main.$fPersistEntityPlaylist_$ckeyToValues
                  Main.$fPersistEntityPlaylist_$ckeyFromValues
                  Main.$fPersistEntityPlaylist_$s$WPlaylistId
                  Main.$fPersistEntityPlaylist_$centityDef
                  Main.$fPersistEntityPlaylist_$cpersistFieldDef
                  Main.$fPersistEntityPlaylist_$ctoPersistFields
                  Main.$fPersistEntityPlaylist_$cfromPersistValues
                  Main.$fPersistEntityPlaylist_$cpersistUniqueKeys
                  Main.$fPersistEntityPlaylist_$cpersistUniqueToFieldNames
                  Main.$fPersistEntityPlaylist_$cpersistUniqueToValues
                  Main.$fPersistEntityPlaylist_$cfieldLens -}
7541623b282071c07d7de59b87a7d0bb
  $fPersistEntityPlaylist1 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "collaborators"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityPlaylist7
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Main.$fPersistEntityPlaylist2 }) -}
9a9efc6330c9f94ccae63a42c39fe6f9
  $fPersistEntityPlaylist10 ::
    Database.Persist.Types.Base.ReferenceDef
  {- Unfolding: (Database.Persist.Types.Base.EmbedRef
                   Main.$fPersistEntityPlaylist11) -}
5e8df34087d43746d633629ede8b9e4d
  $fPersistEntityPlaylist11 ::
    Database.Persist.Types.Base.EmbedEntityDef
  {- Unfolding: (case Main.$fPersistEntitySong14 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.EmbedEntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   Main.$fPersistEntityPlaylist12 }) -}
8d350257ea8d3d1816ef90277f0c61f8
  $fPersistEntityPlaylist12 ::
    [Database.Persist.Types.Base.EmbedFieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EmbedFieldDef
                   Main.$fPersistEntityPlaylist15
                   Main.$fPersistEntityPlaylist13) -}
55b027972cff4c8fe74388a13252643a
  $fPersistEntityPlaylist13 ::
    [Database.Persist.Types.Base.EmbedFieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EmbedFieldDef
                   Main.$fPersistEntityPlaylist14
                   (GHC.Types.[] @ Database.Persist.Types.Base.EmbedFieldDef)) -}
5c069273b376256f2797df2b5fc2b997
  $fPersistEntityPlaylist14 ::
    Database.Persist.Types.Base.EmbedFieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "url"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.EmbedFieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.EmbedEntityDef)
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.HaskellName) }) -}
15625e07ca2038a05e5894b23bf5a947
  $fPersistEntityPlaylist15 ::
    Database.Persist.Types.Base.EmbedFieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "name"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.EmbedFieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.EmbedEntityDef)
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.HaskellName) }) -}
3d7ab680b1a28b3a5fb991ecd04a52be
  $fPersistEntityPlaylist16 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTList
                   Main.$fPersistEntityPlaylist17) -}
d993f7c512778181d6cc8c9da72f9fa7
  $fPersistEntityPlaylist17 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntitySong14) -}
e49a17e8415e051764312008effbca82
  $fPersistEntityPlaylist18 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Id"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Playlist"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityPlaylist19
                   Database.Persist.Types.Base.SqlInt64
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   (Database.Persist.Types.Base.ForeignRef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      Main.$fPersistEntitySong8) } } }) -}
5424c055229839e074790b3ce19c4162
  $fPersistEntityPlaylist19 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityPlaylist20) -}
2a16ec849c8471f7c540dfd044d217b8
  $fPersistEntityPlaylist2 ::
    Database.Persist.Types.Base.ReferenceDef
  {- Unfolding: (Database.Persist.Types.Base.EmbedRef
                   Main.$fPersistEntityPlaylist3) -}
a50ea30293bc3605543691c7aa6187b2
  $fPersistEntityPlaylist20 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "PlaylistId"#) -}
9936051715f14814eb5f6d2e02f7adbb
  $fPersistEntityPlaylist21 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Playlist"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "playlist"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Database.Persist.Class.PersistField.$fPersistFieldMap_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntityPlaylist19
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntitySong8))
                   Main.$fPersistEntitySong32
                   Main.$fPersistEntityPlaylist22
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntitySong16
                   dt
                   GHC.Types.False } } } } }) -}
3faeaba20af1d8b01846dee9f7b5c8a7
  $fPersistEntityPlaylist22 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityPlaylist25
                   Main.$fPersistEntityPlaylist23) -}
013b38a2d59230cbd25af0729236e091
  $fPersistEntityPlaylist23 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityPlaylist24
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
b0faec07919eb3cb174d57e417950e17
  $fPersistEntityPlaylist24 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fFromJSONEntity10 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityPlaylist7
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Main.$fPersistEntityPlaylist2 }) -}
e1552e899b60d411b23dec70dbfdb5ec
  $fPersistEntityPlaylist25 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fFromJSONEntity15 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityPlaylist16
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Main.$fPersistEntityPlaylist26 }) -}
951d6ca4cc3f44f4038ca020a67139d3
  $fPersistEntityPlaylist26 ::
    Database.Persist.Types.Base.ReferenceDef
  {- Unfolding: (Database.Persist.Types.Base.EmbedRef
                   Main.$fPersistEntityPlaylist27) -}
f82850d4a4ffc8d355c28d6a6cafc34f
  $fPersistEntityPlaylist27 ::
    Database.Persist.Types.Base.EmbedEntityDef
  {- Unfolding: (case Main.$fPersistEntitySong14 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.EmbedEntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   Main.$fPersistEntityPlaylist28 }) -}
085ec4b78815ba038d52e4c9602cf608
  $fPersistEntityPlaylist28 ::
    [Database.Persist.Types.Base.EmbedFieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EmbedFieldDef
                   Main.$fPersistEntityPlaylist31
                   Main.$fPersistEntityPlaylist29) -}
1c3062456e8a8ebd4cf66bc7ad78b5aa
  $fPersistEntityPlaylist29 ::
    [Database.Persist.Types.Base.EmbedFieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EmbedFieldDef
                   Main.$fPersistEntityPlaylist30
                   (GHC.Types.[] @ Database.Persist.Types.Base.EmbedFieldDef)) -}
241783b60d9408eb3be9f2532833e6aa
  $fPersistEntityPlaylist3 ::
    Database.Persist.Types.Base.EmbedEntityDef
  {- Unfolding: (case Main.$fPersistEntityPlaylist6 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.EmbedEntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   Main.$fPersistEntityPlaylist4 }) -}
56ab8fd1d6290e750b9ecc333745cb70
  $fPersistEntityPlaylist30 ::
    Database.Persist.Types.Base.EmbedFieldDef
  {- Unfolding: (case Main.$fPersistEntitySong29 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.EmbedFieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.EmbedEntityDef)
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.HaskellName) }) -}
85bf276f270d665db7da6ea2da7a79be
  $fPersistEntityPlaylist31 ::
    Database.Persist.Types.Base.EmbedFieldDef
  {- Unfolding: (case Main.$fPersistEntitySong31 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.EmbedFieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.EmbedEntityDef)
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.HaskellName) }) -}
6c914213e5d39dc6afe8ff2db84a2bed
  $fPersistEntityPlaylist4 ::
    [Database.Persist.Types.Base.EmbedFieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EmbedFieldDef
                   Main.$fPersistEntityPlaylist5
                   (GHC.Types.[] @ Database.Persist.Types.Base.EmbedFieldDef)) -}
c3578a4fb3137cb52924e4d1682e18b9
  $fPersistEntityPlaylist5 ::
    Database.Persist.Types.Base.EmbedFieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "sound_cloud_id"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.EmbedFieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.EmbedEntityDef)
                   (GHC.Base.Nothing @ Database.Persist.Types.Base.HaskellName) }) -}
43cc0a829738a23d79eeef0e0715bf90
  $fPersistEntityPlaylist6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "User"#) -}
0210c4cef61c347163890ca040d6737e
  $fPersistEntityPlaylist7 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTList
                   Main.$fPersistEntityPlaylist8) -}
49552f7965b893ca2af5b1521c00d45d
  $fPersistEntityPlaylist8 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityPlaylist6) -}
49b80253fdcdbce41bcbf13e2bd0707a
  $fPersistEntityPlaylist9 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "songs"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityPlaylist16
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Main.$fPersistEntityPlaylist10 }) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$centityDef ::
    GHC.Base.Monad m =>
    m Main.Playlist -> Database.Persist.Types.Base.EntityDef
  {- Arity: 2, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   ds :: m Main.Playlist ->
                 Main.$fPersistEntityPlaylist21) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$cfieldLens ::
    Database.Persist.Class.PersistEntity.EntityField
      Main.Playlist field
    -> forall (f :: * -> *).
       GHC.Base.Functor f =>
       (field -> f field)
       -> Database.Persist.Class.PersistEntity.Entity Main.Playlist
       -> f (Database.Persist.Class.PersistEntity.Entity Main.Playlist)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ field
                   dk :: Database.Persist.Class.PersistEntity.EntityField
                           Main.Playlist field
                   @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   eta :: field -> f field
                   eta1 :: Database.Persist.Class.PersistEntity.Entity
                             Main.Playlist ->
                 case dk
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldPlaylisttyp[0]) <field>_N) of wild {
                   Main.PlaylistId dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Playlist)
                        (\ key :: field ->
                         case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Playlist
                           $dPersistEntity
                           key `cast` (Sub dt)
                           value })
                        (eta
                           (case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                            ds1 `cast` (Sub (Sym dt)) }))
                   Main.PlaylistSongs dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Playlist)
                        (\ x :: field ->
                         case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Playlist
                           $dPersistEntity
                           key
                           (case value of wild2 { Main.Playlist ds ds1 ->
                            case x `cast` (Sub dt) of dt1 { DEFAULT ->
                            Main.Playlist dt1 ds1 } }) })
                        (eta
                           (case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                            case ds2 of wild2 { Main.Playlist ds ds4 ->
                            ds `cast` (Sub (Sym dt)) } }))
                   Main.PlaylistCollaborators dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Playlist)
                        (\ x :: field ->
                         case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Playlist
                           $dPersistEntity
                           key
                           (case value of wild2 { Main.Playlist ds ds1 ->
                            case x `cast` (Sub dt) of dt1 { DEFAULT ->
                            Main.Playlist ds dt1 } }) })
                        (eta
                           (case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                            case ds2 of wild2 { Main.Playlist ds ds4 ->
                            ds4 `cast` (Sub (Sym dt)) } })) }) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$cfromPersistValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either Data.Text.Internal.Text Main.Playlist
  {- Arity: 1, Strictness: <S,U> -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$ckeyFromValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [Database.Persist.Types.Base.PersistValue] ->
                 case (Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                         (Database.Persist.TH.headNote x))
                        `cast`
                      (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))))_R of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                        y `cast`
                        (Trans
                             (Sym (Main.NTCo:R:KeyPlaylist[0]))
                             (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))) }) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$ckeyToValues ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Persist.Class.PersistEntity.Key Main.Playlist ->
                 GHC.Types.:
                   @ Database.Persist.Types.Base.PersistValue
                   (Database.Persist.Types.Base.PersistInt64
                      x `cast`
                      (Trans
                           (Sub (Main.TFCo:R:KeyPlaylist[0]))
                           (Trans
                                (Main.NTCo:R:KeyPlaylist[0])
                                (Trans
                                     (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                     (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))))
                   (GHC.Types.[] @ Database.Persist.Types.Base.PersistValue)) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                  `cast`
                (<Data.Aeson.Types.Internal.Value>_R
                 ->_R (Data.Aeson.Types.Internal.Parser
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))))_R) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$cpersistFieldDef ::
    Database.Persist.Class.PersistEntity.EntityField Main.Playlist typ
    -> Database.Persist.Types.Base.FieldDef
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ typ
                   ds :: Database.Persist.Class.PersistEntity.EntityField
                           Main.Playlist typ ->
                 case ds
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldPlaylisttyp[0]) <typ>_N) of wild {
                   Main.PlaylistId dt -> Main.$fPersistEntityPlaylist18
                   Main.PlaylistSongs dt -> Main.$fPersistEntityPlaylist9
                   Main.PlaylistCollaborators dt
                   -> Main.$fPersistEntityPlaylist1 }) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$cpersistUniqueKeys ::
    Main.Playlist
    -> [Database.Persist.Class.PersistEntity.Unique Main.Playlist]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Playlist ->
                 case ds of wild { Main.Playlist _songs _collaborators ->
                 GHC.Types.[]
                   @ (Database.Persist.Class.PersistEntity.Unique Main.Playlist) }) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$cpersistUniqueToFieldNames ::
    Database.Persist.Class.PersistEntity.Unique Main.Playlist
    -> [(Database.Persist.Types.Base.HaskellName,
         Database.Persist.Types.Base.DBName)]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Unique
                           Main.Playlist ->
                 Main.$fPersistEntitySong2) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$cpersistUniqueToValues ::
    Database.Persist.Class.PersistEntity.Unique Main.Playlist
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Unique
                           Main.Playlist ->
                 Main.$fPersistEntitySong1) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fToJSONInt64_$ctoJSON
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <Data.Aeson.Types.Internal.Value>_R) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$ctoPersistFields ::
    Main.Playlist
    -> [Database.Persist.Class.PersistField.SomePersistField]
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Playlist ->
                 case ds of wild { Main.Playlist x x1 ->
                 GHC.Types.:
                   @ Database.Persist.Class.PersistField.SomePersistField
                   (Database.Persist.Class.PersistField.SomePersistField
                      @ [Main.Song]
                      Main.$fPersistEntityPlaylist_$s$fPersistField[]1
                      x)
                   (GHC.Types.:
                      @ Database.Persist.Class.PersistField.SomePersistField
                      (Database.Persist.Class.PersistField.SomePersistField
                         @ [Main.User]
                         Main.$fPersistEntityPlaylist_$s$fPersistField[]
                         x1)
                      (GHC.Types.[]
                         @ Database.Persist.Class.PersistField.SomePersistField)) }) -}
261e99bff73ad820977b6332d53528b9
  $fPersistEntityPlaylist_$s$WPlaylistId ::
    Database.Persist.Class.PersistEntity.EntityField
      Main.Playlist
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Inline: INLINE,
     Unfolding: InlineRule (0, False, False)
                (Main.PlaylistId
                   @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                   @~ <Database.Persist.Class.PersistEntity.Key Main.Playlist>_N)
                  `cast`
                (Sub (Sym (Main.TFCo:R:EntityFieldPlaylisttyp[0])) <Database.Persist.Class.PersistEntity.Key
                                                                      Main.Playlist>_N) -}
17a55b3067c0d5ab5e7f9d868ae68dd1
  $fPersistEntityPlaylist_$s$fPersistField[] ::
    Database.Persist.Class.PersistField.PersistField [Main.User]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Main.User]
                  Main.$fPersistEntityPlaylist_$s$fPersistField[]_$ctoPersistValue
                  (Database.Persist.Class.PersistField.$fPersistFieldIntMap_$cfromPersistValue1
                     @ Main.User
                     Main.$fPersistFieldUser) -}
809282b7fd30b7cf521c7f33e24f3788
  $fPersistEntityPlaylist_$s$fPersistField[]1 ::
    Database.Persist.Class.PersistField.PersistField [Main.Song]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Main.Song]
                  Main.$fPersistEntityPlaylist_$s$fPersistField[]_$ctoPersistValue1
                  (Database.Persist.Class.PersistField.$fPersistFieldIntMap_$cfromPersistValue1
                     @ Main.Song
                     Main.$fPersistFieldSong) -}
2d4dc93eb327c1434f012b1d32048a8c
  $fPersistEntityPlaylist_$s$fPersistField[]_$ctoPersistValue ::
    [Main.User] -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, Strictness: <L,1*U>m11,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: [Main.User] ->
                 Database.Persist.Types.Base.PersistList
                   (GHC.Base.build
                      @ Database.Persist.Types.Base.PersistValue
                      (\ @ b1
                         c :: Database.Persist.Types.Base.PersistValue -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ Main.User
                         @ b1
                         (GHC.Base.mapFB
                            @ Database.Persist.Types.Base.PersistValue
                            @ b1
                            @ Main.User
                            c
                            Main.$fPersistFieldUser_$ctoPersistValue)
                         n
                         eta))) -}
b2ce39fe8b8808f4fdc42b8fbe957dd2
  $fPersistEntityPlaylist_$s$fPersistField[]_$ctoPersistValue1 ::
    [Main.Song] -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, Strictness: <L,1*U>m11,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: [Main.Song] ->
                 Database.Persist.Types.Base.PersistList
                   (GHC.Base.build
                      @ Database.Persist.Types.Base.PersistValue
                      (\ @ b1
                         c :: Database.Persist.Types.Base.PersistValue -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ Main.Song
                         @ b1
                         (GHC.Base.mapFB
                            @ Database.Persist.Types.Base.PersistValue
                            @ b1
                            @ Main.Song
                            c
                            Main.$fPersistFieldSong_$ctoPersistValue)
                         n
                         eta))) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong ::
    Database.Persist.Class.PersistEntity.PersistEntity Main.Song
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Song
                  Main.$fPersistFieldKey
                  Main.$fPersistEntitySong_$ctoJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.Song>_N))
                  Main.$fPersistEntitySong_$cparseJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.Song>_N))
                  Main.$fShowKey
                  Main.$fReadKey
                  Main.$fEqKey
                  Main.$fOrdKey
                  Main.$fPersistEntitySong_$ckeyToValues
                  Main.$fPersistEntitySong_$ckeyFromValues
                  Main.$fPersistEntitySong_$s$WSongId
                  Main.$fPersistEntitySong_$centityDef
                  Main.$fPersistEntitySong_$cpersistFieldDef
                  Main.$fPersistEntitySong_$ctoPersistFields
                  Main.$fPersistEntitySong_$cfromPersistValues
                  Main.$fPersistEntitySong_$cpersistUniqueKeys
                  Main.$fPersistEntitySong_$cpersistUniqueToFieldNames
                  Main.$fPersistEntitySong_$cpersistUniqueToValues
                  Main.$fPersistEntitySong_$cfieldLens -}
19a93ed012ac6dbf349fde6c082fc059
  $fPersistEntitySong1 :: [Database.Persist.Types.Base.PersistValue]
  {- Strictness: b -}
862d8b498699d804bd709fe7cb59ace6
  $fPersistEntitySong10 :: GHC.Base.Maybe Data.Text.Internal.Text
  {- Unfolding: (GHC.Base.Just
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntitySong11) -}
b3db1591146b9ac68a117833125aa59b
  $fPersistEntitySong11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Data.Int"#) -}
8e22857ea77c5e61beee7a770b6e8be5
  $fPersistEntitySong12 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntitySong13) -}
2f0d5ff3714ef8b9866187f0a84a5826
  $fPersistEntitySong13 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "SongId"#) -}
db5d99393207a73b10c037da04da61f6
  $fPersistEntitySong14 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Song"#) -}
017a18dece25dabea1e7cf8235472b14
  $fPersistEntitySong15 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Main.$fPersistEntitySong14 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "song"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Database.Persist.Class.PersistField.$fPersistFieldMap_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntitySong12
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntitySong8))
                   Main.$fPersistEntitySong32
                   Main.$fPersistEntitySong26
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntitySong16
                   dt
                   GHC.Types.False } } } } }) -}
bb8928ed8a42eb7badcf15b67b4a384b
  $fPersistEntitySong16 :: [Data.Text.Internal.Text]
  {- Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntitySong25
                   Main.$fPersistEntitySong17) -}
b1684ae7de3814b81aaa93224bfe72e7
  $fPersistEntitySong17 :: [Data.Text.Internal.Text]
  {- Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntitySong24
                   Main.$fPersistEntitySong18) -}
771903d9a2e47f688f5ece22ef8ebd43
  $fPersistEntitySong18 :: [Data.Text.Internal.Text]
  {- Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntitySong23
                   Main.$fPersistEntitySong19) -}
c5ac5bdbfbb6fec56a9ed0cc25cca777
  $fPersistEntitySong19 :: [Data.Text.Internal.Text]
  {- Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntitySong22
                   Main.$fPersistEntitySong20) -}
3349b391324b5836f54ae2be8318204d
  $fPersistEntitySong2 ::
    [(Database.Persist.Types.Base.HaskellName,
      Database.Persist.Types.Base.DBName)]
  {- Strictness: b -}
3d38a55d0b603a87de5a623fa80effc2
  $fPersistEntitySong20 :: [Data.Text.Internal.Text]
  {- Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fPersistEntitySong21
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
7542bdbbb78ce47d808fba6a699d438d
  $fPersistEntitySong21 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Typeable"#) -}
9c4372343354663b2c10da786dd14532
  $fPersistEntitySong22 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Data"#) -}
9d97fd446d3b55db87240158a97725db
  $fPersistEntitySong23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Eq"#) -}
f495b78b790c4f3d456947403d2b6dce
  $fPersistEntitySong24 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Show"#) -}
1d44637d5a07b07c5f773289ea5d098c
  $fPersistEntitySong25 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Generic"#) -}
457907d72116b49815a8925b5f1c4531
  $fPersistEntitySong26 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntitySong30
                   Main.$fPersistEntitySong27) -}
ae85a4ff4b65336289c8e5104b90500e
  $fPersistEntitySong27 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntitySong28
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
945e8b0e2197156ad3a526c609fb9491
  $fPersistEntitySong28 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntitySong29 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntitySong4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
b7bbe909b9f8026cd1a9a99cb74d8ec3
  $fPersistEntitySong29 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "url"#) -}
47f4d51afffbde8e2784702de4c8575a
  $fPersistEntitySong3 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "url"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntitySong4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
63b858e1056f75ff5f57075a79cabcc5
  $fPersistEntitySong30 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fPersistEntitySong31 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntitySong4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
0bad20ef2667f9f58a616a651b00d98c
  $fPersistEntitySong31 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "name"#) -}
3e19cfcd3fba6b9014b99ede7633f70a
  $fPersistEntitySong32 :: [Database.Persist.Types.Base.Attr]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.Attr
                   Main.$fPersistEntitySong33
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)) -}
1c691f108c5a6bb09ee72f6abb39e8c4
  $fPersistEntitySong33 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "json"#) -}
ab3239eaf9b949e25f76fc7ddb736f11
  $fPersistEntitySong4 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntitySong5) -}
0387b28074f41dd98a84c141097fb833
  $fPersistEntitySong5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "String"#) -}
45ca6aa2c6383430db5190eb5f3308d0
  $fPersistEntitySong6 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "name"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntitySong4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference }) -}
65d90190b8c5f2f59f16f04a6c7f99a6
  $fPersistEntitySong7 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Id"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Main.$fPersistEntitySong14 of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntitySong12
                   Database.Persist.Types.Base.SqlInt64
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   (Database.Persist.Types.Base.ForeignRef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      Main.$fPersistEntitySong8) } } }) -}
b661cf7e1db312bfd482516b96d6e3b4
  $fPersistEntitySong8 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   Main.$fPersistEntitySong10
                   Main.$fPersistEntitySong9) -}
8c39cbb2903980c1c63b9b1521a58925
  $fPersistEntitySong9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "Int64"#) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$centityDef ::
    GHC.Base.Monad m =>
    m Main.Song -> Database.Persist.Types.Base.EntityDef
  {- Arity: 2, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (m :: * -> *) $dMonad :: GHC.Base.Monad m ds :: m Main.Song ->
                 Main.$fPersistEntitySong15) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$cfieldLens ::
    Database.Persist.Class.PersistEntity.EntityField Main.Song field
    -> forall (f :: * -> *).
       GHC.Base.Functor f =>
       (field -> f field)
       -> Database.Persist.Class.PersistEntity.Entity Main.Song
       -> f (Database.Persist.Class.PersistEntity.Entity Main.Song)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ field
                   dk :: Database.Persist.Class.PersistEntity.EntityField
                           Main.Song field
                   @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   eta :: field -> f field
                   eta1 :: Database.Persist.Class.PersistEntity.Entity Main.Song ->
                 case dk
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldSongtyp[0]) <field>_N) of wild {
                   Main.SongId dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Song)
                        (\ key :: field ->
                         case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Song
                           $dPersistEntity
                           key `cast` (Sub dt)
                           value })
                        (eta
                           (case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                            ds1 `cast` (Sub (Sym dt)) }))
                   Main.SongName dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Song)
                        (\ x :: field ->
                         case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Song
                           $dPersistEntity
                           key
                           (case value of wild2 { Main.Song ds ds1 ->
                            case x `cast` (Sub dt) of dt1 { DEFAULT ->
                            Main.Song dt1 ds1 } }) })
                        (eta
                           (case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                            case ds2 of wild2 { Main.Song ds ds4 ->
                            ds `cast` (Sub (Sym dt)) } }))
                   Main.SongUrl dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.Song)
                        (\ x :: field ->
                         case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.Song
                           $dPersistEntity
                           key
                           (case value of wild2 { Main.Song ds ds1 ->
                            case x `cast` (Sub dt) of dt1 { DEFAULT -> Main.Song ds dt1 } }) })
                        (eta
                           (case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                            case ds2 of wild2 { Main.Song ds ds4 ->
                            ds4 `cast` (Sub (Sym dt)) } })) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$cfromPersistValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either Data.Text.Internal.Text Main.Song
  {- Arity: 1, Strictness: <S,U> -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$ckeyFromValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [Database.Persist.Types.Base.PersistValue] ->
                 case (Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                         (Database.Persist.TH.headNote x))
                        `cast`
                      (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))))_R of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                        y `cast`
                        (Trans
                             (Sym (Main.NTCo:R:KeySong[0]))
                             (Sub (Sym (Main.TFCo:R:KeySong[0])))) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$ckeyToValues ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Persist.Class.PersistEntity.Key Main.Song ->
                 GHC.Types.:
                   @ Database.Persist.Types.Base.PersistValue
                   (Database.Persist.Types.Base.PersistInt64
                      x `cast`
                      (Trans
                           (Sub (Main.TFCo:R:KeySong[0]))
                           (Trans
                                (Main.NTCo:R:KeySong[0])
                                (Trans
                                     (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                     (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))))
                   (GHC.Types.[] @ Database.Persist.Types.Base.PersistValue)) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                  `cast`
                (<Data.Aeson.Types.Internal.Value>_R
                 ->_R (Data.Aeson.Types.Internal.Parser
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeySong[0]))
                                        (Sub (Sym (Main.TFCo:R:KeySong[0])))))))_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$cpersistFieldDef ::
    Database.Persist.Class.PersistEntity.EntityField Main.Song typ
    -> Database.Persist.Types.Base.FieldDef
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ typ
                   ds :: Database.Persist.Class.PersistEntity.EntityField
                           Main.Song typ ->
                 case ds
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldSongtyp[0]) <typ>_N) of wild {
                   Main.SongId dt -> Main.$fPersistEntitySong7
                   Main.SongName dt -> Main.$fPersistEntitySong6
                   Main.SongUrl dt -> Main.$fPersistEntitySong3 }) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$cpersistUniqueKeys ::
    Main.Song
    -> [Database.Persist.Class.PersistEntity.Unique Main.Song]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Song ->
                 case ds of wild { Main.Song _name _url ->
                 GHC.Types.[]
                   @ (Database.Persist.Class.PersistEntity.Unique Main.Song) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$cpersistUniqueToFieldNames ::
    Database.Persist.Class.PersistEntity.Unique Main.Song
    -> [(Database.Persist.Types.Base.HaskellName,
         Database.Persist.Types.Base.DBName)]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Unique Main.Song ->
                 Main.$fPersistEntitySong2) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$cpersistUniqueToValues ::
    Database.Persist.Class.PersistEntity.Unique Main.Song
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Unique Main.Song ->
                 Main.$fPersistEntitySong1) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fToJSONInt64_$ctoJSON
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <Data.Aeson.Types.Internal.Value>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$ctoPersistFields ::
    Main.Song -> [Database.Persist.Class.PersistField.SomePersistField]
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Song ->
                 case ds of wild { Main.Song x x1 ->
                 GHC.Types.:
                   @ Database.Persist.Class.PersistField.SomePersistField
                   (Database.Persist.Class.PersistField.SomePersistField
                      @ GHC.Base.String
                      Database.Persist.Class.PersistField.$fPersistField[]0
                      x)
                   (GHC.Types.:
                      @ Database.Persist.Class.PersistField.SomePersistField
                      (Database.Persist.Class.PersistField.SomePersistField
                         @ GHC.Base.String
                         Database.Persist.Class.PersistField.$fPersistField[]0
                         x1)
                      (GHC.Types.[]
                         @ Database.Persist.Class.PersistField.SomePersistField)) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistEntitySong_$s$WSongId ::
    Database.Persist.Class.PersistEntity.EntityField
      Main.Song (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Inline: INLINE,
     Unfolding: InlineRule (0, False, False)
                (Main.SongId
                   @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                   @~ <Database.Persist.Class.PersistEntity.Key Main.Song>_N)
                  `cast`
                (Sub (Sym (Main.TFCo:R:EntityFieldSongtyp[0])) <Database.Persist.Class.PersistEntity.Key
                                                                  Main.Song>_N) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser ::
    Database.Persist.Class.PersistEntity.PersistEntity Main.User
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User
                  Main.$fPersistFieldKey1
                  Main.$fPersistEntityUser_$ctoJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.User>_N))
                  Main.$fPersistEntityUser_$cparseJSON
                    `cast`
                  (Sym (Data.Aeson.Types.Class.NTCo:FromJSON[0]
                            <Database.Persist.Class.PersistEntity.Key Main.User>_N))
                  Main.$fShowKey1
                  Main.$fReadKey1
                  Main.$fEqKey1
                  Main.$fOrdKey1
                  Main.$fPersistEntityUser_$ckeyToValues
                  Main.$fPersistEntityUser_$ckeyFromValues
                  Main.$fPersistEntityUser_$s$WUserId
                  Main.$fPersistEntityUser_$centityDef
                  Main.$fPersistEntityUser_$cpersistFieldDef
                  Main.$fPersistEntityUser_$ctoPersistFields
                  Main.$fPersistFieldUser_$cfromPersistValues
                  Main.$fPersistEntityUser_$cpersistUniqueKeys
                  Main.$fPersistEntityUser_$cpersistUniqueToFieldNames
                  Main.$fPersistEntityUser_$cpersistUniqueToValues
                  Main.$fPersistEntityUser_$cfieldLens -}
cffe553abfd41ee1859865fed13c6bca
  $fPersistEntityUser1 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "soundCloudId"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "sound_cloud_id"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntitySong4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference } }) -}
fc3ba7bbe74d75a4eb3c7631d30e2999
  $fPersistEntityUser2 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Id"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Main.$fPersistEntityPlaylist6 of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntityUser3
                   Database.Persist.Types.Base.SqlInt64
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   (Database.Persist.Types.Base.ForeignRef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      Main.$fPersistEntitySong8) } } }) -}
5317cbeffdb78e5a26e88b2dfddf292f
  $fPersistEntityUser3 :: Database.Persist.Types.Base.FieldType
  {- Unfolding: (Database.Persist.Types.Base.FTTypeCon
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   Main.$fPersistEntityUser4) -}
3b7f2fd0dad93ec4a7d56e6568b932aa
  $fPersistEntityUser4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "UserId"#) -}
c51a2e7b25b6cfbd8c643fec736ea09a
  $fPersistEntityUser5 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Main.$fPersistEntityPlaylist6 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "user"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Database.Persist.Class.PersistField.$fPersistFieldMap_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntityUser3
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntitySong8))
                   Main.$fPersistEntitySong32
                   Main.$fPersistEntityUser6
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntitySong16
                   dt
                   GHC.Types.False } } } } }) -}
eef5060809365dde8825cb2bb703cebb
  $fPersistEntityUser6 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityUser7
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
f53afc50db31a73405a683bf469e60ac
  $fPersistEntityUser7 :: Database.Persist.Types.Base.FieldDef
  {- Unfolding: (case Main.$fFromJSONEntity7 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "sound_cloud_id"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Database.Persist.Types.Base.FieldDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   Main.$fPersistEntitySong4
                   Database.Persist.Types.Base.SqlString
                   (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                   GHC.Types.True
                   Database.Persist.Types.Base.NoReference } }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$centityDef ::
    GHC.Base.Monad m =>
    m Main.User -> Database.Persist.Types.Base.EntityDef
  {- Arity: 2, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ (m :: * -> *) $dMonad :: GHC.Base.Monad m ds :: m Main.User ->
                 Main.$fPersistEntityUser5) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$cfieldLens ::
    Database.Persist.Class.PersistEntity.EntityField Main.User field
    -> forall (f :: * -> *).
       GHC.Base.Functor f =>
       (field -> f field)
       -> Database.Persist.Class.PersistEntity.Entity Main.User
       -> f (Database.Persist.Class.PersistEntity.Entity Main.User)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ field
                   dk :: Database.Persist.Class.PersistEntity.EntityField
                           Main.User field
                   @ (f :: * -> *)
                   $dFunctor :: GHC.Base.Functor f
                   eta :: field -> f field
                   eta1 :: Database.Persist.Class.PersistEntity.Entity Main.User ->
                 case dk
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldUsertyp[0]) <field>_N) of wild {
                   Main.UserId dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.User)
                        (\ key :: field ->
                         case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.User
                           $dPersistEntity
                           key `cast` (Sub dt)
                           value })
                        (eta
                           (case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                            ds1 `cast` (Sub (Sym dt)) }))
                   Main.UserSoundCloudId dt
                   -> GHC.Base.fmap
                        @ f
                        $dFunctor
                        @ field
                        @ (Database.Persist.Class.PersistEntity.Entity Main.User)
                        (\ x :: field ->
                         case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity key value ->
                         Database.Persist.Class.PersistEntity.Entity
                           @ Main.User
                           $dPersistEntity
                           key
                           (case value of wild2 { Main.User ds ->
                            Main.$WUser x `cast` (Sub dt) }) })
                        (eta
                           (case eta1 of wild1 { Database.Persist.Class.PersistEntity.Entity $dPersistEntity ds1 ds2 ->
                            case ds2 of wild2 { Main.User ds ->
                            ds `cast` (Sub (Sym dt)) } })) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$ckeyFromValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [Database.Persist.Types.Base.PersistValue] ->
                 case (Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                         (Database.Persist.TH.headNote x))
                        `cast`
                      (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))))_R of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.User)
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ Data.Text.Internal.Text
                        @ (Database.Persist.Class.PersistEntity.Key Main.User)
                        y `cast`
                        (Trans
                             (Sym (Main.NTCo:R:KeyUser[0]))
                             (Sub (Sym (Main.TFCo:R:KeyUser[0])))) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$ckeyToValues ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Persist.Class.PersistEntity.Key Main.User ->
                 GHC.Types.:
                   @ Database.Persist.Types.Base.PersistValue
                   (Database.Persist.Types.Base.PersistInt64
                      x `cast`
                      (Trans
                           (Sub (Main.TFCo:R:KeyUser[0]))
                           (Trans
                                (Main.NTCo:R:KeyUser[0])
                                (Trans
                                     (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                     (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))))
                   (GHC.Types.[] @ Database.Persist.Types.Base.PersistValue)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fFromJSONInt64_$cparseJSON
                  `cast`
                (<Data.Aeson.Types.Internal.Value>_R
                 ->_R (Data.Aeson.Types.Internal.Parser
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUser[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUser[0])))))))_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$cpersistFieldDef ::
    Database.Persist.Class.PersistEntity.EntityField Main.User typ
    -> Database.Persist.Types.Base.FieldDef
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ typ
                   ds :: Database.Persist.Class.PersistEntity.EntityField
                           Main.User typ ->
                 case ds
                        `cast`
                      (Sub (Main.TFCo:R:EntityFieldUsertyp[0]) <typ>_N) of wild {
                   Main.UserId dt -> Main.$fPersistEntityUser2
                   Main.UserSoundCloudId dt -> Main.$fPersistEntityUser1 }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$cpersistUniqueKeys ::
    Main.User
    -> [Database.Persist.Class.PersistEntity.Unique Main.User]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.User ->
                 case ds of wild { Main.User _soundCloudId ->
                 GHC.Types.[]
                   @ (Database.Persist.Class.PersistEntity.Unique Main.User) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$cpersistUniqueToFieldNames ::
    Database.Persist.Class.PersistEntity.Unique Main.User
    -> [(Database.Persist.Types.Base.HaskellName,
         Database.Persist.Types.Base.DBName)]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Unique Main.User ->
                 Main.$fPersistEntitySong2) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$cpersistUniqueToValues ::
    Database.Persist.Class.PersistEntity.Unique Main.User
    -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, Strictness: <B,A>b,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Unique Main.User ->
                 Main.$fPersistEntitySong1) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Unfolding: InlineRule (0, True, True)
                Data.Aeson.Types.Instances.$fToJSONInt64_$ctoJSON
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <Data.Aeson.Types.Internal.Value>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$ctoPersistFields ::
    Main.User -> [Database.Persist.Class.PersistField.SomePersistField]
  {- Arity: 1, Strictness: <S(S),1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.User ->
                 case ds of wild { Main.User x ->
                 GHC.Types.:
                   @ Database.Persist.Class.PersistField.SomePersistField
                   (Database.Persist.Class.PersistField.SomePersistField
                      @ GHC.Base.String
                      Database.Persist.Class.PersistField.$fPersistField[]0
                      x)
                   (GHC.Types.[]
                      @ Database.Persist.Class.PersistField.SomePersistField) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistEntityUser_$s$WUserId ::
    Database.Persist.Class.PersistEntity.EntityField
      Main.User (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Inline: INLINE,
     Unfolding: InlineRule (0, False, False)
                (Main.UserId
                   @ (Database.Persist.Class.PersistEntity.Key Main.User)
                   @~ <Database.Persist.Class.PersistEntity.Key Main.User>_N)
                  `cast`
                (Sub (Sym (Main.TFCo:R:EntityFieldUsertyp[0])) <Database.Persist.Class.PersistEntity.Key
                                                                  Main.User>_N) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldKey ::
    Database.Persist.Class.PersistField.PersistField
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fPersistFieldKey_$ctoPersistValue
                  Main.$fPersistFieldKey_$cfromPersistValue -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldKey0 ::
    Database.Persist.Class.PersistField.PersistField
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fPersistFieldKey0_$ctoPersistValue
                  Main.$fPersistFieldKey0_$cfromPersistValue -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldKey0_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                  `cast`
                (<Database.Persist.Types.Base.PersistValue>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyPlaylist[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))))_R) -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldKey0_$ctoPersistValue ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Types.Base.PersistInt64
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <Database.Persist.Types.Base.PersistValue>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldKey1 ::
    Database.Persist.Class.PersistField.PersistField
      (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fPersistFieldKey1_$ctoPersistValue
                  Main.$fPersistFieldKey1_$cfromPersistValue -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldKey1_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                  `cast`
                (<Database.Persist.Types.Base.PersistValue>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeyUser[0]))
                                        (Sub (Sym (Main.TFCo:R:KeyUser[0])))))))_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldKey1_$ctoPersistValue ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Types.Base.PersistInt64
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <Database.Persist.Types.Base.PersistValue>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldKey_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Class.PersistField.$fPersistFieldInt64_$cfromPersistValue
                  `cast`
                (<Database.Persist.Types.Base.PersistValue>_R
                 ->_R (Data.Either.Either
                         <Data.Text.Internal.Text>_R
                         (Trans
                              (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                              (Trans
                                   (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                                   (Trans
                                        (Sym (Main.NTCo:R:KeySong[0]))
                                        (Sub (Sym (Main.TFCo:R:KeySong[0])))))))_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldKey_$ctoPersistValue ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Types.Base.PersistInt64
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <Database.Persist.Types.Base.PersistValue>_R) -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldPlaylist ::
    Database.Persist.Class.PersistField.PersistField Main.Playlist
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Playlist
                  Main.$fPersistFieldPlaylist_$ctoPersistValue
                  Main.$fPersistFieldPlaylist_$cfromPersistValue -}
4128c2006040cf1997c8982d72abc9ba
  $fPersistFieldPlaylist1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldPlaylist4
                   Main.$fPersistFieldPlaylist2) -}
704c2da0e221ee7b8ef5d254b6e35f4d
  $fPersistFieldPlaylist2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldPlaylist3
                   (GHC.Types.[] @ GHC.Base.String)) -}
753f084177f5be2cedba831010a67296
  $fPersistFieldPlaylist3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "collaborators"#) -}
4c9a15a976f3d10437945d2f2296d79c
  $fPersistFieldPlaylist4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "songs"#) -}
f9ab404a13228e07b3455725cf97dbdd
  $fPersistFieldPlaylist5 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldPlaylist_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either Data.Text.Internal.Text Main.Playlist
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ eta2 :: Database.Persist.Types.Base.PersistValue ->
                 case Database.Persist.Class.PersistField.getPersistMap
                        eta2 of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ Data.Text.Internal.Text @ Main.Playlist l
                   Data.Either.Right r
                   -> let {
                        columns :: Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text
                                     Database.Persist.Types.Base.PersistValue
                        = Data.Aeson.Types.Internal.$sfromList1
                            @ Database.Persist.Types.Base.PersistValue
                            r
                            (Data.HashMap.Base.Empty
                               @ Data.Text.Internal.Text
                               @ Database.Persist.Types.Base.PersistValue)
                      } in
                      Main.$fPersistEntityPlaylist_$cfromPersistValues
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ Database.Persist.Types.Base.PersistValue
                           (\ name :: GHC.Base.String ->
                            case GHC.ST.runSTRep
                                   @ Data.Text.Internal.Text
                                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                                    Main.$fPersistFieldPlaylist5
                                      @ s1
                                      (Data.Text.Array.MArray @ s1 ipv1)
                                      Main.$fPersistFieldUser4
                                      name
                                      0
                                      ipv }) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                            case Data.Aeson.Types.Instances.$w$slookup
                                   @ Database.Persist.Types.Base.PersistValue
                                   ww1
                                   ww2
                                   ww3
                                   columns of wild1 {
                              GHC.Base.Nothing -> Database.Persist.Types.Base.PersistNull
                              GHC.Base.Just v -> v } })
                           Main.$fPersistFieldPlaylist1) }) -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldPlaylist_$ctoPersistValue ::
    Main.Playlist -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, Strictness: <L,1*U(U,U)>m12, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Playlist ->
                 case Main.$w$ctoPersistValue1 w of ww { (##) ww1 ->
                 Database.Persist.Types.Base.PersistMap ww1 }) -}
6f0e0bebbea637c6da9debf9aafde81a
  $fPersistFieldPlaylist_go ::
    [Main.User] -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, Strictness: <S,1*U> -}
b74e040a06724c6dcc406f70e0b6fefb
  $fPersistFieldPlaylist_go1 ::
    [Main.Song] -> [Database.Persist.Types.Base.PersistValue]
  {- Arity: 1, Strictness: <S,1*U> -}
4582cb480e8b55d21590a202dc63a76e
  $fPersistFieldPlaylist_go2 ::
    [[GHC.Types.Char]]
    -> [Database.Persist.Types.Base.PersistValue]
    -> [(Data.Text.Internal.Text,
         Database.Persist.Types.Base.PersistValue)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldSong ::
    Database.Persist.Class.PersistField.PersistField Main.Song
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Song
                  Main.$fPersistFieldSong_$ctoPersistValue
                  Main.$fPersistFieldSong_$cfromPersistValue -}
35ad32653521e742d5cad747e548ac5f
  $fPersistFieldSong1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldSong4
                   Main.$fPersistFieldSong2) -}
685c8ab4a3f923af76956c5e15990d6a
  $fPersistFieldSong2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.$fPersistFieldSong3
                   (GHC.Types.[] @ GHC.Base.String)) -}
ad01dd42e4c864af3675d481a834c8b3
  $fPersistFieldSong3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "url"#) -}
5951187ba2cc0c967195860ac5704116
  $fPersistFieldSong4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name"#) -}
08f54fa07b7c7b4d2eb3ab6637c3db00
  $fPersistFieldSong5 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldSong_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either Data.Text.Internal.Text Main.Song
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ eta2 :: Database.Persist.Types.Base.PersistValue ->
                 case Database.Persist.Class.PersistField.getPersistMap
                        eta2 of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ Data.Text.Internal.Text @ Main.Song l
                   Data.Either.Right r
                   -> let {
                        columns :: Data.HashMap.Base.HashMap
                                     Data.Text.Internal.Text
                                     Database.Persist.Types.Base.PersistValue
                        = Data.Aeson.Types.Internal.$sfromList1
                            @ Database.Persist.Types.Base.PersistValue
                            r
                            (Data.HashMap.Base.Empty
                               @ Data.Text.Internal.Text
                               @ Database.Persist.Types.Base.PersistValue)
                      } in
                      Main.$fPersistEntitySong_$cfromPersistValues
                        (GHC.Base.map
                           @ [GHC.Types.Char]
                           @ Database.Persist.Types.Base.PersistValue
                           (\ name :: GHC.Base.String ->
                            case GHC.ST.runSTRep
                                   @ Data.Text.Internal.Text
                                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                                    Main.$fPersistFieldSong5
                                      @ s1
                                      (Data.Text.Array.MArray @ s1 ipv1)
                                      Main.$fPersistFieldUser4
                                      name
                                      0
                                      ipv }) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                            case Data.Aeson.Types.Instances.$w$slookup
                                   @ Database.Persist.Types.Base.PersistValue
                                   ww1
                                   ww2
                                   ww3
                                   columns of wild1 {
                              GHC.Base.Nothing -> Database.Persist.Types.Base.PersistNull
                              GHC.Base.Just v -> v } })
                           Main.$fPersistFieldSong1) }) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldSong_$ctoPersistValue ::
    Main.Song -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, Strictness: <L,1*U(U,U)>m12, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Song ->
                 case Main.$w$ctoPersistValue w of ww { (##) ww1 ->
                 Database.Persist.Types.Base.PersistMap ww1 }) -}
c96e32e08c6db84661f0759d09d0b1cc
  $fPersistFieldSong_go ::
    [[GHC.Types.Char]]
    -> [Database.Persist.Types.Base.PersistValue]
    -> [(Data.Text.Internal.Text,
         Database.Persist.Types.Base.PersistValue)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldSqlKey ::
    Database.Persist.Sql.Class.PersistFieldSql
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fPersistFieldKey
                  Main.$fPersistFieldSqlKey_$csqlType -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldSqlKey0 ::
    Database.Persist.Sql.Class.PersistFieldSql
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fPersistFieldKey0
                  Main.$fPersistFieldSqlKey0_$csqlType -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldSqlKey0_$csqlType ::
    Data.Proxy.Proxy
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
    -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Sql.Class.$fPersistFieldSqlInt64_$csqlType
                  `cast`
                ((Data.Proxy.Proxy
                    <*>_N
                    (UnivCo opt_phantom phantom GHC.Int.Int64 (Database.Persist.Class.PersistEntity.Key
                                                                 Main.Playlist)))_R
                 ->_R <Database.Persist.Types.Base.SqlType>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldSqlKey1 ::
    Database.Persist.Sql.Class.PersistFieldSql
      (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fPersistFieldKey1
                  Main.$fPersistFieldSqlKey1_$csqlType -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldSqlKey1_$csqlType ::
    Data.Proxy.Proxy
      (Database.Persist.Class.PersistEntity.Key Main.User)
    -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Sql.Class.$fPersistFieldSqlInt64_$csqlType
                  `cast`
                ((Data.Proxy.Proxy
                    <*>_N
                    (UnivCo opt_phantom phantom GHC.Int.Int64 (Database.Persist.Class.PersistEntity.Key
                                                                 Main.User)))_R
                 ->_R <Database.Persist.Types.Base.SqlType>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldSqlKey_$csqlType ::
    Data.Proxy.Proxy
      (Database.Persist.Class.PersistEntity.Key Main.Song)
    -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Database.Persist.Sql.Class.$fPersistFieldSqlInt64_$csqlType
                  `cast`
                ((Data.Proxy.Proxy
                    <*>_N
                    (UnivCo opt_phantom phantom GHC.Int.Int64 (Database.Persist.Class.PersistEntity.Key
                                                                 Main.Song)))_R
                 ->_R <Database.Persist.Types.Base.SqlType>_R) -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldSqlPlaylist ::
    Database.Persist.Sql.Class.PersistFieldSql Main.Playlist
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Playlist
                  Main.$fPersistFieldPlaylist
                  Main.$fPersistFieldSqlPlaylist_$csqlType -}
261e99bff73ad820977b6332d53528b9
  $fPersistFieldSqlPlaylist_$csqlType ::
    Data.Proxy.Proxy Main.Playlist
    -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Data.Proxy.Proxy Main.Playlist ->
                 Database.Persist.Types.Base.SqlString) -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldSqlSong ::
    Database.Persist.Sql.Class.PersistFieldSql Main.Song
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Song
                  Main.$fPersistFieldSong
                  Main.$fPersistFieldSqlSong_$csqlType -}
49814fff28b1b1012fadefc14273c7cd
  $fPersistFieldSqlSong_$csqlType ::
    Data.Proxy.Proxy Main.Song -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Data.Proxy.Proxy Main.Song ->
                 Database.Persist.Types.Base.SqlString) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldSqlUser ::
    Database.Persist.Sql.Class.PersistFieldSql Main.User
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User
                  Main.$fPersistFieldUser
                  Main.$fPersistFieldSqlUser_$csqlType -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldSqlUser_$csqlType ::
    Data.Proxy.Proxy Main.User -> Database.Persist.Types.Base.SqlType
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Data.Proxy.Proxy Main.User ->
                 Database.Persist.Types.Base.SqlString) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldUser ::
    Database.Persist.Class.PersistField.PersistField Main.User
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User
                  Main.$fPersistFieldUser_$ctoPersistValue
                  Main.$fPersistFieldUser_$cfromPersistValue -}
841909405e61bbc906b7fc96d4c24550
  $fPersistFieldUser1 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   Main.$fPersistFieldUser2) -}
bba31f5223248a050317b9f00260591d
  $fPersistFieldUser2 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 Main.$fPersistFieldUser5
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   Main.$fPersistFieldUser4
                   Main.$fPersistFieldUser3
                   0
                   ipv }) -}
f1a42c3e41bfcac5629ed7a471b49883
  $fPersistFieldUser3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "soundCloudId"#) -}
c359e15eca235584ba8201296f2e4cef
  $fPersistFieldUser4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4) -}
855eb3846c028ca5537ee36125a5e78d
  $fPersistFieldUser5 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
a63625384d1d226e85dd629fc7b9aae4
  $fPersistFieldUser6 :: Data.Text.Internal.Text
  {- Unfolding: (GHC.ST.runSTRep
                   @ Data.Text.Internal.Text
                   Main.$fPersistFieldUser7) -}
4739a1e01ed730c8316f04a076f90bb4
  $fPersistFieldUser7 ::
    GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                 case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                 Main.$fPersistFieldUser8
                   @ s1
                   (Data.Text.Array.MArray @ s1 ipv1)
                   Main.$fPersistFieldUser4
                   Main.$fPersistFieldUser3
                   0
                   ipv }) -}
fdc67cb8d812d59056aa11d1793b4f17
  $fPersistFieldUser8 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldUser_$cfromPersistValue ::
    Database.Persist.Types.Base.PersistValue
    -> Data.Either.Either Data.Text.Internal.Text Main.User
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ eta2 :: Database.Persist.Types.Base.PersistValue ->
                 case Database.Persist.Class.PersistField.getPersistMap
                        eta2 of wild {
                   Data.Either.Left l
                   -> Data.Either.Left @ Data.Text.Internal.Text @ Main.User l
                   Data.Either.Right r
                   -> Main.$fPersistFieldUser_$cfromPersistValues
                        (GHC.Types.:
                           @ Database.Persist.Types.Base.PersistValue
                           (case Main.$fPersistFieldUser1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                            case Data.Aeson.Types.Instances.$w$slookup
                                   @ Database.Persist.Types.Base.PersistValue
                                   ww1
                                   ww2
                                   ww3
                                   (Data.Aeson.Types.Internal.$sfromList1
                                      @ Database.Persist.Types.Base.PersistValue
                                      r
                                      (Data.HashMap.Base.Empty
                                         @ Data.Text.Internal.Text
                                         @ Database.Persist.Types.Base.PersistValue)) of wild1 {
                              GHC.Base.Nothing -> Database.Persist.Types.Base.PersistNull
                              GHC.Base.Just v -> v } })
                           (GHC.Types.[] @ Database.Persist.Types.Base.PersistValue)) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldUser_$cfromPersistValues ::
    [Database.Persist.Types.Base.PersistValue]
    -> Data.Either.Either Data.Text.Internal.Text Main.User
  {- Arity: 1, Strictness: <S,U> -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fPersistFieldUser_$ctoPersistValue ::
    Main.User -> Database.Persist.Types.Base.PersistValue
  {- Arity: 1, Strictness: <L,1*U(U)>m12, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.User ->
                 Database.Persist.Types.Base.PersistMap
                   (case w of wild { Main.User x ->
                    GHC.Types.:
                      @ (Data.Text.Internal.Text,
                         Database.Persist.Types.Base.PersistValue)
                      (Main.$fPersistFieldUser6,
                       case Database.Persist.Class.PersistField.$w$ctoPersistValue4
                              x of ww { (##) ww1 ->
                       Database.Persist.Types.Base.PersistText ww1 })
                      (GHC.Types.[]
                         @ (Data.Text.Internal.Text,
                            Database.Persist.Types.Base.PersistValue)) })) -}
49814fff28b1b1012fadefc14273c7cd
  $fReadKey ::
    GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fReadKey_$s$dmreadsPrec
                  Main.$fReadKey_$sreadListDefault
                  Main.$fReadKey_$creadPrec
                  Main.$fReadKey_$creadListPrec -}
261e99bff73ad820977b6332d53528b9
  $fReadKey0 ::
    GHC.Read.Read
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fReadKey0_$s$dmreadsPrec
                  Main.$fReadKey0_$sreadListDefault
                  Main.$fReadKey0_$creadPrec
                  Main.$fReadKey0_$creadListPrec -}
261e99bff73ad820977b6332d53528b9
  $fReadKey0_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Database.Persist.Class.PersistEntity.Key Main.Playlist]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey5
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Database.Persist.Class.PersistEntity.Key Main.Playlist]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Database.Persist.Class.PersistEntity.Key Main.Playlist]>_R))) -}
261e99bff73ad820977b6332d53528b9
  $fReadKey0_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey6
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Playlist>_R)) -}
261e99bff73ad820977b6332d53528b9
  $fReadKey0_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                   Main.$fReadKey0_$creadPrec
                   eta) -}
261e99bff73ad820977b6332d53528b9
  $fReadKey0_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Database.Persist.Class.PersistEntity.Key Main.Playlist]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Database.Persist.Class.PersistEntity.Key Main.Playlist]
                   ((Main.$fReadKey0_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Database.Persist.Class.PersistEntity.Key Main.Playlist]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Database.Persist.Class.PersistEntity.Key Main.Playlist]>_R)
                      @ [Database.Persist.Class.PersistEntity.Key Main.Playlist]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Database.Persist.Class.PersistEntity.Key Main.Playlist]))) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fReadKey1 ::
    GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fReadKey1_$s$dmreadsPrec
                  Main.$fReadKey1_$sreadListDefault
                  Main.$fReadKey1_$creadPrec
                  Main.$fReadKey1_$creadListPrec -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fReadKey10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.User
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.User
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wa4 ww1 @ b w1 }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fReadKey1_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Database.Persist.Class.PersistEntity.Key Main.User]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey8
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Database.Persist.Class.PersistEntity.Key Main.User]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Database.Persist.Class.PersistEntity.Key Main.User]>_R))) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fReadKey1_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey9
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Database.Persist.Class.PersistEntity.Key Main.User>_R)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fReadKey1_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Database.Persist.Class.PersistEntity.Key Main.User)
                   Main.$fReadKey1_$creadPrec
                   eta) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fReadKey1_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Database.Persist.Class.PersistEntity.Key Main.User]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Database.Persist.Class.PersistEntity.Key Main.User]
                   ((Main.$fReadKey1_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Database.Persist.Class.PersistEntity.Key Main.User]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Database.Persist.Class.PersistEntity.Key Main.User]>_R)
                      @ [Database.Persist.Class.PersistEntity.Key Main.User]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Database.Persist.Class.PersistEntity.Key Main.User]))) -}
49814fff28b1b1012fadefc14273c7cd
  $fReadKey2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Database.Persist.Class.PersistEntity.Key Main.Song]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Database.Persist.Class.PersistEntity.Key Main.Song]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                   Main.$fReadKey3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Database.Persist.Class.PersistEntity.Key Main.Song>_R))
                   @ b
                   eta1) -}
49814fff28b1b1012fadefc14273c7cd
  $fReadKey3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                   Main.$fReadKey4
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Database.Persist.Class.PersistEntity.Key Main.Song>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.Song>_R)))) -}
49814fff28b1b1012fadefc14273c7cd
  $fReadKey4 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.Song
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.Song
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wa ww1 @ b w1 }) -}
261e99bff73ad820977b6332d53528b9
  $fReadKey5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Database.Persist.Class.PersistEntity.Key Main.Playlist]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Database.Persist.Class.PersistEntity.Key Main.Playlist]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                   Main.$fReadKey6
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Database.Persist.Class.PersistEntity.Key Main.Playlist>_R))
                   @ b
                   eta1) -}
261e99bff73ad820977b6332d53528b9
  $fReadKey6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                   Main.$fReadKey7
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Database.Persist.Class.PersistEntity.Key Main.Playlist>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.Playlist>_R)))) -}
261e99bff73ad820977b6332d53528b9
  $fReadKey7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.Playlist
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.Playlist
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wa3 ww1 @ b w1 }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fReadKey8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Database.Persist.Class.PersistEntity.Key Main.User]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Database.Persist.Class.PersistEntity.Key Main.User]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Database.Persist.Class.PersistEntity.Key Main.User)
                   Main.$fReadKey9
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Database.Persist.Class.PersistEntity.Key Main.User>_R))
                   @ b
                   eta1) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fReadKey9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Database.Persist.Class.PersistEntity.Key Main.User)
                   Main.$fReadKey10
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Database.Persist.Class.PersistEntity.Key Main.User>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Database.Persist.Class.PersistEntity.Key Main.User>_R)))) -}
49814fff28b1b1012fadefc14273c7cd
  $fReadKey_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Database.Persist.Class.PersistEntity.Key Main.Song]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey2
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Database.Persist.Class.PersistEntity.Key Main.Song]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Database.Persist.Class.PersistEntity.Key Main.Song]>_R))) -}
49814fff28b1b1012fadefc14273c7cd
  $fReadKey_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadKey3
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Song>_R)) -}
49814fff28b1b1012fadefc14273c7cd
  $fReadKey_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Database.Persist.Class.PersistEntity.Key Main.Song)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                   Main.$fReadKey_$creadPrec
                   eta) -}
49814fff28b1b1012fadefc14273c7cd
  $fReadKey_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Database.Persist.Class.PersistEntity.Key Main.Song]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Database.Persist.Class.PersistEntity.Key Main.Song]
                   ((Main.$fReadKey_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Database.Persist.Class.PersistEntity.Key Main.Song]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Database.Persist.Class.PersistEntity.Key Main.Song]>_R)
                      @ [Database.Persist.Class.PersistEntity.Key Main.Song]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Database.Persist.Class.PersistEntity.Key Main.Song]))) -}
8e52bdb27bdc7b45a5fe777abc7caf1b
  $fSelectorPlaylist :: GHC.Generics.Selector Main.S1_0_0Playlist
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fSelectorPlaylist_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0] <Main.S1_0_0Playlist>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fSelectorPlaylist0 :: GHC.Generics.Selector Main.S1_0_1Playlist
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fSelectorPlaylist0_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0] <Main.S1_0_1Playlist>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fSelectorPlaylist0_$cselName ::
    t Main.S1_0_1Playlist f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.S1_0_1Playlist f a141 ->
                 Main.$fSelectorPlaylist2) -}
1c13d795b7292852426f2f03537dfc97
  $fSelectorPlaylist1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "playlistSongs"#) -}
e67d8d54f60996af13e1de9a1b214b77
  $fSelectorPlaylist2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "playlistCollaborators"#) -}
8e52bdb27bdc7b45a5fe777abc7caf1b
  $fSelectorPlaylist_$cselName ::
    t Main.S1_0_0Playlist f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.S1_0_0Playlist f a141 ->
                 Main.$fSelectorPlaylist1) -}
b053b3a7e4c89d823a53c9352de61429
  $fSelectorSong :: GHC.Generics.Selector Main.S1_0_0Song
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fSelectorSong_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0] <Main.S1_0_0Song>_N)) -}
49814fff28b1b1012fadefc14273c7cd
  $fSelectorSong0 :: GHC.Generics.Selector Main.S1_0_1Song
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fSelectorSong0_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0] <Main.S1_0_1Song>_N)) -}
49814fff28b1b1012fadefc14273c7cd
  $fSelectorSong0_$cselName ::
    t Main.S1_0_1Song f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.S1_0_1Song f a141 ->
                 Main.$fSelectorSong2) -}
58fd136d48aa9947109de6be556fd2fc
  $fSelectorSong1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "songName"#) -}
a94b404e68e14b0525ee3665cbba351a
  $fSelectorSong2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "songUrl"#) -}
b053b3a7e4c89d823a53c9352de61429
  $fSelectorSong_$cselName ::
    t Main.S1_0_0Song f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.S1_0_0Song f a141 ->
                 Main.$fSelectorSong1) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fSelectorUser :: GHC.Generics.Selector Main.S1_0_0User
  DFunId[0]
  {- Arity: 1, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fSelectorUser_$cselName
                  `cast`
                (Sym (GHC.Generics.NTCo:Selector[0] <Main.S1_0_0User>_N)) -}
4de4f277493ce0691e4d3d1b4d3dd353
  $fSelectorUser1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "userSoundCloudId"#) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fSelectorUser_$cselName ::
    t Main.S1_0_0User f a -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (t :: * -> (* -> *) -> * -> *)
                   @ (f :: * -> *)
                   @ a141
                   ds :: t Main.S1_0_0User f a141 ->
                 Main.$fSelectorUser1) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowKey ::
    GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fShowKey_$cshowsPrec
                  Main.$fShowKey_$cshow
                  Main.$fShowKey_$cshowList -}
261e99bff73ad820977b6332d53528b9
  $fShowKey0 ::
    GHC.Show.Show
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fShowKey0_$cshowsPrec
                  Main.$fShowKey0_$cshow
                  Main.$fShowKey0_$cshowList -}
261e99bff73ad820977b6332d53528b9
  $fShowKey0_$cshow ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Persist.Class.PersistEntity.Key Main.Playlist ->
                 Main.$fShowKey0_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
261e99bff73ad820977b6332d53528b9
  $fShowKey0_$cshowList ::
    [Database.Persist.Class.PersistEntity.Key Main.Playlist]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                   Main.$fShowKey6) -}
261e99bff73ad820977b6332d53528b9
  $fShowKey0_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.Playlist
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec1 ww1 w1 w2 }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowKey1 ::
    GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fShowKey1_$cshowsPrec
                  Main.$fShowKey1_$cshow
                  Main.$fShowKey1_$cshowList -}
353ff829cbfbd739d42c2db65ca607f2
  $fShowKey10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unUserKey = "#) -}
3368795c210ffb9ee4222b2802131f10
  $fShowKey11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UserKey {"#) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowKey1_$cshow ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Persist.Class.PersistEntity.Key Main.User ->
                 Main.$fShowKey1_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowKey1_$cshowList ::
    [Database.Persist.Class.PersistEntity.Key Main.User]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Database.Persist.Class.PersistEntity.Key Main.User)
                   Main.$fShowKey9) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowKey1_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.User
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec2 ww1 w1 w2 }) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowKey2 ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Database.Persist.Class.PersistEntity.Key
                          Main.Song
                   w1 :: GHC.Base.String ->
                 Main.$w$cshowsPrec 0 w w1) -}
5d8fef7c021e9696d1d245fd7707163f
  $fShowKey3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
275b9cb4794e95b75372ddc6157a1836
  $fShowKey4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unSongKey = "#) -}
015dbf996822f9971acae69fc165c4ff
  $fShowKey5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SongKey {"#) -}
261e99bff73ad820977b6332d53528b9
  $fShowKey6 ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Database.Persist.Class.PersistEntity.Key
                          Main.Playlist
                   w1 :: GHC.Base.String ->
                 Main.$w$cshowsPrec1 0 w w1) -}
23e1641e6ee541dc1c7dc34ec1ef612d
  $fShowKey7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unPlaylistKey = "#) -}
9e92c64fd06f534288b64f61513def86
  $fShowKey8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PlaylistKey {"#) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowKey9 ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Database.Persist.Class.PersistEntity.Key
                          Main.User
                   w1 :: GHC.Base.String ->
                 Main.$w$cshowsPrec2 0 w w1) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowKey_$cshow ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Database.Persist.Class.PersistEntity.Key Main.Song ->
                 Main.$fShowKey_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowKey_$cshowList ::
    [Database.Persist.Class.PersistEntity.Key Main.Song]
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                   Main.$fShowKey2) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowKey_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><L,1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: Database.Persist.Class.PersistEntity.Key Main.Song
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
261e99bff73ad820977b6332d53528b9
  $fShowPlaylist :: GHC.Show.Show Main.Playlist
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Playlist
                  Main.$fShowPlaylist_$cshowsPrec
                  Main.$fShowPlaylist_$cshow
                  Main.$fShowPlaylist_$cshowList -}
261e99bff73ad820977b6332d53528b9
  $fShowPlaylist1 :: Main.Playlist -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.Playlist w1 :: GHC.Base.String ->
                 case w of ww { Main.Playlist ww1 ww2 ->
                 Main.$w$cshowsPrec3 0 ww1 ww2 w1 }) -}
261e99bff73ad820977b6332d53528b9
  $fShowPlaylist_$cshow :: Main.Playlist -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.Playlist ->
                 Main.$fShowPlaylist_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
261e99bff73ad820977b6332d53528b9
  $fShowPlaylist_$cshowList :: [Main.Playlist] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Playlist
                   Main.$fShowPlaylist1) -}
261e99bff73ad820977b6332d53528b9
  $fShowPlaylist_$cshowsPrec ::
    GHC.Types.Int -> Main.Playlist -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S(SS),1*U(U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Playlist w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Playlist ww3 ww4 ->
                 Main.$w$cshowsPrec3 ww1 ww3 ww4 w2 } }) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowSong :: GHC.Show.Show Main.Song
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Song
                  Main.$fShowSong_$cshowsPrec
                  Main.$fShowSong_$cshow
                  Main.$fShowSong_$cshowList -}
49814fff28b1b1012fadefc14273c7cd
  $fShowSong1 :: Main.Song -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.Song w1 :: GHC.Base.String ->
                 case w of ww { Main.Song ww1 ww2 ->
                 Main.$w$cshowsPrec4 0 ww1 ww2 w1 }) -}
4c1a64e3eb8701b5a5aef22143692b67
  $fShowSong2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "songUrl = "#) -}
a1b57eaa565760ec1bf1caefb4245503
  $fShowSong3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
754cfbc977e5c5b90d7086e163215331
  $fShowSong4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "songName = "#) -}
57ee4b55b228d71a799c7a2af8832598
  $fShowSong5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Song {"#) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowSong_$cshow :: Main.Song -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.Song ->
                 Main.$fShowSong_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowSong_$cshowList :: [Main.Song] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Song Main.$fShowSong1) -}
49814fff28b1b1012fadefc14273c7cd
  $fShowSong_$cshowsPrec ::
    GHC.Types.Int -> Main.Song -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S(SS),1*U(U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.Song w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Song ww3 ww4 ->
                 Main.$w$cshowsPrec4 ww1 ww3 ww4 w2 } }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowUser :: GHC.Show.Show Main.User
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User
                  Main.$fShowUser_$cshowsPrec
                  Main.$fShowUser_$cshow
                  Main.$fShowUser_$cshowList -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowUser1 :: Main.User -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.User w1 :: GHC.Base.String ->
                 case w of ww { Main.User ww1 -> Main.$w$cshowsPrec5 0 ww1 w1 }) -}
805c49943b10c1903a8493ffcc11b3a9
  $fShowUser2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "User {"#) -}
fcaa346dea5184b5455f6e69749be598
  $fShowUser3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "userSoundCloudId = "#) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowUser_$cshow :: Main.User -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.User ->
                 Main.$fShowUser_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowUser_$cshowList :: [Main.User] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.User Main.$fShowUser1) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fShowUser_$cshowsPrec ::
    GHC.Types.Int -> Main.User -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S(S),1*U(U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.User w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.User ww3 ->
                 Main.$w$cshowsPrec5 ww1 ww3 w2 } }) -}
261e99bff73ad820977b6332d53528b9
  $fToBackendKeySqlBackendPlaylist ::
    Database.Persist.Class.PersistStore.ToBackendKey
      Database.Persist.Sql.Types.SqlBackend Main.Playlist
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Persist.Sql.Types.SqlBackend
                  @ Main.Playlist
                  Main.$fPersistEntityPlaylist
                  (GHC.Types.Eq#
                     @ *
                     @ (Database.Persist.Class.PersistEntity.PersistEntityBackend
                          Main.Playlist)
                     @ Database.Persist.Sql.Types.SqlBackend
                     @~ (Main.TFCo:R:PersistEntityBackendPlaylist[0]))
                  Database.Persist.Sql.Orphan.PersistStore.$fPersistStoreSqlBackend
                  Main.unPlaylistKey
                  (\ tpl :: Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.SqlBackend ->
                   tpl)
                    `cast`
                  (<Database.Persist.Class.PersistStore.BackendKey
                      Database.Persist.Sql.Types.SqlBackend>_R
                   ->_R Trans
                            (Sym (Main.NTCo:R:KeyPlaylist[0]))
                            (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))) -}
49814fff28b1b1012fadefc14273c7cd
  $fToBackendKeySqlBackendSong ::
    Database.Persist.Class.PersistStore.ToBackendKey
      Database.Persist.Sql.Types.SqlBackend Main.Song
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Persist.Sql.Types.SqlBackend
                  @ Main.Song
                  Main.$fPersistEntitySong
                  (GHC.Types.Eq#
                     @ *
                     @ (Database.Persist.Class.PersistEntity.PersistEntityBackend
                          Main.Song)
                     @ Database.Persist.Sql.Types.SqlBackend
                     @~ (Main.TFCo:R:PersistEntityBackendSong[0]))
                  Database.Persist.Sql.Orphan.PersistStore.$fPersistStoreSqlBackend
                  Main.unSongKey
                  (\ tpl :: Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.SqlBackend ->
                   tpl)
                    `cast`
                  (<Database.Persist.Class.PersistStore.BackendKey
                      Database.Persist.Sql.Types.SqlBackend>_R
                   ->_R Trans
                            (Sym (Main.NTCo:R:KeySong[0]))
                            (Sub (Sym (Main.TFCo:R:KeySong[0])))) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToBackendKeySqlBackendUser ::
    Database.Persist.Class.PersistStore.ToBackendKey
      Database.Persist.Sql.Types.SqlBackend Main.User
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Persist.Sql.Types.SqlBackend
                  @ Main.User
                  Main.$fPersistEntityUser
                  (GHC.Types.Eq#
                     @ *
                     @ (Database.Persist.Class.PersistEntity.PersistEntityBackend
                          Main.User)
                     @ Database.Persist.Sql.Types.SqlBackend
                     @~ (Main.TFCo:R:PersistEntityBackendUser[0]))
                  Database.Persist.Sql.Orphan.PersistStore.$fPersistStoreSqlBackend
                  Main.unUserKey
                  (\ tpl :: Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.SqlBackend ->
                   tpl)
                    `cast`
                  (<Database.Persist.Class.PersistStore.BackendKey
                      Database.Persist.Sql.Types.SqlBackend>_R
                   ->_R Trans
                            (Sym (Main.NTCo:R:KeyUser[0]))
                            (Sub (Sym (Main.TFCo:R:KeyUser[0])))) -}
49814fff28b1b1012fadefc14273c7cd
  $fToHttpApiDataKey ::
    Web.HttpApiData.Internal.ToHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Song)
                  Main.$fToHttpApiDataKey_$ctoQueryParam
                  Main.$fToHttpApiDataKey_$ctoHeader
                  Main.$fToHttpApiDataKey_$ctoQueryParam -}
261e99bff73ad820977b6332d53528b9
  $fToHttpApiDataKey0 ::
    Web.HttpApiData.Internal.ToHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.Playlist)
                  Main.$fToHttpApiDataKey0_$ctoQueryParam
                  Main.$fToHttpApiDataKey0_$ctoHeader
                  Main.$fToHttpApiDataKey0_$ctoQueryParam -}
261e99bff73ad820977b6332d53528b9
  $fToHttpApiDataKey0_$ctoHeader ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoHeader
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <Data.ByteString.Internal.ByteString>_R) -}
261e99bff73ad820977b6332d53528b9
  $fToHttpApiDataKey0_$ctoQueryParam ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoUrlPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyPlaylist[0]))
                               (Sub (Sym (Main.TFCo:R:KeyPlaylist[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToHttpApiDataKey1 ::
    Web.HttpApiData.Internal.ToHttpApiData
      (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Database.Persist.Class.PersistEntity.Key Main.User)
                  Main.$fToHttpApiDataKey1_$ctoQueryParam
                  Main.$fToHttpApiDataKey1_$ctoHeader
                  Main.$fToHttpApiDataKey1_$ctoQueryParam -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToHttpApiDataKey1_$ctoHeader ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoHeader
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <Data.ByteString.Internal.ByteString>_R) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToHttpApiDataKey1_$ctoQueryParam ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoUrlPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeyUser[0]))
                               (Sub (Sym (Main.TFCo:R:KeyUser[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fToHttpApiDataKey_$ctoHeader ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoHeader
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <Data.ByteString.Internal.ByteString>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fToHttpApiDataKey_$ctoQueryParam ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                Web.HttpApiData.Internal.$fToHttpApiDataInt64_$ctoUrlPiece
                  `cast`
                (Trans
                     (Sym (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0]))
                     (Trans
                          (Sub (Sym (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0])))
                          (Trans
                               (Sym (Main.NTCo:R:KeySong[0]))
                               (Sub (Sym (Main.TFCo:R:KeySong[0])))))
                 ->_R <Data.Text.Internal.Text>_R) -}
49814fff28b1b1012fadefc14273c7cd
  $fToJSONEntity ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Entity Main.Song)
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.Song>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fToJSONEntity0 ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Entity Main.Playlist)
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity0_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.Playlist>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fToJSONEntity0_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Entity Main.Playlist
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ w3 :: Database.Persist.Class.PersistEntity.Entity
                           Main.Playlist ->
                 Database.Persist.Class.PersistEntity.$wentityIdToJSON
                   @ Main.Playlist
                   Main.$fToJSONEntity0_$ctoJSON1
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Playlist>_N))
                   w3) -}
261e99bff73ad820977b6332d53528b9
  $fToJSONEntity0_$ctoJSON1 ::
    Main.Playlist -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Playlist ->
                 case w of ww { Main.Playlist ww1 ww2 ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Main.$fFromJSONEntity15,
                            case Main.$wa6 ww1 of ww3 { (##) ww4 ->
                            Data.Aeson.Types.Internal.Array ww4 })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Main.$fFromJSONEntity10,
                               case Main.$wa5 ww2 of ww3 { (##) ww4 ->
                               Data.Aeson.Types.Internal.Array ww4 })
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt } }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToJSONEntity0_$ctoJSON2 ::
    Main.User -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(S),1*U(U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.User ->
                 case w of ww { Main.User ww1 ->
                 case Main.$w$ctoJSON1 ww1 of ww2 { (##) ww3 ->
                 Data.Aeson.Types.Internal.Object ww3 } }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToJSONEntity1 ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Entity Main.User)
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity1_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Entity Main.User>_N)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToJSONEntity1_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Entity Main.User
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ w3 :: Database.Persist.Class.PersistEntity.Entity Main.User ->
                 Database.Persist.Class.PersistEntity.$wentityIdToJSON
                   @ Main.User
                   Main.$fToJSONEntity0_$ctoJSON2
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.User>_N))
                   w3) -}
e1f322257778ceccb6b498851477f1d3
  $fToJSONEntity2 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
355f2d49442ad4b03c9a54ffbfba9e8d
  $fToJSONEntity3 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
29347d13bbb3d2538344b3a8272c197c
  $fToJSONEntity4 ::
    Data.Text.Array.MArray s1
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s1
    -> (# GHC.Prim.State# s1, Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><L,U><L,U>,
     Inline: [0] -}
42a2538e25ace38c1e2db5e5b84d292c
  $fToJSONEntity5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0) -}
d202b44729c2ae8c0bbdc07eb30c43d4
  $fToJSONEntity6 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><L,U> -}
88cb5c8edeb1418f254271868c0145eb
  $fToJSONEntity7 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><L,U> -}
49814fff28b1b1012fadefc14273c7cd
  $fToJSONEntity_$ctoJSON ::
    Database.Persist.Class.PersistEntity.Entity Main.Song
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ w3 :: Database.Persist.Class.PersistEntity.Entity Main.Song ->
                 Database.Persist.Class.PersistEntity.$wentityIdToJSON
                   @ Main.Song
                   Main.$fToJSONEntity_$ctoJSON1
                     `cast`
                   (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Song>_N))
                   w3) -}
49814fff28b1b1012fadefc14273c7cd
  $fToJSONEntity_$ctoJSON1 ::
    Main.Song -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Song ->
                 case w of ww { Main.Song ww1 ww2 ->
                 case Main.$w$ctoJSON ww1 ww2 of ww3 { (##) ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
49814fff28b1b1012fadefc14273c7cd
  $fToJSONKey ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Key Main.Song)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntitySong_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Song>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fToJSONKey0 ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Key Main.Playlist)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntityPlaylist_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.Playlist>_N)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToJSONKey1 ::
    Data.Aeson.Types.Class.ToJSON
      (Database.Persist.Class.PersistEntity.Key Main.User)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m4,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fPersistEntityUser_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0]
                          <Database.Persist.Class.PersistEntity.Key Main.User>_N)) -}
261e99bff73ad820977b6332d53528b9
  $fToJSONPlaylist :: Data.Aeson.Types.Class.ToJSON Main.Playlist
  DFunId[0]
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity0_$ctoJSON1
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Playlist>_N)) -}
49814fff28b1b1012fadefc14273c7cd
  $fToJSONSong :: Data.Aeson.Types.Class.ToJSON Main.Song
  DFunId[0]
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity_$ctoJSON1
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Song>_N)) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $fToJSONUser :: Data.Aeson.Types.Class.ToJSON Main.User
  DFunId[0]
  {- Arity: 1, Strictness: <S(S),1*U(U)>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONEntity0_$ctoJSON2
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.User>_N)) -}
f3c9aa55de96c8452da06771cbb035cd
  $s$fAlternativeServerPartT1 ::
    GHC.Base.Applicative
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fAlternativeServerPartT_$s$fApplicativeServerPartT -}
4698751c72a54f62e03ad361db61a1cb
  $s$fAlternativeServerPartT2 ::
    GHC.Base.Functor
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fAlternativeServerPartT_$s$fFunctorServerPartT -}
ff98bb1181549952819fbce94a47b514
  $s$fAlternativeServerPartT_$s$fApplicativeServerPartT ::
    GHC.Base.Applicative
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                  Main.$s$fAlternativeServerPartT2
                  (Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$cpure
                     @ GHC.Types.IO
                     Main.$s$fAlternativeServerPartT2
                     GHC.Base.$fMonadIO
                     GHC.Base.$fFunctorIO)
                  (Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$c<*>
                     @ GHC.Types.IO
                     Main.$s$fAlternativeServerPartT2
                     GHC.Base.$fMonadIO
                     GHC.Base.$fFunctorIO)
                  Main.$s$fAlternativeServerPartT_$s$fApplicativeServerPartT_$c*>
                  Main.$s$fAlternativeServerPartT_$s$fApplicativeServerPartT_$c<* -}
b3009ec5817f5d2ebf8a45ad4ea3590e
  $s$fAlternativeServerPartT_$s$fApplicativeServerPartT_$c*> ::
    Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a
    -> Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO b
    -> Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO b
  {- Arity: 2, Strictness: <L,C(C1(U(U,1*U)))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a141
                   @ b
                   eta :: Happstack.Server.Internal.Monads.ServerPartT
                            GHC.Types.IO a141
                   eta1 :: Happstack.Server.Internal.Monads.ServerPartT
                             GHC.Types.IO b ->
                 Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$c<*>
                   @ GHC.Types.IO
                   Main.$s$fAlternativeServerPartT2
                   GHC.Base.$fMonadIO
                   GHC.Base.$fFunctorIO
                   @ b
                   @ b
                   (Happstack.Server.Internal.Monads.$fFunctorServerPartT_$c<$
                      @ GHC.Types.IO
                      GHC.Base.$fFunctorIO
                      @ (b -> b)
                      @ a141
                      (GHC.Base.id @ b)
                      eta)
                   eta1) -}
6120b686bb1e3182b18fb3c06144972f
  $s$fAlternativeServerPartT_$s$fApplicativeServerPartT_$c<* ::
    Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a
    -> Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO b
    -> Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a
  {- Arity: 2, Strictness: <L,C(C1(U(U,1*U)))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a141
                   @ b
                   eta :: Happstack.Server.Internal.Monads.ServerPartT
                            GHC.Types.IO a141
                   eta1 :: Happstack.Server.Internal.Monads.ServerPartT
                             GHC.Types.IO b ->
                 Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$c<*>
                   @ GHC.Types.IO
                   Main.$s$fAlternativeServerPartT2
                   GHC.Base.$fMonadIO
                   GHC.Base.$fFunctorIO
                   @ b
                   @ a141
                   (Happstack.Server.Internal.Monads.$fFunctorServerPartT_$cfmap
                      @ GHC.Types.IO
                      GHC.Base.$fFunctorIO
                      @ a141
                      @ (b -> a141)
                      (GHC.Base.const @ a141 @ b)
                      eta)
                   eta1) -}
582c8b615e7c39ebf7ca76051baec364
  $s$fAlternativeServerPartT_$s$fFunctorServerPartT ::
    GHC.Base.Functor
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                  (Happstack.Server.Internal.Monads.$fFunctorServerPartT_$cfmap
                     @ GHC.Types.IO
                     GHC.Base.$fFunctorIO)
                  (Happstack.Server.Internal.Monads.$fFunctorServerPartT_$c<$
                     @ GHC.Types.IO
                     GHC.Base.$fFunctorIO) -}
9733f7ee5e752aae88ab0aaad3c9fa4a
  $s$fApplicativeErrorT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Error.ErrorT
         Happstack.Server.Internal.Types.Response
         (Happstack.Server.Internal.Monads.FilterT
            Happstack.Server.Internal.Types.Response
            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Error.ErrorT
                       Happstack.Server.Internal.Types.Response
                       (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)))
                  Main.$s$fApplicativeErrorT_a21
                  (Control.Monad.Trans.Error.$fApplicativeErrorT_$cpure
                     @ Happstack.Server.Internal.Types.Response
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fApplicativeErrorT_a21
                     Main.$s$fApplicativeErrorT_$dFunctor2
                     Main.$s$fApplicativeErrorT_$dMonad3)
                  (Control.Monad.Trans.Error.$fApplicativeErrorT_$c<*>
                     @ Happstack.Server.Internal.Types.Response
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fApplicativeErrorT_a21
                     Main.$s$fApplicativeErrorT_$dFunctor2
                     Main.$s$fApplicativeErrorT_$dMonad3)
                  (Control.Monad.Trans.Error.$fApplicativeErrorT_$c*>
                     @ Happstack.Server.Internal.Types.Response
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fApplicativeErrorT_a21
                     Main.$s$fApplicativeErrorT_$dFunctor2
                     Main.$s$fApplicativeErrorT_$dMonad3)
                  (Control.Monad.Trans.Error.$fApplicativeErrorT_$c<*
                     @ Happstack.Server.Internal.Types.Response
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fApplicativeErrorT_a21
                     Main.$s$fApplicativeErrorT_$dFunctor2
                     Main.$s$fApplicativeErrorT_$dMonad3) -}
d791f96d77b991d1e253c850477bae18
  $s$fApplicativeErrorT_$dApplicative1 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeErrorT_$s$fApplicativeMaybeT -}
aab99f7d81cb0707af4e8b4d95fd7082
  $s$fApplicativeErrorT_$dApplicative2 ::
    GHC.Base.Applicative
      (Happstack.Server.Internal.Monads.FilterT
         Happstack.Server.Internal.Types.Response
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeErrorT_$s$fApplicativeFilterT -}
70403696d346afe187a99a65d6993af5
  $s$fApplicativeErrorT_$dFunctor :: GHC.Base.Functor GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fFunctorIO -}
97bc327e5f8af8d20b8ac120156952f2
  $s$fApplicativeErrorT_$dFunctor1 ::
    GHC.Base.Functor (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeErrorT_$s$fFunctorMaybeT -}
8d41719fa77e511dfebf8416b0fd2567
  $s$fApplicativeErrorT_$dFunctor2 ::
    GHC.Base.Functor
      (Happstack.Server.Internal.Monads.FilterT
         Happstack.Server.Internal.Types.Response
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Main.$s$fApplicativeErrorT_$s$fFunctorFilterT
                   @ Happstack.Server.Internal.Types.Response) -}
72587fd3cbad73e4e4bc441b4e986e76
  $s$fApplicativeErrorT_$dMonad1 :: GHC.Base.Monad GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fMonadIO -}
adb026d4ca30477f40807a76707b7d26
  $s$fApplicativeErrorT_$dMonad2 ::
    GHC.Base.Monad (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeErrorT_$s$fMonadMaybeT -}
17be48793562c83889e9b99543f08f10
  $s$fApplicativeErrorT_$dMonad3 ::
    GHC.Base.Monad
      (Happstack.Server.Internal.Monads.FilterT
         Happstack.Server.Internal.Types.Response
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeErrorT_$s$fMonadFilterT -}
d719cd8855b98e3e9db92b5d3caf9cbc
  $s$fApplicativeErrorT_$s$fApplicativeFilterT ::
    GHC.Base.Applicative
      (Happstack.Server.Internal.Monads.FilterT
         Happstack.Server.Internal.Types.Response
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.FilterT
                       Happstack.Server.Internal.Types.Response
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  Main.$s$fApplicativeErrorT_$dFunctor2
                  (Happstack.Server.Internal.Monads.$fApplicativeFilterT_$cpure
                     @ Happstack.Server.Internal.Types.Response
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dFunctor2
                     Main.$s$fApplicativeErrorT_$dApplicative1)
                  (Happstack.Server.Internal.Monads.$fApplicativeFilterT_$c<*>
                     @ Happstack.Server.Internal.Types.Response
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dFunctor2
                     Main.$s$fApplicativeErrorT_$dApplicative1)
                  (Happstack.Server.Internal.Monads.$fApplicativeFilterT_$c*>
                     @ Happstack.Server.Internal.Types.Response
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dFunctor2
                     Main.$s$fApplicativeErrorT_$dApplicative1)
                  (Happstack.Server.Internal.Monads.$fApplicativeFilterT_$c<*
                     @ Happstack.Server.Internal.Types.Response
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dFunctor2
                     Main.$s$fApplicativeErrorT_$dApplicative1) -}
4ec43cac0fa6244bba10790d5734f1d9
  $s$fApplicativeErrorT_$s$fApplicativeMaybeT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                  Main.$s$fApplicativeErrorT_$dFunctor1
                  (Control.Monad.Trans.Maybe.$fApplicativeMaybeT_$cpure
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dFunctor1
                     Main.$s$fApplicativeErrorT_$dFunctor
                     Main.$s$fApplicativeErrorT_$dMonad1)
                  (Control.Monad.Trans.Maybe.$fApplicativeMaybeT_$c<*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dFunctor1
                     Main.$s$fApplicativeErrorT_$dFunctor
                     Main.$s$fApplicativeErrorT_$dMonad1)
                  (Control.Monad.Trans.Maybe.$fApplicativeMaybeT_$c*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dFunctor1
                     Main.$s$fApplicativeErrorT_$dFunctor
                     Main.$s$fApplicativeErrorT_$dMonad1)
                  (Control.Monad.Trans.Maybe.$fApplicativeMaybeT_$c<*
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dFunctor1
                     Main.$s$fApplicativeErrorT_$dFunctor
                     Main.$s$fApplicativeErrorT_$dMonad1) -}
87185e9efcf5bb7fa0913bb48f54f88d
  $s$fApplicativeErrorT_$s$fFunctorErrorT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Error.ErrorT
         e
         (Happstack.Server.Internal.Monads.FilterT
            Happstack.Server.Internal.Types.Response
            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Error.ErrorT
                       e
                       (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)))
                  (Control.Monad.Trans.Error.$fFunctorErrorT_$cfmap
                     @ e
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fApplicativeErrorT_$dFunctor2)
                  (Control.Monad.Trans.Error.$fFunctorErrorT_$c<$
                     @ e
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fApplicativeErrorT_$dFunctor2) -}
10a3f50894ad3c712eaefe1afd836fb3
  $s$fApplicativeErrorT_$s$fFunctorFilterT ::
    GHC.Base.Functor
      (Happstack.Server.Internal.Monads.FilterT
         a20 (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a141.
                  @ (Happstack.Server.Internal.Monads.FilterT
                       a141 (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  (Happstack.Server.Internal.Monads.$fFunctorFilterT_$cfmap
                     @ a141
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dFunctor1)
                  (Happstack.Server.Internal.Monads.$fFunctorFilterT_$c<$
                     @ a141
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dFunctor1) -}
77e7b4fb8b4610342c1f51a2234b31bc
  $s$fApplicativeErrorT_$s$fFunctorMaybeT ::
    GHC.Base.Functor (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                  (Control.Monad.Trans.Maybe.$fFunctorMaybeT_$cfmap
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dFunctor)
                  (Control.Monad.Trans.Maybe.$fFunctorMaybeT_$c<$
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dFunctor) -}
11a738c8aba8745ba9b204f22a816fa3
  $s$fApplicativeErrorT_$s$fMonadFilterT ::
    GHC.Base.Monad
      (Happstack.Server.Internal.Monads.FilterT
         Happstack.Server.Internal.Types.Response
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.FilterT
                       Happstack.Server.Internal.Types.Response
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  Main.$s$fApplicativeErrorT_$dApplicative2
                  (Happstack.Server.Internal.Monads.$fMonadFilterT_$c>>=
                     @ Happstack.Server.Internal.Types.Response
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dApplicative2
                     Main.$s$fApplicativeErrorT_$dMonad2)
                  (Happstack.Server.Internal.Monads.$fMonadFilterT_$c>>
                     @ Happstack.Server.Internal.Types.Response
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dApplicative2
                     Main.$s$fApplicativeErrorT_$dMonad2)
                  (Happstack.Server.Internal.Monads.$fMonadFilterT_$creturn
                     @ Happstack.Server.Internal.Types.Response
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dApplicative2
                     Main.$s$fApplicativeErrorT_$dMonad2)
                  (Happstack.Server.Internal.Monads.$fMonadFilterT_$cfail
                     @ Happstack.Server.Internal.Types.Response
                     @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                     Main.$s$fApplicativeErrorT_$dApplicative2
                     Main.$s$fApplicativeErrorT_$dMonad2) -}
c5d56182c21d30b7f2b74cb56c37b0af
  $s$fApplicativeErrorT_$s$fMonadMaybeT ::
    GHC.Base.Monad (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                  Main.$s$fApplicativeErrorT_$dApplicative1
                  (Control.Monad.Trans.Maybe.$fMonadMaybeT_$c>>=
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dApplicative1
                     Main.$s$fApplicativeErrorT_$dMonad1)
                  (Control.Monad.Trans.Maybe.$fMonadMaybeT_$c>>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dApplicative1
                     Main.$s$fApplicativeErrorT_$dMonad1)
                  (Control.Monad.Trans.Maybe.$fMonadMaybeT_$creturn
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dApplicative1
                     Main.$s$fApplicativeErrorT_$dMonad1)
                  (Control.Monad.Trans.Maybe.$fMonadMaybeT_$cfail
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dApplicative1
                     Main.$s$fApplicativeErrorT_$dMonad1) -}
2a9a1ab41b034116fa41974cb3721004
  $s$fApplicativeErrorT_a21 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Error.ErrorT
         Happstack.Server.Internal.Types.Response
         (Happstack.Server.Internal.Monads.FilterT
            Happstack.Server.Internal.Types.Response
            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Main.$s$fApplicativeErrorT_$s$fFunctorErrorT
                   @ Happstack.Server.Internal.Types.Response) -}
894b99183aa4357d51eee8f90b40ac46
  $s$fApplicativeNoLoggingT ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fApplicativeNoLoggingT_$dFunctor
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$cpure
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT_$dFunctor
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*>
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT_$dFunctor
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c*>
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT_$dFunctor
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT_$dFunctor
                     Main.$s$fApplicativeNoLoggingT1) -}
7c2e430b1aed26d8b870cccaf5fc6ffb
  $s$fApplicativeNoLoggingT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fMonadResourceT -}
b891850008df9940d9fa63bb8f3a22e5
  $s$fApplicativeNoLoggingT10 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fFunctorResourceT1 -}
0b82eaef52cd752b70b2e07c05ef358d
  $s$fApplicativeNoLoggingT11 ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT1 -}
35f9b69f9d46ffcc3e6332c1fa6b3e6a
  $s$fApplicativeNoLoggingT2 ::
    GHC.Base.String
    -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a141 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Control.Monad.Trans.Resource.Internal.ResourceT
                        GHC.Types.IO a141)
                   eta) -}
67d30e9310c06f344399860ff8ada587
  $s$fApplicativeNoLoggingT3 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT -}
7703407cd348e0e66f4827af3fdb967a
  $s$fApplicativeNoLoggingT4 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fFunctorResourceT -}
aba5bf64ead0cd842e974ddec50ad504
  $s$fApplicativeNoLoggingT5 ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
                  Main.$s$fApplicativeNoLoggingT11
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$cpure
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fApplicativeNoLoggingT11
                     Main.$s$fApplicativeNoLoggingT6)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*>
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fApplicativeNoLoggingT11
                     Main.$s$fApplicativeNoLoggingT6)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c*>
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fApplicativeNoLoggingT11
                     Main.$s$fApplicativeNoLoggingT6)
                  (Control.Monad.Logger.$fApplicativeNoLoggingT_$c<*
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fApplicativeNoLoggingT11
                     Main.$s$fApplicativeNoLoggingT6) -}
a2383059622b320109dba6ee4a560114
  $s$fApplicativeNoLoggingT6 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fMonadResourceT1 -}
f45d050ce3c9a09bc2845ad318b0a43e
  $s$fApplicativeNoLoggingT7 ::
    GHC.Base.String
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a141 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Control.Monad.Trans.Resource.Internal.ResourceT
                        (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a141)
                   eta) -}
d71d63440bbb90b96d3947907aa613dd
  $s$fApplicativeNoLoggingT8 ::
    GHC.Base.Monad
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fMonadServerPartT -}
cc2f399aa1ab22691fe69acbd5ca625f
  $s$fApplicativeNoLoggingT9 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT1 -}
f0c5c0269e2f36bd775bbd66c1172215
  $s$fApplicativeNoLoggingT_$dFunctor ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT -}
751bc96bca40c57fb8bbc2c06d3d101c
  $s$fApplicativeNoLoggingT_$s$fApplicativeResourceT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                  Main.$s$fApplicativeNoLoggingT4
                  Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$cpure
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c<*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeNoLoggingT4
                     GHC.Base.$fApplicativeIO)
                  Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c*>
                  Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c<* -}
be89d2676caa83e037d9ea65a4c8091e
  $s$fApplicativeNoLoggingT_$s$fApplicativeResourceT1 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                  Main.$s$fApplicativeNoLoggingT10
                  Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$cpure1
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c<*>
                     @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT10
                     Main.$s$fAlternativeServerPartT1)
                  Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c*>1
                  Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c<*1 -}
b2344b58e4be87c00b3f5cc527095cf9
  $s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c*> ::
    Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO b
    -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a141
                   @ b
                   eta :: Control.Monad.Trans.Resource.Internal.ResourceT
                            GHC.Types.IO a141
                   eta1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                             GHC.Types.IO b
                   eta2 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap ->
                 GHC.Base.$fApplicativeIO_$sap
                   @ b
                   @ b
                   ((Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$c<$
                       @ GHC.Types.IO
                       GHC.Base.$fFunctorIO
                       @ (b -> b)
                       @ a141
                       (GHC.Base.id @ b)
                       eta)
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                         <GHC.Types.IO>_R <b -> b>_N)
                      eta2)
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                         <GHC.Types.IO>_R <b>_N)
                      eta2))
                  `cast`
                (forall a141 b.
                 <Control.Monad.Trans.Resource.Internal.ResourceT
                    GHC.Types.IO a141>_R
                 ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                         GHC.Types.IO b>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                               <GHC.Types.IO>_R <b>_N)) -}
d50076cb9183f322c26f6cf29e58bc77
  $s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c*>1 ::
    Control.Monad.Trans.Resource.Internal.ResourceT
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) b
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) b
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a141
                   @ b
                   eta :: Control.Monad.Trans.Resource.Internal.ResourceT
                            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a141
                   eta1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                             (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) b
                   eta2 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap ->
                 Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$c<*>
                   @ GHC.Types.IO
                   Main.$s$fAlternativeServerPartT2
                   GHC.Base.$fMonadIO
                   GHC.Base.$fFunctorIO
                   @ b
                   @ b
                   ((Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$c<$
                       @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                       Main.$s$fAlternativeServerPartT2
                       @ (b -> b)
                       @ a141
                       (GHC.Base.id @ b)
                       eta)
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                         <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                         <b -> b>_N)
                      eta2)
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                         <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                         <b>_N)
                      eta2))
                  `cast`
                (forall a141 b.
                 <Control.Monad.Trans.Resource.Internal.ResourceT
                    (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a141>_R
                 ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) b>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                               <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                               <b>_N)) -}
e8605ca9a18dad44590798a608aeb795
  $s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c<* ::
    Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO b
    -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,A)))><L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a141
                   @ b
                   eta :: Control.Monad.Trans.Resource.Internal.ResourceT
                            GHC.Types.IO a141
                   eta1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                             GHC.Types.IO b
                   eta2 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap ->
                 GHC.Base.$fApplicativeIO_$sap
                   @ b
                   @ a141
                   ((Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$cfmap
                       @ GHC.Types.IO
                       GHC.Base.$fFunctorIO
                       @ a141
                       @ (b -> a141)
                       (GHC.Base.const @ a141 @ b)
                       eta)
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                         <GHC.Types.IO>_R <b -> a141>_N)
                      eta2)
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                         <GHC.Types.IO>_R <b>_N)
                      eta2))
                  `cast`
                (forall a141 b.
                 <Control.Monad.Trans.Resource.Internal.ResourceT
                    GHC.Types.IO a141>_R
                 ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                         GHC.Types.IO b>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                               <GHC.Types.IO>_R <a141>_N)) -}
8192730e921750d02f46ca536899883b
  $s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c<*1 ::
    Control.Monad.Trans.Resource.Internal.ResourceT
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) b
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a141
                   @ b
                   eta :: Control.Monad.Trans.Resource.Internal.ResourceT
                            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a141
                   eta1 :: Control.Monad.Trans.Resource.Internal.ResourceT
                             (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) b
                   eta2 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap ->
                 Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$c<*>
                   @ GHC.Types.IO
                   Main.$s$fAlternativeServerPartT2
                   GHC.Base.$fMonadIO
                   GHC.Base.$fFunctorIO
                   @ b
                   @ a141
                   ((Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$cfmap
                       @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                       Main.$s$fAlternativeServerPartT2
                       @ a141
                       @ (b -> a141)
                       (GHC.Base.const @ a141 @ b)
                       eta)
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                         <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                         <b -> a141>_N)
                      eta2)
                   (eta1
                      `cast`
                    (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                         <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                         <b>_N)
                      eta2))
                  `cast`
                (forall a141 b.
                 <Control.Monad.Trans.Resource.Internal.ResourceT
                    (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a141>_R
                 ->_R <Control.Monad.Trans.Resource.Internal.ResourceT
                         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) b>_R
                 ->_R Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                               <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                               <a141>_N)) -}
008154e41e5e79f5ed7344d9601a6a21
  $s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$cpure ::
    a -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a141
                   eta :: a141
                   eta1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO @ a141 eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a141>_R)
                   eta2)
                  `cast`
                (forall a141.
                 <a141>_R
                 ->_R Trans
                          (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a141>_R))
                          (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                    <GHC.Types.IO>_R <a141>_N))) -}
8b773cd7c4c58df78e5fd5a32ec7d3e4
  $s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$cpure1 ::
    a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a141 eta :: a141 ->
                 let {
                   x :: Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a141
                   = Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$cpure
                       @ GHC.Types.IO
                       Main.$s$fAlternativeServerPartT2
                       GHC.Base.$fMonadIO
                       GHC.Base.$fFunctorIO
                       @ a141
                       eta
                 } in
                 (\ ds :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap ->
                  x)
                   `cast`
                 (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                           <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                           <a141>_N))) -}
f1ae8099a17d2d5d94fd40237709aa57
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  (Control.Monad.Logger.$fFunctorNoLoggingT_$cfmap
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT1)
                  (Control.Monad.Logger.$fFunctorNoLoggingT_$c<$
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT1) -}
5fe5fdebc53718cf132ac72add5c3a04
  $s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT1 ::
    GHC.Base.Functor
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
                  (Control.Monad.Logger.$fFunctorNoLoggingT_$cfmap
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fApplicativeNoLoggingT6)
                  (Control.Monad.Logger.$fFunctorNoLoggingT_$c<$
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fApplicativeNoLoggingT6) -}
0390df02a228267d988776c72f95c69e
  $s$fApplicativeNoLoggingT_$s$fFunctorResourceT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                  (Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$cfmap
                     @ GHC.Types.IO
                     GHC.Base.$fFunctorIO)
                  (Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$c<$
                     @ GHC.Types.IO
                     GHC.Base.$fFunctorIO) -}
b5b959a9d4b00194757a7d0b96760cc4
  $s$fApplicativeNoLoggingT_$s$fFunctorResourceT1 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                  (Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$cfmap
                     @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                     Main.$s$fAlternativeServerPartT2)
                  (Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$c<$
                     @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                     Main.$s$fAlternativeServerPartT2) -}
cf6324a582301d01e86b8a7e210dd55c
  $s$fApplicativeNoLoggingT_$s$fMonadResourceT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                  Main.$s$fApplicativeNoLoggingT3
                  (Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>>=
                     @ GHC.Types.IO
                     Main.$s$fApplicativeNoLoggingT3
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeNoLoggingT3
                     GHC.Base.$fMonadIO)
                  Main.$s$fApplicativeNoLoggingT_$s$fMonadResourceT_$creturn
                  Main.$s$fApplicativeNoLoggingT2 -}
2331636201d85fff922ccf722ef7ae7e
  $s$fApplicativeNoLoggingT_$s$fMonadResourceT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                  Main.$s$fApplicativeNoLoggingT9
                  (Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>>=
                     @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT9
                     Main.$s$fApplicativeNoLoggingT8)
                  (Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>>
                     @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                     Main.$s$fApplicativeNoLoggingT9
                     Main.$s$fApplicativeNoLoggingT8)
                  Main.$s$fApplicativeNoLoggingT_$s$fMonadResourceT_$creturn1
                  Main.$s$fApplicativeNoLoggingT7 -}
7fc53916ad0e2a7322de54f3d4aaadbb
  $s$fApplicativeNoLoggingT_$s$fMonadResourceT_$creturn ::
    a -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$cpure -}
ea3183103669023f0ac4843993635451
  $s$fApplicativeNoLoggingT_$s$fMonadResourceT_$creturn1 ::
    a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$cpure1 -}
bd46834484f0a999b5c755921bfc350b
  $s$fApplicativeNoLoggingT_$s$fMonadServerPartT ::
    GHC.Base.Monad
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                  Main.$s$fAlternativeServerPartT1
                  (Happstack.Server.Internal.Monads.$fMonadServerPartT_$c>>=
                     @ GHC.Types.IO
                     Main.$s$fAlternativeServerPartT1
                     GHC.Base.$fMonadIO)
                  (Happstack.Server.Internal.Monads.$fMonadServerPartT_$c>>
                     @ GHC.Types.IO
                     Main.$s$fAlternativeServerPartT1
                     GHC.Base.$fMonadIO)
                  (Happstack.Server.Internal.Monads.$fMonadServerPartT_$creturn
                     @ GHC.Types.IO
                     Main.$s$fAlternativeServerPartT1
                     GHC.Base.$fMonadIO)
                  (Happstack.Server.Internal.Monads.$fMonadServerPartT_$cfail
                     @ GHC.Types.IO
                     Main.$s$fAlternativeServerPartT1
                     GHC.Base.$fMonadIO) -}
f0fc7b1aaae196d8139dd14853852731
  $s$fApplicativeReaderT_$dFunctor1 ::
    GHC.Base.Functor
      (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeReaderT_$s$fFunctorWebT -}
a1322bfd8beb496e8fe68a50c78026f8
  $s$fApplicativeReaderT_$s$fApplicativeWebT ::
    GHC.Base.Applicative
      (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
                  Main.$s$fApplicativeReaderT_$dFunctor1
                  (Happstack.Server.Internal.Monads.$fApplicativeWebT_$cpure
                     @ GHC.Types.IO
                     Main.$s$fApplicativeReaderT_$dFunctor1
                     Main.$s$fApplicativeErrorT_$dMonad1
                     Main.$s$fApplicativeErrorT_$dFunctor)
                  (Happstack.Server.Internal.Monads.$fApplicativeWebT_$c<*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeReaderT_$dFunctor1
                     Main.$s$fApplicativeErrorT_$dMonad1
                     Main.$s$fApplicativeErrorT_$dFunctor)
                  (Happstack.Server.Internal.Monads.$fApplicativeWebT_$c*>
                     @ GHC.Types.IO
                     Main.$s$fApplicativeReaderT_$dFunctor1
                     Main.$s$fApplicativeErrorT_$dMonad1
                     Main.$s$fApplicativeErrorT_$dFunctor)
                  (Happstack.Server.Internal.Monads.$fApplicativeWebT_$c<*
                     @ GHC.Types.IO
                     Main.$s$fApplicativeReaderT_$dFunctor1
                     Main.$s$fApplicativeErrorT_$dMonad1
                     Main.$s$fApplicativeErrorT_$dFunctor) -}
fc75942297f1f585db59fd7234729680
  $s$fApplicativeReaderT_$s$fFunctorWebT ::
    GHC.Base.Functor
      (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
                  (Happstack.Server.Internal.Monads.$fFunctorWebT_$cfmap
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dFunctor)
                  (Happstack.Server.Internal.Monads.$fFunctorWebT_$c<$
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dFunctor) -}
2f830be12ea30f623b69bdc4489b35c8
  $s$fMonadBaseControlbServerPartT ::
    Control.Monad.Trans.Control.MonadBaseControl
      GHC.Types.IO
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                  Main.$s$fMonadBaseControlbServerPartT2
                  Main.$s$fMonadBaseControlbServerPartT_$s$fMonadBaseControlbServerPartT_$cliftBaseWith
                  (Happstack.Server.Internal.Monads.$fMonadBaseControlbServerPartT_$crestoreM
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     Main.$s$fMonadBaseControlbServerPartT2
                     Control.Monad.Trans.Control.$fMonadBaseControlIOIO) -}
fa49894570cb9ddd8e40a3b80ec6b33e
  $s$fMonadBaseControlbServerPartT1 ::
    (Control.Monad.Trans.Control.Run
       Happstack.Server.Internal.Monads.ServerPartT
     -> GHC.Types.IO a42)
    -> Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a42
  {- Unfolding: (\ @ a141 ->
                 Happstack.Server.Internal.Monads.$fMonadTransControlServerPartT_$cliftWith
                   @ GHC.Types.IO
                   @ a141
                   GHC.Base.$fMonadIO) -}
1f82d77040bee71dcf9f0265f7c708d0
  $s$fMonadBaseControlbServerPartT2 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadBaseControlbServerPartT_$s$fMonadBasebServerPartT -}
b59ba43f7bacf99ca49ef46ee0543996
  $s$fMonadBaseControlbServerPartT_$s$fMonadBaseControlbServerPartT_$cliftBaseWith ::
    (Control.Monad.Trans.Control.RunInBase
       (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
       GHC.Types.IO
     -> GHC.Types.IO a)
    -> Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a
  {- Arity: 1, Strictness: <L,C(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a141
                   ds :: Control.Monad.Trans.Control.RunInBase
                           (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                           GHC.Types.IO
                         -> GHC.Types.IO a141 ->
                 Main.$s$fMonadBaseControlbServerPartT_$sdefaultLiftBaseWith
                   @ a141
                   (\ ds1 :: Control.Monad.Trans.Control.RunInBaseDefault
                               Happstack.Server.Internal.Monads.ServerPartT
                               GHC.Types.IO
                               GHC.Types.IO ->
                    ds
                      ds1
                        `cast`
                      (forall a142.
                       <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a142>_R
                       ->_R (GHC.Types.IO
                               (Sub (Sym (Happstack.Server.Internal.Monads.TFCo:R:StMServerPartTa[0]
                                              <GHC.Types.IO>_N <a142>_N))))_R))) -}
f48eafd981c45811dd1b223432e424f0
  $s$fMonadBaseControlbServerPartT_$s$fMonadBasebServerPartT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$s$fAlternativeServerPartT1
                  GHC.Base.$fMonadIO
                  Main.$s$fApplicativeNoLoggingT8
                  Main.$s$fMonadBaseControlbServerPartT_$s$fMonadBasebServerPartT_$cliftBase -}
49785109100e531d6da1fbef78dfc16a
  $s$fMonadBaseControlbServerPartT_$s$fMonadBasebServerPartT_$cliftBase ::
    GHC.Types.IO α
    -> Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO α
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α eta :: GHC.Types.IO α ->
                 let {
                   a141 :: Control.Monad.Trans.Maybe.MaybeT
                             GHC.Types.IO
                             (Data.Either.Either Happstack.Server.Internal.Types.Response α,
                              Happstack.Server.Internal.Monads.SetAppend
                                (Data.Monoid.Dual
                                   (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                   = Happstack.Server.Internal.Monads.$fMonadTransControlServerPartT2
                       @ GHC.Types.IO
                       @ α
                       GHC.Base.$fMonadIO
                       (GHC.Base.id @ (GHC.Types.IO α) eta)
                 } in
                 (\ ds :: Happstack.Server.Internal.Types.Request -> a141)
                   `cast`
                 (Trans
                      (<Happstack.Server.Internal.Types.Request>_R
                       ->_R Trans
                                (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                          <Happstack.Server.Internal.Monads.SetAppend
                                             (Data.Monoid.Dual
                                                (Data.Monoid.Endo
                                                   Happstack.Server.Internal.Types.Response))>_N
                                          <Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO>_R
                                          <Data.Either.Either
                                             Happstack.Server.Internal.Types.Response α>_N))
                                (Trans
                                     (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                               <Happstack.Server.Internal.Types.Response>_N
                                               (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                    <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                    GHC.Types.IO>_N)
                                               <α>_N))
                                     (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                               <GHC.Types.IO>_R) <α>_N)))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                     <Happstack.Server.Internal.Types.Request>_R
                                     <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                     <α>_N))
                           (Sym (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                     <GHC.Types.IO>_R) <α>_N)))) -}
57e5c43fa801b1c1348bacb2ceaa0eb5
  $s$fMonadBaseControlbServerPartT_$sdefaultLiftBaseWith ::
    (Control.Monad.Trans.Control.RunInBaseDefault
       Happstack.Server.Internal.Monads.ServerPartT
       GHC.Types.IO
       GHC.Types.IO
     -> GHC.Types.IO a42)
    -> Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a42
  {- Arity: 1, Strictness: <L,C(U)>,
     Unfolding: (\ @ a141
                   eta :: Control.Monad.Trans.Control.RunInBaseDefault
                            Happstack.Server.Internal.Monads.ServerPartT
                            GHC.Types.IO
                            GHC.Types.IO
                          -> GHC.Types.IO a141 ->
                 Main.$s$fMonadBaseControlbServerPartT1
                   @ a141
                   (\ run :: Control.Monad.Trans.Control.Run
                               Happstack.Server.Internal.Monads.ServerPartT ->
                    let {
                      poly_g :: forall a142.
                                Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a142
                                -> GHC.Types.IO
                                     (Control.Monad.Trans.Control.StT
                                        Happstack.Server.Internal.Monads.ServerPartT a142)
                      = \ @ a142 -> run @ GHC.Types.IO @ a142 GHC.Base.$fMonadIO
                    } in
                    eta
                      (\ @ a142
                         x :: Happstack.Server.Internal.Monads.ServerPartT
                                GHC.Types.IO a142 ->
                       poly_g @ a142 x)
                        `cast`
                      (forall a142.
                       <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO a142>_R
                       ->_R (GHC.Types.IO
                               (Sub (Sym (Control.Monad.Trans.Control.TFCo:R:StMIOa[0]
                                              <Control.Monad.Trans.Control.StT
                                                 Happstack.Server.Internal.Monads.ServerPartT
                                                 a142>_N))))_R))) -}
059408ab503d4559f39c29f674df56c0
  $s$fMonadErrorT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Error.ErrorT
         Happstack.Server.Internal.Types.Response
         (Happstack.Server.Internal.Monads.FilterT
            Happstack.Server.Internal.Types.Response
            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Error.ErrorT
                       Happstack.Server.Internal.Types.Response
                       (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)))
                  Main.$s$fMonadErrorT_a22
                  (Control.Monad.Trans.Error.$fMonadErrorT_$c>>=
                     @ Happstack.Server.Internal.Types.Response
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fMonadErrorT_a22
                     Main.$s$fApplicativeErrorT_$dMonad3
                     Happstack.Server.Internal.Types.$fErrorResponse)
                  Main.$s$fMonadErrorT_$s$fMonadErrorT_$c>>
                  (Control.Monad.Trans.Error.$fMonadErrorT_$creturn
                     @ Happstack.Server.Internal.Types.Response
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fMonadErrorT_a22
                     Main.$s$fApplicativeErrorT_$dMonad3
                     Happstack.Server.Internal.Types.$fErrorResponse)
                  (Control.Monad.Trans.Error.$fMonadErrorT_$cfail
                     @ Happstack.Server.Internal.Types.Response
                     @ (Happstack.Server.Internal.Monads.FilterT
                          Happstack.Server.Internal.Types.Response
                          (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     Main.$s$fMonadErrorT_a22
                     Main.$s$fApplicativeErrorT_$dMonad3
                     Happstack.Server.Internal.Types.$fErrorResponse) -}
7967768cef915c76763fc4dfb1cf25cf
  $s$fMonadErrorT_$s$fMonadErrorT_$c>> ::
    Control.Monad.Trans.Error.ErrorT
      Happstack.Server.Internal.Types.Response
      (Happstack.Server.Internal.Monads.FilterT
         Happstack.Server.Internal.Types.Response
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
      a
    -> Control.Monad.Trans.Error.ErrorT
         Happstack.Server.Internal.Types.Response
         (Happstack.Server.Internal.Monads.FilterT
            Happstack.Server.Internal.Types.Response
            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
         b
    -> Control.Monad.Trans.Error.ErrorT
         Happstack.Server.Internal.Types.Response
         (Happstack.Server.Internal.Monads.FilterT
            Happstack.Server.Internal.Types.Response
            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(LS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a141
                   @ b
                   m1 :: Control.Monad.Trans.Error.ErrorT
                           Happstack.Server.Internal.Types.Response
                           (Happstack.Server.Internal.Monads.FilterT
                              Happstack.Server.Internal.Types.Response
                              (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                           a141
                   k :: Control.Monad.Trans.Error.ErrorT
                          Happstack.Server.Internal.Types.Response
                          (Happstack.Server.Internal.Monads.FilterT
                             Happstack.Server.Internal.Types.Response
                             (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                          b ->
                 Control.Monad.Trans.Error.$fMonadErrorT_$c>>=
                   @ Happstack.Server.Internal.Types.Response
                   @ (Happstack.Server.Internal.Monads.FilterT
                        Happstack.Server.Internal.Types.Response
                        (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                   Main.$s$fMonadErrorT_a22
                   Main.$s$fApplicativeErrorT_$dMonad3
                   Happstack.Server.Internal.Types.$fErrorResponse
                   @ a141
                   @ b
                   m1
                   (\ ds :: a141 -> k)) -}
8835a5a2a0500bfe111309ffc52b79b4
  $s$fMonadErrorT_a22 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Error.ErrorT
         Happstack.Server.Internal.Types.Response
         (Happstack.Server.Internal.Monads.FilterT
            Happstack.Server.Internal.Types.Response
            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fApplicativeErrorT -}
940f674e60c21a73e01491af1e71d5a1
  $s$fMonadIOFilterT ::
    Control.Monad.IO.Class.MonadIO
      (Happstack.Server.Internal.Monads.FilterT
         Happstack.Server.Internal.Types.Response
         (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.FilterT
                       Happstack.Server.Internal.Types.Response
                       (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                  Main.$s$fApplicativeErrorT_$dMonad3
                  (\ @ a141 ->
                   let {
                     $dMonoid1 :: GHC.Base.Monoid
                                    (Happstack.Server.Internal.Monads.SetAppend
                                       (Data.Monoid.Dual
                                          (Data.Monoid.Endo
                                             Happstack.Server.Internal.Types.Response)))
                     = Happstack.Server.Internal.Monads.$fMonoidSetAppend
                         @ (Data.Monoid.Dual
                              (Data.Monoid.Endo Happstack.Server.Internal.Types.Response))
                         Happstack.Server.Internal.Monads.$fMonadTransControlFilterT_$s$fMonoidDual
                   } in
                   let {
                     a142 :: GHC.Base.Functor
                               (Control.Monad.Trans.Writer.Lazy.WriterT
                                  (Happstack.Server.Internal.Monads.SetAppend
                                     (Data.Monoid.Dual
                                        (Data.Monoid.Endo
                                           Happstack.Server.Internal.Types.Response)))
                                  (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     = Control.Monad.Trans.Writer.Lazy.$fFunctorWriterT
                         @ (Happstack.Server.Internal.Monads.SetAppend
                              (Data.Monoid.Dual
                                 (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                         @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                         Main.$s$fApplicativeErrorT_$dFunctor1
                   } in
                   let {
                     a143 :: GHC.Base.Applicative
                               (Control.Monad.Trans.Writer.Lazy.WriterT
                                  (Happstack.Server.Internal.Monads.SetAppend
                                     (Data.Monoid.Dual
                                        (Data.Monoid.Endo
                                           Happstack.Server.Internal.Types.Response)))
                                  (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     = Control.Monad.Trans.Writer.Lazy.$fApplicativeWriterT
                         @ (Happstack.Server.Internal.Monads.SetAppend
                              (Data.Monoid.Dual
                                 (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                         @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                         a142
                         $dMonoid1
                         Main.$s$fApplicativeErrorT_$dApplicative1
                   } in
                   let {
                     a144 :: GHC.Base.Monad
                               (Control.Monad.Trans.Writer.Lazy.WriterT
                                  (Happstack.Server.Internal.Monads.SetAppend
                                     (Data.Monoid.Dual
                                        (Data.Monoid.Endo
                                           Happstack.Server.Internal.Types.Response)))
                                  (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                     = Control.Monad.Trans.Writer.Lazy.$fMonadWriterT
                         @ (Happstack.Server.Internal.Monads.SetAppend
                              (Data.Monoid.Dual
                                 (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                         @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                         a143
                         $dMonoid1
                         Main.$s$fApplicativeErrorT_$dMonad2
                   } in
                   (\ x :: GHC.Types.IO a141 ->
                    Control.Monad.Trans.Writer.Lazy.$fMonadIOWriterT_$cliftIO
                      @ (Happstack.Server.Internal.Monads.SetAppend
                           (Data.Monoid.Dual
                              (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                      @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                      a144
                      $dMonoid1
                      Main.$s$fMonadIOFilterT_a24
                      @ a141
                      x)
                     `cast`
                   (<GHC.Types.IO a141>_R
                    ->_R Sym (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                  <Happstack.Server.Internal.Types.Response>_N) <Control.Monad.Trans.Maybe.MaybeT
                                                                                   GHC.Types.IO>_N <a141>_N)) -}
9b3c763973b9f49052d6511a5f0af9de
  $s$fMonadIOFilterT_$s$fMonadIOMaybeT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                  Main.$s$fApplicativeErrorT_$dMonad2
                  (Control.Monad.Trans.Maybe.$fMonadIOMaybeT_$cliftIO
                     @ GHC.Types.IO
                     Main.$s$fApplicativeErrorT_$dMonad2
                     Control.Monad.IO.Class.$fMonadIOIO) -}
d0931e57ffea10959c22b12e9e19e27d
  $s$fMonadIOFilterT_a24 ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIOFilterT_$s$fMonadIOMaybeT -}
a029efc564888c0dde0db1682ed5be46
  $s$fMonadIONoLoggingT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fMonadIONoLoggingT_$dMonad
                  (Control.Monad.Logger.$fMonadIONoLoggingT_$cliftIO
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT_$dMonad
                     Main.$s$fMonadIONoLoggingT_$dMonadIO) -}
3d9f530a1a86061b1a596914aaf654c1
  $s$fMonadIONoLoggingT1 ::
    GHC.Base.String
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a141 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Control.Monad.Logger.NoLoggingT
                        (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                        a141)
                   eta) -}
3e80d23c7bf6814438bc041c22eab490
  $s$fMonadIONoLoggingT2 ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
                  Main.$s$fMonadIONoLoggingT4
                  (Control.Monad.Logger.$fMonadIONoLoggingT_$cliftIO
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fMonadIONoLoggingT4
                     Main.$s$fMonadIONoLoggingT3) -}
86eba5e2192d6b9256b71efbc4430cc0
  $s$fMonadIONoLoggingT3 ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIONoLoggingT_$s$fMonadIOResourceT1 -}
54a0022fe932e1885c385d64149c42a0
  $s$fMonadIONoLoggingT4 ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT1 -}
3fa3385fe3c18c791360bfcb133cb54d
  $s$fMonadIONoLoggingT5 ::
    GHC.Base.String
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
         a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a141 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Control.Monad.Logger.NoLoggingT
                        (Control.Monad.Trans.Resource.Internal.ResourceT
                           (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                        a141)
                   eta) -}
1d5224d05d3e97ff6e0ab901a626d080
  $s$fMonadIONoLoggingT6 ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT5 -}
537892ba1c721d350e4eaf85d1ae019f
  $s$fMonadIONoLoggingT_$dApplicative ::
    GHC.Base.Applicative
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fApplicativeNoLoggingT -}
192f382e823c951d655521d5e3877bba
  $s$fMonadIONoLoggingT_$dMonad ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT -}
ba65eb8e943941da226146a33c381f85
  $s$fMonadIONoLoggingT_$dMonadIO ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fMonadIONoLoggingT_$s$fMonadIOResourceT -}
0254f16e3f8dba645dc407bc0e1a215f
  $s$fMonadIONoLoggingT_$s$fMonadIOReaderT_$cliftIO ::
    GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT
         Happstack.Server.Internal.Types.Request
         (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
         a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U,U))><L,A><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a141 eta :: GHC.Types.IO a141 ->
                 let {
                   a142 :: Control.Monad.Trans.Error.ErrorT
                             Happstack.Server.Internal.Types.Response
                             (Happstack.Server.Internal.Monads.FilterT
                                Happstack.Server.Internal.Types.Response
                                (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                             a141
                   = Control.Monad.Trans.Error.$fMonadIOErrorT_$cliftIO
                       @ Happstack.Server.Internal.Types.Response
                       @ (Happstack.Server.Internal.Monads.FilterT
                            Happstack.Server.Internal.Types.Response
                            (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                       Main.$s$fMonadErrorT
                       Happstack.Server.Internal.Types.$fErrorResponse
                       Main.$s$fMonadIOFilterT
                       @ a141
                       eta
                 } in
                 (\ ds :: Happstack.Server.Internal.Types.Request -> a142)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                           <Happstack.Server.Internal.Types.Request>_R
                           (Happstack.Server.Internal.Monads.NTCo:WebT[0] <GHC.Types.IO>_R)
                           <a141>_N))) -}
d93103eb5105de611e33044d6bee7f33
  $s$fMonadIONoLoggingT_$s$fMonadIOResourceT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                  Main.$s$fApplicativeNoLoggingT1
                  Main.$s$fMonadIONoLoggingT_$s$fMonadIOResourceT_$cliftIO -}
c9d178233864dc6040ccad4603e70d59
  $s$fMonadIONoLoggingT_$s$fMonadIOResourceT1 ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                  Main.$s$fApplicativeNoLoggingT6
                  Main.$s$fMonadIONoLoggingT_$s$fMonadIOResourceT_$cliftIO1 -}
ff474c71ddda48ff93436a60ed1a76a9
  $s$fMonadIONoLoggingT_$s$fMonadIOResourceT_$cliftIO ::
    GHC.Types.IO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a141 eta :: GHC.Types.IO a141 ->
                 let {
                   eta1 :: GHC.Types.IO a141 = GHC.Base.id @ (GHC.Types.IO a141) eta
                 } in
                 (\ ds :: GHC.IORef.IORef
                            Control.Monad.Trans.Resource.Internal.ReleaseMap ->
                  eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                           <GHC.Types.IO>_R <a141>_N))) -}
c3f585a1e25a115c793682f4a8f15c10
  $s$fMonadIONoLoggingT_$s$fMonadIOResourceT_$cliftIO1 ::
    GHC.Types.IO a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO) a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U,U))><L,A><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a141
                   eta :: GHC.Types.IO a141
                   eta1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap
                   eta2 :: Happstack.Server.Internal.Types.Request
                   eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ((Main.$s$fMonadIONoLoggingT_$s$fMonadIOReaderT_$cliftIO
                     @ a141
                     eta)
                    `cast`
                  (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                       <Happstack.Server.Internal.Types.Request>_R
                       <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                       <a141>_N)
                    eta2)
                   `cast`
                 (Trans
                      (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                           <GHC.Types.IO>_R <a141>_N)
                      (Trans
                           (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                <Happstack.Server.Internal.Types.Response>_N
                                (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                     <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                     GHC.Types.IO>_N)
                                <a141>_N)
                           (Trans
                                (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                     <Happstack.Server.Internal.Monads.FilterFun
                                        Happstack.Server.Internal.Types.Response>_N
                                     <Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO>_R
                                     <Data.Either.Either
                                        Happstack.Server.Internal.Types.Response a141>_N)
                                (Trans
                                     (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                          <GHC.Types.IO>_R
                                          <(Data.Either.Either
                                              Happstack.Server.Internal.Types.Response a141,
                                            Happstack.Server.Internal.Monads.FilterFun
                                              Happstack.Server.Internal.Types.Response)>_N)
                                     (GHC.Types.NTCo:IO[0]
                                          <GHC.Base.Maybe
                                             (Data.Either.Either
                                                Happstack.Server.Internal.Types.Response a141,
                                              Happstack.Server.Internal.Monads.FilterFun
                                                Happstack.Server.Internal.Types.Response)>_R)))))
                   eta3)
                  `cast`
                (forall a141.
                 <GHC.Types.IO a141>_R
                 ->_R Trans
                          (<GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                           ->_R Trans
                                    (<Happstack.Server.Internal.Types.Request>_R
                                     ->_R Trans
                                              (Sym (GHC.Types.NTCo:IO[0]
                                                        <GHC.Base.Maybe
                                                           (Data.Either.Either
                                                              Happstack.Server.Internal.Types.Response
                                                              a141,
                                                            Happstack.Server.Internal.Monads.FilterFun
                                                              Happstack.Server.Internal.Types.Response)>_R))
                                              (Trans
                                                   (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                             <GHC.Types.IO>_R
                                                             <(Data.Either.Either
                                                                 Happstack.Server.Internal.Types.Response
                                                                 a141,
                                                               Happstack.Server.Internal.Monads.FilterFun
                                                                 Happstack.Server.Internal.Types.Response)>_N))
                                                   (Trans
                                                        (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                                  <Happstack.Server.Internal.Monads.FilterFun
                                                                     Happstack.Server.Internal.Types.Response>_N
                                                                  <Control.Monad.Trans.Maybe.MaybeT
                                                                     GHC.Types.IO>_R
                                                                  <Data.Either.Either
                                                                     Happstack.Server.Internal.Types.Response
                                                                     a141>_N))
                                                        (Trans
                                                             (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                                       <Happstack.Server.Internal.Types.Response>_N
                                                                       (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                            <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                            GHC.Types.IO>_N)
                                                                       <a141>_N))
                                                             (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                                       <GHC.Types.IO>_R) <a141>_N)))))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                   <Happstack.Server.Internal.Types.Request>_R
                                                   <Happstack.Server.Internal.Monads.WebT
                                                      GHC.Types.IO>_R
                                                   <a141>_N))
                                         (Sym (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                                   <GHC.Types.IO>_R) <a141>_N)))
                          (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                    <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                                    <a141>_N))) -}
910dfebd8eabf3d2f07ec849287fc7b8
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  Main.$s$fMonadIONoLoggingT_$dApplicative
                  (Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT_$dApplicative
                     Main.$s$fApplicativeNoLoggingT1)
                  Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>
                  (Control.Monad.Logger.$fMonadNoLoggingT_$creturn
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                     Main.$s$fMonadIONoLoggingT_$dApplicative
                     Main.$s$fApplicativeNoLoggingT1)
                  Main.$s$fMonadIONoLoggingT1 -}
27c11ae4a8f44587373e2422fa31d2ba
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT1 ::
    GHC.Base.Monad
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Logger.NoLoggingT
                       (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
                  Main.$s$fMonadIONoLoggingT6
                  (Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fMonadIONoLoggingT6
                     Main.$s$fApplicativeNoLoggingT6)
                  Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>1
                  (Control.Monad.Logger.$fMonadNoLoggingT_$creturn
                     @ (Control.Monad.Trans.Resource.Internal.ResourceT
                          (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                     Main.$s$fMonadIONoLoggingT6
                     Main.$s$fApplicativeNoLoggingT6)
                  Main.$s$fMonadIONoLoggingT5 -}
57aab49719bea1506db4f7ca79eb60ad
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>> ::
    Control.Monad.Logger.NoLoggingT
      (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a141
                   @ b
                   m1 :: Control.Monad.Logger.NoLoggingT
                           (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) a141
                   k :: Control.Monad.Logger.NoLoggingT
                          (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) b ->
                 Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                   @ (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                   Main.$s$fMonadIONoLoggingT_$dApplicative
                   Main.$s$fApplicativeNoLoggingT1
                   @ a141
                   @ b
                   m1
                   (\ ds :: a141 -> k)) -}
e9cdae7ddcaac1e124920f51b6ae7b5d
  $s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>1 ::
    Control.Monad.Logger.NoLoggingT
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
      a
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
         b
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
         b
  {- Arity: 3, Strictness: <L,1*C1(U)><L,C(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a141
                   @ b
                   m1 :: Control.Monad.Logger.NoLoggingT
                           (Control.Monad.Trans.Resource.Internal.ResourceT
                              (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                           a141
                   k :: Control.Monad.Logger.NoLoggingT
                          (Control.Monad.Trans.Resource.Internal.ResourceT
                             (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                          b ->
                 Control.Monad.Logger.$fMonadNoLoggingT_$c>>=
                   @ (Control.Monad.Trans.Resource.Internal.ResourceT
                        (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                   Main.$s$fMonadIONoLoggingT6
                   Main.$s$fApplicativeNoLoggingT6
                   @ a141
                   @ b
                   m1
                   (\ ds :: a141 -> k)) -}
ac3a88da9b0c789b78124525e816457e
  $s$fMonadIOServerPartT ::
    Control.Monad.IO.Class.MonadIO
      (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                  Main.$s$fApplicativeNoLoggingT8
                  Main.$s$fMonadIONoLoggingT_$s$fMonadIOReaderT_$cliftIO
                    `cast`
                  (forall a141.
                   <GHC.Types.IO a141>_R
                   ->_R Sym (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                 <GHC.Types.IO>_R) <a141>_N) -}
186def7a2952fba9703bc6b69b1e6f4c
  $sencode3 ::
    [Database.Persist.Class.PersistEntity.Entity Main.User]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Database.Persist.Class.PersistEntity.Entity Main.User] ->
                 case Main.$wa7 w of ww { (##) ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
41b0d9c7af824c65d4bf72cc0b04667f
  $sencode4 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><L,U> -}
8e8b79741e84ac9edbc4b6d6d306f75b
  $triQ :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Main.$fConstructorUser1
                   Main.$fDataUser2) -}
7b2450040d6f4c23d495eabc32a29295
  $triR :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Main.$fConstructorSong1
                   Main.$fDataSong2) -}
30f64e6add490aec93ccc4b3fe8598db
  $trj7 :: Data.Data.DataType
  {- Strictness: m,
     Unfolding: (Data.Data.DataType
                   Main.$fConstructorPlaylist1
                   Main.$fDataPlaylist19) -}
49814fff28b1b1012fadefc14273c7cd
  $w$cgmapM ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> GHC.Base.String -> GHC.Base.String -> m Main.Song
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   w :: GHC.Base.Monad m
                   w1 :: forall d. Data.Data.Data d => d -> m d
                   ww :: GHC.Base.String
                   ww1 :: GHC.Base.String ->
                 let {
                   k :: forall d b. Data.Data.Data d => m (d -> b) -> d -> m b
                     {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
                   = \ @ d
                       @ b
                       $dData1 :: Data.Data.Data d
                       c :: m (d -> b)[OneShot]
                       x :: d[OneShot] ->
                     let {
                       lvl80 :: m d = w1 @ d $dData1 x
                     } in
                     GHC.Base.>>=
                       @ m
                       w
                       @ (d -> b)
                       @ b
                       c
                       (\ c' :: d -> b ->
                        GHC.Base.>>=
                          @ m
                          w
                          @ d
                          @ b
                          lvl80
                          (\ x' :: d -> GHC.Base.return @ m w @ b (c' x')))
                 } in
                 k @ GHC.Base.String
                   @ Main.Song
                   Data.Text.$fDataText_$s$fData[]
                   (k @ GHC.Base.String
                      @ (GHC.Base.String -> Main.Song)
                      Data.Text.$fDataText_$s$fData[]
                      (GHC.Base.return
                         @ m
                         w
                         @ (GHC.Base.String -> GHC.Base.String -> Main.Song)
                         Main.$WSong)
                      ww)
                   ww1) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $w$cgmapM1 ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> GHC.Base.String -> m Main.User
  {- Arity: 3,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   w :: GHC.Base.Monad m
                   w1 :: forall d. Data.Data.Data d => d -> m d
                   ww :: GHC.Base.String ->
                 let {
                   lvl80 :: m GHC.Base.String
                   = w1 @ GHC.Base.String Data.Text.$fDataText_$s$fData[] ww
                 } in
                 GHC.Base.>>=
                   @ m
                   w
                   @ (GHC.Base.String -> Main.User)
                   @ Main.User
                   (GHC.Base.return
                      @ m
                      w
                      @ (GHC.Base.String -> Main.User)
                      Main.$WUser)
                   (\ c' :: GHC.Base.String -> Main.User ->
                    GHC.Base.>>=
                      @ m
                      w
                      @ GHC.Base.String
                      @ Main.User
                      lvl80
                      (\ x' :: GHC.Base.String ->
                       GHC.Base.return @ m w @ Main.User (c' x')))) -}
261e99bff73ad820977b6332d53528b9
  $w$cgmapM2 ::
    GHC.Base.Monad m =>
    (forall d. Data.Data.Data d => d -> m d)
    -> [Main.Song] -> [Main.User] -> m Main.Playlist
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   w :: GHC.Base.Monad m
                   w1 :: forall d. Data.Data.Data d => d -> m d
                   ww :: [Main.Song]
                   ww1 :: [Main.User] ->
                 let {
                   k :: forall d b. Data.Data.Data d => m (d -> b) -> d -> m b
                     {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
                   = \ @ d
                       @ b
                       $dData1 :: Data.Data.Data d
                       c :: m (d -> b)[OneShot]
                       x :: d[OneShot] ->
                     let {
                       lvl80 :: m d = w1 @ d $dData1 x
                     } in
                     GHC.Base.>>=
                       @ m
                       w
                       @ (d -> b)
                       @ b
                       c
                       (\ c' :: d -> b ->
                        GHC.Base.>>=
                          @ m
                          w
                          @ d
                          @ b
                          lvl80
                          (\ x' :: d -> GHC.Base.return @ m w @ b (c' x')))
                 } in
                 k @ [Main.User]
                   @ Main.Playlist
                   Main.$fDataPlaylist_$s$fData[]1
                   (k @ [Main.Song]
                      @ ([Main.User] -> Main.Playlist)
                      Main.$fDataPlaylist_$s$fData[]
                      (GHC.Base.return
                         @ m
                         w
                         @ ([Main.Song] -> [Main.User] -> Main.Playlist)
                         Main.$WPlaylist)
                      ww)
                   ww1) -}
49814fff28b1b1012fadefc14273c7cd
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Database.Persist.Class.PersistEntity.Key Main.Song
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Database.Persist.Class.PersistEntity.Key Main.Song
                   w1 :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowKey5
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowKey4
                          (Database.Persist.Sql.Orphan.PersistStore.$w$cshowsPrec
                             0
                             w `cast`
                             (Trans (Sub (Main.TFCo:R:KeySong[0])) (Main.NTCo:R:KeySong[0]))
                             (GHC.Base.++ @ GHC.Types.Char Main.$fShowKey3 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) }) -}
261e99bff73ad820977b6332d53528b9
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Database.Persist.Class.PersistEntity.Key Main.Playlist
                   w1 :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowKey8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowKey7
                          (Database.Persist.Sql.Orphan.PersistStore.$w$cshowsPrec
                             0
                             w `cast`
                             (Trans
                                  (Sub (Main.TFCo:R:KeyPlaylist[0])) (Main.NTCo:R:KeyPlaylist[0]))
                             (GHC.Base.++ @ GHC.Types.Char Main.$fShowKey3 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) }) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Database.Persist.Class.PersistEntity.Key Main.User
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Database.Persist.Class.PersistEntity.Key Main.User
                   w1 :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowKey11
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowKey10
                          (Database.Persist.Sql.Orphan.PersistStore.$w$cshowsPrec
                             0
                             w `cast`
                             (Trans (Sub (Main.TFCo:R:KeyUser[0])) (Main.NTCo:R:KeyUser[0]))
                             (GHC.Base.++ @ GHC.Types.Char Main.$fShowKey3 x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) }) -}
ac160cf5cfba539a456df2b4525a9490
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> [Main.Song] -> [Main.User] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><S,U><S,U><L,U>, Inline: [0] -}
8af1914a561aa62cfdfea75d8cefa69f
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><S,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   ww2 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowSong5
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowSong4
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Main.$fShowSong3
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Main.$fShowSong2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows6
                                            (GHC.Show.showLitString
                                               ww2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.shows6
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Main.$fShowKey3
                                                     x))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
c075b795415adedd666ec3490dc9c487
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowUser3
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows6
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Base.++ @ GHC.Types.Char Main.$fShowKey3 x))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowUser2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowUser2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
bd14e1b5541bc12ee5011c07c4d56d24
  $w$ctoJSON ::
    GHC.Base.String
    -> GHC.Base.String -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Base.String ww1 :: GHC.Base.String ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Main.$fPersistEntitySong31,
                            case GHC.ST.runSTRep
                                   @ Data.Text.Internal.Text
                                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                                    Main.$fToJSONEntity3
                                      @ s1
                                      (Data.Text.Array.MArray @ s1 ipv1)
                                      Main.$fPersistFieldUser4
                                      ww
                                      0
                                      ipv }) of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Data.Aeson.Types.Internal.String dt })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Main.$fPersistEntitySong29,
                               case GHC.ST.runSTRep
                                      @ Data.Text.Internal.Text
                                      (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ s1
                                              8
                                              s2 of ds1 { (#,#) ipv ipv1 ->
                                       Main.$fToJSONEntity2
                                         @ s1
                                         (Data.Text.Array.MArray @ s1 ipv1)
                                         Main.$fPersistFieldUser4
                                         ww1
                                         0
                                         ipv }) of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                               Data.Aeson.Types.Internal.String dt })
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) }) -}
5d60104a5bd454bb118d702a3e6dfe16
  $w$ctoJSON1 ::
    GHC.Base.String -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Base.String ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Main.$fFromJSONEntity7,
                            case GHC.ST.runSTRep
                                   @ Data.Text.Internal.Text
                                   (\ @ s1 s2 :: GHC.Prim.State# s1[OneShot] ->
                                    case GHC.Prim.newByteArray# @ s1 8 s2 of ds1 { (#,#) ipv ipv1 ->
                                    Main.$fToJSONEntity4
                                      @ s1
                                      (Data.Text.Array.MArray @ s1 ipv1)
                                      Main.$fPersistFieldUser4
                                      ww
                                      0
                                      ipv }) of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Data.Aeson.Types.Internal.String dt })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) }) -}
49814fff28b1b1012fadefc14273c7cd
  $w$ctoPersistValue ::
    Main.Song
    -> (# [(Data.Text.Internal.Text,
            Database.Persist.Types.Base.PersistValue)] #)
  {- Arity: 1, Strictness: <L,1*U(U,U)>, Inline: [0],
     Unfolding: (\ w :: Main.Song ->
                 (# Main.$fPersistFieldSong_go
                      Main.$fPersistFieldSong1
                      (case w of wild { Main.Song x x1 ->
                       GHC.Types.:
                         @ Database.Persist.Types.Base.PersistValue
                         (case Database.Persist.Class.PersistField.$w$ctoPersistValue4
                                 x of ww { (##) ww1 ->
                          Database.Persist.Types.Base.PersistText ww1 })
                         (GHC.Types.:
                            @ Database.Persist.Types.Base.PersistValue
                            (case Database.Persist.Class.PersistField.$w$ctoPersistValue4
                                    x1 of ww { (##) ww1 ->
                             Database.Persist.Types.Base.PersistText ww1 })
                            (GHC.Types.[]
                               @ Database.Persist.Types.Base.PersistValue)) }) #)) -}
261e99bff73ad820977b6332d53528b9
  $w$ctoPersistValue1 ::
    Main.Playlist
    -> (# [(Data.Text.Internal.Text,
            Database.Persist.Types.Base.PersistValue)] #)
  {- Arity: 1, Strictness: <L,1*U(U,U)>, Inline: [0],
     Unfolding: (\ w :: Main.Playlist ->
                 (# Main.$fPersistFieldPlaylist_go2
                      Main.$fPersistFieldPlaylist1
                      (case w of wild { Main.Playlist x x1 ->
                       GHC.Types.:
                         @ Database.Persist.Types.Base.PersistValue
                         (Database.Persist.Types.Base.PersistList
                            (Main.$fPersistFieldPlaylist_go1 x))
                         (GHC.Types.:
                            @ Database.Persist.Types.Base.PersistValue
                            (Database.Persist.Types.Base.PersistList
                               (Main.$fPersistFieldPlaylist_go x1))
                            (GHC.Types.[]
                               @ Database.Persist.Types.Base.PersistValue)) }) #)) -}
49814fff28b1b1012fadefc14273c7cd
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.Song
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
104c856626c21ff0b062210ab9e01500
  $wa1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [Main.User]
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Array# Data.Aeson.Types.Internal.Value ->
                 letrec {
                   $wgo :: GHC.Prim.Int#
                           -> Data.Aeson.Types.Internal.Parser [Main.User]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww3 :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww3 ww1) of wild2 {
                       GHC.Types.False
                       -> let {
                            r :: Data.Aeson.Types.Internal.Parser [Main.User]
                            = $wgo (GHC.Prim.+# ww3 1)
                          } in
                          let {
                            m :: Data.Aeson.Types.Internal.Parser Main.User
                            = case GHC.Prim.indexArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     ww2
                                     (GHC.Prim.+# ww ww3) of ds2 { (##) ipv ->
                              Main.$fFromJSONEntity0_$cparseJSON2 ipv }
                          } in
                          (\ @ (f :: * -> *)
                             @ r1
                             kf :: Data.Aeson.Types.Internal.Failure f r1
                             ks :: Data.Aeson.Types.Internal.Success [Main.User] f r1 ->
                           m `cast` (Data.Aeson.Types.Internal.NTCo:Parser[0] <Main.User>_R)
                             @ f
                             @ r1
                             kf
                             (\ a141 :: Main.User ->
                              r `cast` (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.User]>_R)
                                @ f
                                @ r1
                                kf
                                (\ a142 :: [Main.User] -> ks (GHC.Types.: @ Main.User a141 a142))))
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.User]>_R))
                       GHC.Types.True
                       -> Main.$fFromJSONEntity2
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.User]>_R)) }
                 } in
                 $wgo 0) -}
1aefdb7ed9c5dd651d33ba459d5c5765
  $wa10 ::
    Happstack.Server.Internal.Types.Method
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either Happstack.Server.Internal.Types.Response (),
             Happstack.Server.Internal.Monads.FilterFun
               Happstack.Server.Internal.Types.Response) #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Happstack.Server.Internal.Types.Method
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ww of wild {
                   DEFAULT -> (# w, Main.main42 #)
                   Happstack.Server.Internal.Types.POST
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        w
                   Happstack.Server.Internal.Types.PUT
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        w
                   Happstack.Server.Internal.Types.DELETE
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        w
                   Happstack.Server.Internal.Types.TRACE
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        w
                   Happstack.Server.Internal.Types.OPTIONS
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        w
                   Happstack.Server.Internal.Types.CONNECT
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        w
                   Happstack.Server.Internal.Types.PATCH
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        w
                   Happstack.Server.Internal.Types.EXTENSION a141
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        w }) -}
b0e025c425730d35c9bef9be4c691945
  $wa11 ::
    (Data.Text.Internal.Text
     -> GHC.Types.IO Database.Persist.Sql.Types.Statement)
    -> GHC.IORef.IORef
         (Data.Map.Base.Map
            Data.Text.Internal.Text Database.Persist.Sql.Types.Statement)
    -> ([Database.Persist.Types.Base.EntityDef]
        -> (Data.Text.Internal.Text
            -> GHC.Types.IO Database.Persist.Sql.Types.Statement)
        -> Database.Persist.Types.Base.EntityDef
        -> GHC.Types.IO
             (Data.Either.Either
                [Data.Text.Internal.Text]
                [(GHC.Types.Bool, Data.Text.Internal.Text)]))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (((), [Data.Text.Internal.Text]),
           [(GHC.Types.Bool, Database.Persist.Sql.Types.Sql)]) #)
  {- Arity: 4,
     Strictness: <L,C(C1(U(U,U(C(U(U,A)),C(U(U,U)),C(C1(U(U,U))),C(C1(C1(C1(U))))))))><L,U(U)><C(C(C(C(S(LS))))),C(C1(C1(C1(U(U,1*U)))))><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: Data.Text.Internal.Text
                         -> GHC.Types.IO Database.Persist.Sql.Types.Statement
                   ww1 :: GHC.IORef.IORef
                            (Data.Map.Base.Map
                               Data.Text.Internal.Text Database.Persist.Sql.Types.Statement)
                   ww2 :: [Database.Persist.Types.Base.EntityDef]
                          -> (Data.Text.Internal.Text
                              -> GHC.Types.IO Database.Persist.Sql.Types.Statement)
                          -> Database.Persist.Types.Base.EntityDef
                          -> GHC.Types.IO
                               (Data.Either.Either
                                  [Data.Text.Internal.Text]
                                  [(GHC.Types.Bool, Data.Text.Internal.Text)])
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Database.Persist.Sql.Migration.$wa
                        Main.main48
                        Main.$fPersistEntityUser5
                        ww
                        ww1
                        ww2
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Database.Persist.Sql.Migration.$wa
                        Main.main48
                        Main.$fPersistEntityPlaylist21
                        ww
                        ww1
                        ww2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Database.Persist.Sql.Migration.$wa
                        Main.main48
                        Main.$fPersistEntitySong15
                        ww
                        ww1
                        ww2
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    (let {
                       ds4 :: ((), [Data.Text.Internal.Text])
                       = case ipv5 of wild { (,) a141 w6 -> a141 }
                     } in
                     (case ds4 of wild { (,) b1 w' -> b1 },
                      case ipv1 of wild { (,) a141 w6 ->
                      case a141 of wild1 { (,) a142 w1 ->
                      GHC.Base.++
                        @ Data.Text.Internal.Text
                        w1
                        (case ipv3 of wild2 { (,) a143 w2 ->
                         case a143 of wild3 { (,) a144 w3 ->
                         GHC.Base.++
                           @ Data.Text.Internal.Text
                           w3
                           (case ds4 of wild4 { (,) b1 w' -> w' }) } }) } }),
                     case ipv1 of wild { (,) a141 w6 ->
                     GHC.Base.++
                       @ (GHC.Types.Bool, Database.Persist.Sql.Types.Sql)
                       w6
                       (case ipv3 of wild1 { (,) a142 w1 ->
                        GHC.Base.++
                          @ (GHC.Types.Bool, Database.Persist.Sql.Types.Sql)
                          (GHC.Base.++
                             @ (GHC.Types.Bool, Database.Persist.Sql.Types.Sql)
                             w1
                             (case ipv5 of wild2 { (,) a143 w2 ->
                              GHC.Base.++
                                @ (GHC.Types.Bool, Database.Persist.Sql.Types.Sql)
                                w2
                                (GHC.Types.[]
                                   @ (GHC.Types.Bool, Database.Persist.Sql.Types.Sql)) }))
                          (GHC.Types.[]
                             @ (GHC.Types.Bool,
                                Database.Persist.Sql.Types.Sql)) }) }) #) } } }) -}
a94695e192ced6647e79bc03a5ffb9d8
  $wa2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [Main.Song]
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   ww2 :: GHC.Prim.Array# Data.Aeson.Types.Internal.Value ->
                 letrec {
                   $wgo :: GHC.Prim.Int#
                           -> Data.Aeson.Types.Internal.Parser [Main.Song]
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww3 :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww3 ww1) of wild2 {
                       GHC.Types.False
                       -> let {
                            r :: Data.Aeson.Types.Internal.Parser [Main.Song]
                            = $wgo (GHC.Prim.+# ww3 1)
                          } in
                          let {
                            m :: Data.Aeson.Types.Internal.Parser Main.Song
                            = case GHC.Prim.indexArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     ww2
                                     (GHC.Prim.+# ww ww3) of ds2 { (##) ipv ->
                              Main.$fFromJSONEntity_$cparseJSON1 ipv }
                          } in
                          (\ @ (f :: * -> *)
                             @ r1
                             kf :: Data.Aeson.Types.Internal.Failure f r1
                             ks :: Data.Aeson.Types.Internal.Success [Main.Song] f r1 ->
                           m `cast` (Data.Aeson.Types.Internal.NTCo:Parser[0] <Main.Song>_R)
                             @ f
                             @ r1
                             kf
                             (\ a141 :: Main.Song ->
                              r `cast` (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.Song]>_R)
                                @ f
                                @ r1
                                kf
                                (\ a142 :: [Main.Song] -> ks (GHC.Types.: @ Main.Song a141 a142))))
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.Song]>_R))
                       GHC.Types.True
                       -> Main.$fFromJSONEntity11
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.NTCo:Parser[0] <[Main.Song]>_R)) }
                 } in
                 $wgo 0) -}
261e99bff73ad820977b6332d53528b9
  $wa3 ::
    GHC.Prim.Int#
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.Playlist
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  $wa4 ::
    GHC.Prim.Int#
    -> forall b.
       (Database.Persist.Class.PersistEntity.Key Main.User
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
ce88362f84fe2cb1adced03b61e04f88
  $wa5 :: [Main.User] -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [Main.User] ->
                 case GHC.ST.runSTRep
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        (\ @ s s1 :: GHC.Prim.State# s[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                0
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         case Main.$fToJSONEntity6
                                @ s
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                    @ Data.Aeson.Types.Internal.Value
                                    0
                                    0
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.TFCo:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        s)>_N <Data.Aeson.Types.Internal.Value>_N),
                                 Main.$fToJSONEntity5)
                                (GHC.Base.map
                                   @ Main.User
                                   @ Data.Aeson.Types.Internal.Value
                                   Main.$fToJSONEntity0_$ctoJSON2
                                   w)
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                        <s>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.TFCo:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               s)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                @ Data.Aeson.Types.Internal.Value
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.TFCo:R:PrimStateST[0] <s>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              dt
                              dt6
                              ipv3 #) } } } } } }) of dt { Data.Vector.Vector ipv ipv1 ipv2 ->
                 (# dt #) }) -}
9427165dcf40a8f7a7289bccbbd94dd6
  $wa6 :: [Main.Song] -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [Main.Song] ->
                 case GHC.ST.runSTRep
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        (\ @ s s1 :: GHC.Prim.State# s[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                0
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         case Main.$fToJSONEntity7
                                @ s
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                    @ Data.Aeson.Types.Internal.Value
                                    0
                                    0
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.TFCo:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        s)>_N <Data.Aeson.Types.Internal.Value>_N),
                                 Main.$fToJSONEntity5)
                                (GHC.Base.map
                                   @ Main.Song
                                   @ Data.Aeson.Types.Internal.Value
                                   Main.$fToJSONEntity_$ctoJSON1
                                   w)
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                        <s>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.TFCo:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               s)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                @ Data.Aeson.Types.Internal.Value
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.TFCo:R:PrimStateST[0] <s>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              dt
                              dt6
                              ipv3 #) } } } } } }) of dt { Data.Vector.Vector ipv ipv1 ipv2 ->
                 (# dt #) }) -}
87b8713360ce7e8a2324ed9933f6fafa
  $wa7 ::
    [Database.Persist.Class.PersistEntity.Entity Main.User]
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [Database.Persist.Class.PersistEntity.Entity
                           Main.User] ->
                 case GHC.ST.runSTRep
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        (\ @ s s1 :: GHC.Prim.State# s[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                0
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         case Main.$sencode4
                                @ s
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                    @ Data.Aeson.Types.Internal.Value
                                    0
                                    0
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.TFCo:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        s)>_N <Data.Aeson.Types.Internal.Value>_N),
                                 Main.$fToJSONEntity5)
                                (GHC.Base.map
                                   @ (Database.Persist.Class.PersistEntity.Entity Main.User)
                                   @ Data.Aeson.Types.Internal.Value
                                   Main.$fToJSONEntity1_$ctoJSON
                                   w)
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                        <s>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.TFCo:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               s)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState (GHC.ST.ST s))
                                @ Data.Aeson.Types.Internal.Value
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.TFCo:R:PrimStateST[0]
                                             <s>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.TFCo:R:PrimStateST[0] <s>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              dt
                              dt6
                              ipv3 #) } } } } } }) of dt { Data.Vector.Vector ipv ipv1 ipv2 ->
                 (# dt #) }) -}
ec7344be93d39a67190a05f28ea1f98b
  $wa8 ::
    [GHC.Base.String]
    -> Happstack.Server.Internal.Monads.ServerPartT
         GHC.Types.IO Happstack.Server.Internal.Types.Response
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.String] ->
                 case ww of wild1 {
                   []
                   -> Main.main45
                        `cast`
                      (Trans
                           (<Happstack.Server.Internal.Types.Request>_R
                            ->_R Trans
                                     (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                               <Happstack.Server.Internal.Monads.SetAppend
                                                  (Data.Monoid.Dual
                                                     (Data.Monoid.Endo
                                                        Happstack.Server.Internal.Types.Response))>_N
                                               <Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO>_R
                                               <Data.Either.Either
                                                  Happstack.Server.Internal.Types.Response
                                                  Happstack.Server.Internal.Types.Response>_N))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                    <Happstack.Server.Internal.Types.Response>_N
                                                    (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                         <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                         GHC.Types.IO>_N)
                                                    <Happstack.Server.Internal.Types.Response>_N))
                                          (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                    <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))
                           (Trans
                                (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                          <Happstack.Server.Internal.Types.Request>_R
                                          <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                          <Happstack.Server.Internal.Types.Response>_N))
                                (Sym (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                          <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))
                   : p xs
                   -> case GHC.Base.eqString p Main.main_eta of wild2 {
                        GHC.Types.False
                        -> Main.main45
                             `cast`
                           (Trans
                                (<Happstack.Server.Internal.Types.Request>_R
                                 ->_R Trans
                                          (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                    <Happstack.Server.Internal.Monads.SetAppend
                                                       (Data.Monoid.Dual
                                                          (Data.Monoid.Endo
                                                             Happstack.Server.Internal.Types.Response))>_N
                                                    <Control.Monad.Trans.Maybe.MaybeT
                                                       GHC.Types.IO>_R
                                                    <Data.Either.Either
                                                       Happstack.Server.Internal.Types.Response
                                                       Happstack.Server.Internal.Types.Response>_N))
                                          (Trans
                                               (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                         <Happstack.Server.Internal.Types.Response>_N
                                                         (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                              <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                              GHC.Types.IO>_N)
                                                         <Happstack.Server.Internal.Types.Response>_N))
                                               (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                         <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Happstack.Server.Internal.Types.Request>_R
                                               <Happstack.Server.Internal.Monads.WebT
                                                  GHC.Types.IO>_R
                                               <Happstack.Server.Internal.Types.Response>_N))
                                     (Sym (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                               <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))
                        GHC.Types.True
                        -> (\ eta2 :: Happstack.Server.Internal.Types.Request
                              eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                            let {
                              w3 :: Happstack.Server.Internal.Types.Request
                              = case eta2 of wild3 { Happstack.Server.Internal.Types.Request ds ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ->
                                Happstack.Server.Internal.Types.Request
                                  ds
                                  ds16
                                  xs
                                  ds18
                                  ds19
                                  ds20
                                  ds21
                                  ds22
                                  ds23
                                  ds24
                                  ds25
                                  ds26 }
                            } in
                            case (Main.main33
                                    `cast`
                                  (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Happstack.Server.Internal.Types.Request>_R
                                       <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                       <Happstack.Server.Internal.Types.Response>_N)
                                    w3)
                                   `cast`
                                 (Trans
                                      (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                           <GHC.Types.IO>_R <Happstack.Server.Internal.Types.Response>_N)
                                      (Trans
                                           (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                <Happstack.Server.Internal.Types.Response>_N
                                                (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                     <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                     GHC.Types.IO>_N)
                                                <Happstack.Server.Internal.Types.Response>_N)
                                           (Trans
                                                (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                     <Happstack.Server.Internal.Monads.SetAppend
                                                        (Data.Monoid.Dual
                                                           (Data.Monoid.Endo
                                                              Happstack.Server.Internal.Types.Response))>_N
                                                     <Control.Monad.Trans.Maybe.MaybeT
                                                        GHC.Types.IO>_R
                                                     <Data.Either.Either
                                                        Happstack.Server.Internal.Types.Response
                                                        Happstack.Server.Internal.Types.Response>_N)
                                                (Trans
                                                     (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                          <GHC.Types.IO>_R
                                                          <(Data.Either.Either
                                                              Happstack.Server.Internal.Types.Response
                                                              Happstack.Server.Internal.Types.Response,
                                                            Happstack.Server.Internal.Monads.SetAppend
                                                              (Data.Monoid.Dual
                                                                 (Data.Monoid.Endo
                                                                    Happstack.Server.Internal.Types.Response)))>_N)
                                                     (GHC.Types.NTCo:IO[0]
                                                          <GHC.Base.Maybe
                                                             (Data.Either.Either
                                                                Happstack.Server.Internal.Types.Response
                                                                Happstack.Server.Internal.Types.Response,
                                                              Happstack.Server.Internal.Monads.SetAppend
                                                                (Data.Monoid.Dual
                                                                   (Data.Monoid.Endo
                                                                      Happstack.Server.Internal.Types.Response)))>_R)))))
                                   eta of ds1 { (#,#) ipv ipv1 ->
                            case ipv1 of wild {
                              GHC.Base.Nothing
                              -> case (Main.main4
                                         `cast`
                                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                            <Happstack.Server.Internal.Types.Request>_R
                                            <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                            <Happstack.Server.Internal.Types.Response>_N)
                                         w3)
                                        `cast`
                                      (Trans
                                           (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                <GHC.Types.IO>_R <Happstack.Server.Internal.Types.Response>_N)
                                           (Trans
                                                (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                     <Happstack.Server.Internal.Types.Response>_N
                                                     (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                          <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                          GHC.Types.IO>_N)
                                                     <Happstack.Server.Internal.Types.Response>_N)
                                                (Trans
                                                     (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                          <Happstack.Server.Internal.Monads.SetAppend
                                                             (Data.Monoid.Dual
                                                                (Data.Monoid.Endo
                                                                   Happstack.Server.Internal.Types.Response))>_N
                                                          <Control.Monad.Trans.Maybe.MaybeT
                                                             GHC.Types.IO>_R
                                                          <Data.Either.Either
                                                             Happstack.Server.Internal.Types.Response
                                                             Happstack.Server.Internal.Types.Response>_N)
                                                     (Trans
                                                          (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                               <GHC.Types.IO>_R
                                                               <(Data.Either.Either
                                                                   Happstack.Server.Internal.Types.Response
                                                                   Happstack.Server.Internal.Types.Response,
                                                                 Happstack.Server.Internal.Monads.SetAppend
                                                                   (Data.Monoid.Dual
                                                                      (Data.Monoid.Endo
                                                                         Happstack.Server.Internal.Types.Response)))>_N)
                                                          (GHC.Types.NTCo:IO[0]
                                                               <GHC.Base.Maybe
                                                                  (Data.Either.Either
                                                                     Happstack.Server.Internal.Types.Response
                                                                     Happstack.Server.Internal.Types.Response,
                                                                   Happstack.Server.Internal.Monads.SetAppend
                                                                     (Data.Monoid.Dual
                                                                        (Data.Monoid.Endo
                                                                           Happstack.Server.Internal.Types.Response)))>_R)))))
                                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                                 case ipv3 of wild4 {
                                   GHC.Base.Nothing
                                   -> (Happstack.Server.Internal.Monads.$wa1
                                         @ GHC.Types.IO
                                         Control.Monad.Trans.Error.$fMonadPlusIO
                                         @ Happstack.Server.Internal.Types.Response)
                                        `cast`
                                      (Trans
                                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                <GHC.Types.IO>_R
                                                <(Data.Either.Either
                                                    Happstack.Server.Internal.Types.Response
                                                    Happstack.Server.Internal.Types.Response,
                                                  Happstack.Server.Internal.Monads.SetAppend
                                                    (Data.Monoid.Dual
                                                       (Data.Monoid.Endo
                                                          Happstack.Server.Internal.Types.Response)))>_N)
                                           (GHC.Types.NTCo:IO[0]
                                                <GHC.Base.Maybe
                                                   (Data.Either.Either
                                                      Happstack.Server.Internal.Types.Response
                                                      Happstack.Server.Internal.Types.Response,
                                                    Happstack.Server.Internal.Monads.SetAppend
                                                      (Data.Monoid.Dual
                                                         (Data.Monoid.Endo
                                                            Happstack.Server.Internal.Types.Response)))>_R))
                                        ipv2
                                   GHC.Base.Just ds -> ds2 } }
                              GHC.Base.Just ds -> ds1 } })
                             `cast`
                           (Trans
                                (<Happstack.Server.Internal.Types.Request>_R
                                 ->_R Trans
                                          (Sym (GHC.Types.NTCo:IO[0]
                                                    <GHC.Base.Maybe
                                                       (Data.Either.Either
                                                          Happstack.Server.Internal.Types.Response
                                                          Happstack.Server.Internal.Types.Response,
                                                        Happstack.Server.Internal.Monads.FilterFun
                                                          Happstack.Server.Internal.Types.Response)>_R))
                                          (Trans
                                               (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                         <GHC.Types.IO>_R
                                                         <(Data.Either.Either
                                                             Happstack.Server.Internal.Types.Response
                                                             Happstack.Server.Internal.Types.Response,
                                                           Happstack.Server.Internal.Monads.FilterFun
                                                             Happstack.Server.Internal.Types.Response)>_N))
                                               (Trans
                                                    (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                              <Happstack.Server.Internal.Monads.FilterFun
                                                                 Happstack.Server.Internal.Types.Response>_N
                                                              <Control.Monad.Trans.Maybe.MaybeT
                                                                 GHC.Types.IO>_R
                                                              <Data.Either.Either
                                                                 Happstack.Server.Internal.Types.Response
                                                                 Happstack.Server.Internal.Types.Response>_N))
                                                    (Trans
                                                         (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                                   <Happstack.Server.Internal.Types.Response>_N
                                                                   (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                        <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                        GHC.Types.IO>_N)
                                                                   <Happstack.Server.Internal.Types.Response>_N))
                                                         (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                                   <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Happstack.Server.Internal.Types.Request>_R
                                               <Happstack.Server.Internal.Monads.WebT
                                                  GHC.Types.IO>_R
                                               <Happstack.Server.Internal.Types.Response>_N))
                                     (Sym (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                               <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N))) } }) -}
eea5b7a0ae06f868c8d0fd4388eb1fab
  $wa9 ::
    GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Happstack.Server.Internal.Types.Response
               Data.ByteString.Lazy.Internal.ByteString,
             Happstack.Server.Internal.Monads.FilterFun
               Happstack.Server.Internal.Types.Response) #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Base.Maybe
                          Happstack.Server.Internal.Types.RqBody
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of wild {
                   GHC.Base.Nothing -> (# w1, Main.main21 #)
                   GHC.Base.Just rqbody
                   -> (# w1,
                         GHC.Base.Just
                           @ (Data.Either.Either
                                Happstack.Server.Internal.Types.Response
                                Data.ByteString.Lazy.Internal.ByteString,
                              Happstack.Server.Internal.Monads.SetAppend
                                (Data.Monoid.Dual
                                   (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                           (Data.Either.Right
                              @ Happstack.Server.Internal.Types.Response
                              @ Data.ByteString.Lazy.Internal.ByteString
                              rqbody `cast` (Happstack.Server.Internal.Types.NTCo:RqBody[0]),
                            Main.main11) #) }) -}
4b3f700594fa6608a72e447d4f0677ca
  abstract(True) C1_0Playlist
c2e91f779826e83b88580050b787238e
  abstract(True) C1_0Song
fc64664b38d85c933e4c014cc4bb577e
  abstract(True) C1_0User
2313f1afc8fb4edd03b9fb6f1bcc56b7
  abstract(True) D1Playlist
cc197cf2738de2f52fdff74c4ade9c8b
  abstract(True) D1Song
87b5311e9012040d900b7ca090214d2f
  abstract(True) D1User
261e99bff73ad820977b6332d53528b9
  data Playlist
    = Playlist {playlistSongs :: ![Main.Song],
                playlistCollaborators :: ![Main.User]}
ad4bf48890e0cef5d9fae704b7f9930b
  type PlaylistId =
    Database.Persist.Class.PersistEntity.Key Main.Playlist
261e99bff73ad820977b6332d53528b9
  data instance Database.Persist.Class.PersistEntity.EntityField
                  Main.Playlist typ where
    PlaylistId :: typ
                  ~ Database.Persist.Class.PersistEntity.Key Main.Playlist =>
                  Database.Persist.Class.PersistEntity.EntityField Main.Playlist typ
    PlaylistSongs :: typ ~ [Main.Song] =>
                     Database.Persist.Class.PersistEntity.EntityField Main.Playlist typ
    PlaylistCollaborators :: typ ~ [Main.User] =>
                             Database.Persist.Class.PersistEntity.EntityField Main.Playlist typ
    RecFlag: Recursive
49814fff28b1b1012fadefc14273c7cd
  data instance Database.Persist.Class.PersistEntity.EntityField
                  Main.Song typ where
    SongId :: typ
              ~ Database.Persist.Class.PersistEntity.Key Main.Song =>
              Database.Persist.Class.PersistEntity.EntityField Main.Song typ
    SongName :: typ ~ GHC.Base.String =>
                Database.Persist.Class.PersistEntity.EntityField Main.Song typ
    SongUrl :: typ ~ GHC.Base.String =>
               Database.Persist.Class.PersistEntity.EntityField Main.Song typ
    RecFlag: Recursive
ef3f6fb37c44a5c754ab9177dd6f7c32
  data instance Database.Persist.Class.PersistEntity.EntityField
                  Main.User typ where
    UserId :: typ
              ~ Database.Persist.Class.PersistEntity.Key Main.User =>
              Database.Persist.Class.PersistEntity.EntityField Main.User typ
    UserSoundCloudId :: typ ~ GHC.Base.String =>
                        Database.Persist.Class.PersistEntity.EntityField Main.User typ
    RecFlag: Recursive
261e99bff73ad820977b6332d53528b9
  newtype instance Database.Persist.Class.PersistEntity.Key
                     Main.Playlist
    = PlaylistKey {unPlaylistKey :: Database.Persist.Class.PersistStore.BackendKey
                                      Database.Persist.Sql.Types.SqlBackend}
    RecFlag: Recursive
49814fff28b1b1012fadefc14273c7cd
  newtype instance Database.Persist.Class.PersistEntity.Key Main.Song
    = SongKey {unSongKey :: Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.SqlBackend}
    RecFlag: Recursive
ef3f6fb37c44a5c754ab9177dd6f7c32
  newtype instance Database.Persist.Class.PersistEntity.Key Main.User
    = UserKey {unUserKey :: Database.Persist.Class.PersistStore.BackendKey
                              Database.Persist.Sql.Types.SqlBackend}
    RecFlag: Recursive
2a28eff9ba92434c2b35bbbd7895cb06
  data instance Database.Persist.Class.PersistEntity.Unique
                  Main.Playlist
    RecFlag: Recursive
062c68a745d591501198a2a31ad95280
  data instance Database.Persist.Class.PersistEntity.Unique Main.Song
    RecFlag: Recursive
ddfffa977998432495482eacdc0fea7d
  data instance Database.Persist.Class.PersistEntity.Unique Main.User
    RecFlag: Recursive
261e99bff73ad820977b6332d53528b9
  axiom Rep_Playlist::
      GHC.Generics.Rep Main.Playlist
        = GHC.Generics.D1
            Main.D1Playlist
            (GHC.Generics.C1
               Main.C1_0Playlist
               (GHC.Generics.S1
                  Main.S1_0_0Playlist (GHC.Generics.Rec0 [Main.Song])
                GHC.Generics.:*: GHC.Generics.S1
                                   Main.S1_0_1Playlist (GHC.Generics.Rec0 [Main.User])))
49814fff28b1b1012fadefc14273c7cd
  axiom Rep_Song::
      GHC.Generics.Rep Main.Song
        = GHC.Generics.D1
            Main.D1Song
            (GHC.Generics.C1
               Main.C1_0Song
               (GHC.Generics.S1
                  Main.S1_0_0Song (GHC.Generics.Rec0 GHC.Base.String)
                GHC.Generics.:*: GHC.Generics.S1
                                   Main.S1_0_1Song (GHC.Generics.Rec0 GHC.Base.String)))
ef3f6fb37c44a5c754ab9177dd6f7c32
  axiom Rep_User::
      GHC.Generics.Rep Main.User
        = GHC.Generics.D1
            Main.D1User
            (GHC.Generics.C1
               Main.C1_0User
               (GHC.Generics.S1
                  Main.S1_0_0User (GHC.Generics.Rec0 GHC.Base.String)))
8e52bdb27bdc7b45a5fe777abc7caf1b
  abstract(True) S1_0_0Playlist
b053b3a7e4c89d823a53c9352de61429
  abstract(True) S1_0_0Song
ef3f6fb37c44a5c754ab9177dd6f7c32
  abstract(True) S1_0_0User
261e99bff73ad820977b6332d53528b9
  abstract(True) S1_0_1Playlist
49814fff28b1b1012fadefc14273c7cd
  abstract(True) S1_0_1Song
49814fff28b1b1012fadefc14273c7cd
  data Song
    = Song {songName :: !GHC.Base.String, songUrl :: !GHC.Base.String}
ec1df0c9ac407c8599d8d528e39e409a
  type SongId = Database.Persist.Class.PersistEntity.Key Main.Song
261e99bff73ad820977b6332d53528b9
  axiom TFCo:R:EntityFieldPlaylisttyp::
      Database.Persist.Class.PersistEntity.EntityField Main.Playlist
        = Main.R:EntityFieldPlaylisttyp
49814fff28b1b1012fadefc14273c7cd
  axiom TFCo:R:EntityFieldSongtyp::
      Database.Persist.Class.PersistEntity.EntityField Main.Song
        = Main.R:EntityFieldSongtyp
ef3f6fb37c44a5c754ab9177dd6f7c32
  axiom TFCo:R:EntityFieldUsertyp::
      Database.Persist.Class.PersistEntity.EntityField Main.User
        = Main.R:EntityFieldUsertyp
261e99bff73ad820977b6332d53528b9
  axiom TFCo:R:KeyPlaylist::
      Database.Persist.Class.PersistEntity.Key Main.Playlist
        = Main.R:KeyPlaylist
49814fff28b1b1012fadefc14273c7cd
  axiom TFCo:R:KeySong::
      Database.Persist.Class.PersistEntity.Key Main.Song = Main.R:KeySong
ef3f6fb37c44a5c754ab9177dd6f7c32
  axiom TFCo:R:KeyUser::
      Database.Persist.Class.PersistEntity.Key Main.User = Main.R:KeyUser
261e99bff73ad820977b6332d53528b9
  axiom TFCo:R:PersistEntityBackendPlaylist::
      Database.Persist.Class.PersistEntity.PersistEntityBackend
        Main.Playlist
        = Database.Persist.Sql.Types.SqlBackend
49814fff28b1b1012fadefc14273c7cd
  axiom TFCo:R:PersistEntityBackendSong::
      Database.Persist.Class.PersistEntity.PersistEntityBackend Main.Song
        = Database.Persist.Sql.Types.SqlBackend
ef3f6fb37c44a5c754ab9177dd6f7c32
  axiom TFCo:R:PersistEntityBackendUser::
      Database.Persist.Class.PersistEntity.PersistEntityBackend Main.User
        = Database.Persist.Sql.Types.SqlBackend
2a28eff9ba92434c2b35bbbd7895cb06
  axiom TFCo:R:UniquePlaylist::
      Database.Persist.Class.PersistEntity.Unique Main.Playlist
        = Main.R:UniquePlaylist
062c68a745d591501198a2a31ad95280
  axiom TFCo:R:UniqueSong::
      Database.Persist.Class.PersistEntity.Unique Main.Song
        = Main.R:UniqueSong
ddfffa977998432495482eacdc0fea7d
  axiom TFCo:R:UniqueUser::
      Database.Persist.Class.PersistEntity.Unique Main.User
        = Main.R:UniqueUser
ef3f6fb37c44a5c754ab9177dd6f7c32
  data User = User {userSoundCloudId :: !GHC.Base.String}
352e3b160d707a16dbf8516a189b3a85
  type UserId = Database.Persist.Class.PersistEntity.Key Main.User
a31bab9958225d2efa624f2cccfef3fb
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
4911334d86431c19f32cbf1ddee6a725
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Main.main59
                         Main.main16
                         Main.main46
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                   <Database.Persist.Sql.Types.SqlBackend>_R
                                   <Control.Monad.Logger.NoLoggingT
                                      (Control.Monad.Trans.Resource.Internal.ResourceT
                                         GHC.Types.IO)>_R
                                   <()>_N)))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 Happstack.Server.SimpleHTTP.$wa
                   @ GHC.Types.IO
                   @ Happstack.Server.Internal.Types.Response
                   @ Happstack.Server.Internal.Types.Response
                   Happstack.Server.Response.$fToMessageResponse
                   (GHC.Base.id
                      @ (Happstack.Server.Internal.Monads.UnWebT
                           GHC.Types.IO Happstack.Server.Internal.Types.Response))
                   Happstack.Server.Internal.Types.nullConf
                   Main.main2
                     `cast`
                   (Trans
                        (<Happstack.Server.Internal.Types.Request>_R
                         ->_R Trans
                                  (Sym (GHC.Types.NTCo:IO[0]
                                            <GHC.Base.Maybe
                                               (Data.Either.Either
                                                  Happstack.Server.Internal.Types.Response
                                                  Happstack.Server.Internal.Types.Response,
                                                Happstack.Server.Internal.Monads.FilterFun
                                                  Happstack.Server.Internal.Types.Response)>_R))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                 <GHC.Types.IO>_R
                                                 <(Data.Either.Either
                                                     Happstack.Server.Internal.Types.Response
                                                     Happstack.Server.Internal.Types.Response,
                                                   Happstack.Server.Internal.Monads.FilterFun
                                                     Happstack.Server.Internal.Types.Response)>_N))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                      <Happstack.Server.Internal.Monads.FilterFun
                                                         Happstack.Server.Internal.Types.Response>_N
                                                      <Control.Monad.Trans.Maybe.MaybeT
                                                         GHC.Types.IO>_R
                                                      <Data.Either.Either
                                                         Happstack.Server.Internal.Types.Response
                                                         Happstack.Server.Internal.Types.Response>_N))
                                            (Trans
                                                 (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                           <Happstack.Server.Internal.Types.Response>_N
                                                           (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                GHC.Types.IO>_N)
                                                           <Happstack.Server.Internal.Types.Response>_N))
                                                 (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                           <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Happstack.Server.Internal.Types.Request>_R
                                       <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                       <Happstack.Server.Internal.Types.Response>_N))
                             (Sym (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                       <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))
                   ipv }) -}
6833f93c07c44f94afb8b3881954ab3d
  main10 ::
    Control.Monad.Trans.Reader.ReaderT
      Happstack.Server.Internal.Types.Request
      (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
      ()
    -> Control.Monad.Trans.Reader.ReaderT
         Happstack.Server.Internal.Types.Request
         (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
         Happstack.Server.Internal.Types.Response
    -> Control.Monad.Trans.Reader.ReaderT
         Happstack.Server.Internal.Types.Request
         (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
         Happstack.Server.Internal.Types.Response
  {- Unfolding: (Happstack.Server.Internal.Monads.$wa14
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ ()
                   @ Happstack.Server.Internal.Types.Response) -}
2cf90a3176e95c18eb1bcb48ebe645d1
  main11 ::
    Happstack.Server.Internal.Monads.SetAppend
      (Data.Monoid.Dual
         (Data.Monoid.Endo Happstack.Server.Internal.Types.Response))
  {- HasNoCafRefs,
     Unfolding: (Happstack.Server.Internal.Monads.Append
                   @ (Data.Monoid.Dual
                        (Data.Monoid.Endo Happstack.Server.Internal.Types.Response))
                   (GHC.Base.id @ Happstack.Server.Internal.Types.Response)
                     `cast`
                   (Sym (Data.Monoid.NTCo:Dual[0]
                             (Data.Monoid.NTCo:Endo[0]
                                  <Happstack.Server.Internal.Types.Response>_R)))) -}
17f6c633f7c6bb250aad349f0035db4e
  main12 ::
    Data.Attoparsec.ByteString.Lazy.Result
      Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Attoparsec.ByteString.Lazy.parse_$sgo
                   @ Data.Aeson.Types.Internal.Value
                   Main.main13) -}
cf057f6a14c85d2fe2cd4ce8fb6f39a9
  main13 ::
    Data.Attoparsec.Internal.Types.IResult
      Data.ByteString.Internal.ByteString Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Parser.Internal.$wa3
                   @ Data.Aeson.Types.Internal.Value
                   __NULL
                   Data.ByteString.Internal.$fMonoidByteString3
                   0
                   0
                   0
                   0
                   0
                   Data.Attoparsec.Internal.Types.Incomplete
                   (Data.Attoparsec.ByteString.Internal.failK
                      @ Data.Aeson.Types.Internal.Value)
                     `cast`
                   (Sub (Sym (Data.Attoparsec.Internal.Types.TFCo:R:StateByteString[0]))
                    ->_R <Data.Attoparsec.Internal.Types.Pos
                          -> Data.Attoparsec.Internal.Types.More
                          -> [GHC.Base.String]
                          -> GHC.Base.String
                          -> Data.Attoparsec.Internal.Types.IResult
                               Data.ByteString.Internal.ByteString
                               Data.Aeson.Types.Internal.Value>_R)
                   (Data.Attoparsec.ByteString.Internal.successK
                      @ Data.Aeson.Types.Internal.Value)
                     `cast`
                   (Sub (Sym (Data.Attoparsec.Internal.Types.TFCo:R:StateByteString[0]))
                    ->_R <Data.Attoparsec.Internal.Types.Pos
                          -> Data.Attoparsec.Internal.Types.More
                          -> Data.Aeson.Types.Internal.Value
                          -> Data.Attoparsec.Internal.Types.IResult
                               Data.ByteString.Internal.ByteString
                               Data.Aeson.Types.Internal.Value>_R)) -}
09a48dabbbae421151aadc28ee2a44dd
  main14 ::
    Main.User
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Control.Monad.Logger.NoLoggingT
            (Control.Monad.Trans.Resource.Internal.ResourceT
               (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
         (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistStore.$w$cinsert
                   @ Main.User
                   @ (Control.Monad.Logger.NoLoggingT
                        (Control.Monad.Trans.Resource.Internal.ResourceT
                           (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
                   Main.$s$fMonadIONoLoggingT2
                   Main.$fPersistEntityUser) -}
c277afef8a2ce6ada26d2a831e0a23cb
  main15 ::
    Database.Persist.Sql.Types.SqlPersistT
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
      (Database.Persist.Class.PersistEntity.Key Main.User)
    -> Happstack.Server.Internal.Monads.ServerPartT
         GHC.Types.IO (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Unfolding: (Main.main17 Main.main16) -}
c2cda54d5420730a36f8d5fc46515484
  main16 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "db"#) -}
d955cd2c93bbdc2d0801a674ecdacd59
  main17 ::
    Data.Text.Internal.Text
    -> Database.Persist.Sql.Types.SqlPersistT
         (Control.Monad.Logger.NoLoggingT
            (Control.Monad.Trans.Resource.Internal.ResourceT
               (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
         (Database.Persist.Class.PersistEntity.Key Main.User)
    -> Happstack.Server.Internal.Monads.ServerPartT
         GHC.Types.IO (Database.Persist.Class.PersistEntity.Key Main.User)
  {- Unfolding: (Database.Persist.Sqlite.runSqlite
                   @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                   @ (Database.Persist.Class.PersistEntity.Key Main.User)
                   Main.$s$fMonadBaseControlbServerPartT
                   Main.$s$fMonadIOServerPartT) -}
06387311666b86f5dfb4c36e0fd2854d
  main18 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.WebT
         GHC.Types.IO Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ w4 :: Happstack.Server.Internal.Types.Request ->
                 Happstack.Server.Internal.Monads.$wa4
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ Happstack.Server.Internal.Types.Request
                   @ Data.ByteString.Lazy.Internal.ByteString
                   Main.main30
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Happstack.Server.Internal.Types.Request>_R
                             <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                             <Happstack.Server.Internal.Types.Request>_N))
                   Main.main19
                     `cast`
                   (<Happstack.Server.Internal.Types.Request>_R
                    ->_R Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Happstack.Server.Internal.Types.Request>_R
                                  <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                  <Data.ByteString.Lazy.Internal.ByteString>_N))
                   w4) -}
b5b0244c21917ac4174e28b99111c950
  main19 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.WebT
         GHC.Types.IO Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 2, Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,U(U),A)><L,U>,
     Unfolding: (\ req :: Happstack.Server.Internal.Types.Request
                   eta :: Happstack.Server.Internal.Types.Request[OneShot] ->
                 Happstack.Server.Internal.Monads.$wa4
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody)
                   @ Data.ByteString.Lazy.Internal.ByteString
                   (\ ds :: Happstack.Server.Internal.Types.Request[OneShot]
                      eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case req of wild { Happstack.Server.Internal.Types.Request ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                    case ds11 of wild1 { GHC.MVar.MVar m1 ->
                    case GHC.Prim.tryTakeMVar#
                           @ GHC.Prim.RealWorld
                           @ Happstack.Server.Internal.Types.RqBody
                           m1
                           eta1 of ds13 { (#,,#) ipv ipv1 ipv2 ->
                    case ipv1 of ds14 {
                      DEFAULT
                      -> (# ipv,
                            GHC.Base.Just
                              @ (Data.Either.Either
                                   Happstack.Server.Internal.Types.Response
                                   (GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody),
                                 Happstack.Server.Internal.Monads.SetAppend
                                   (Data.Monoid.Dual
                                      (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                              (Data.Either.Right
                                 @ Happstack.Server.Internal.Types.Response
                                 @ (GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody)
                                 (GHC.Base.Just @ Happstack.Server.Internal.Types.RqBody ipv2),
                               Main.main27) #)
                      0 -> (# ipv, Main.main25 #) } } } })
                     `cast`
                   (Trans
                        (<Happstack.Server.Internal.Types.Request>_R
                         ->_R Trans
                                  (Sym (GHC.Types.NTCo:IO[0]
                                            <GHC.Base.Maybe
                                               (Data.Either.Either
                                                  Happstack.Server.Internal.Types.Response
                                                  (GHC.Base.Maybe
                                                     Happstack.Server.Internal.Types.RqBody),
                                                Happstack.Server.Internal.Monads.SetAppend
                                                  (Data.Monoid.Dual
                                                     (Data.Monoid.Endo
                                                        Happstack.Server.Internal.Types.Response)))>_R))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                 <GHC.Types.IO>_R
                                                 <(Data.Either.Either
                                                     Happstack.Server.Internal.Types.Response
                                                     (GHC.Base.Maybe
                                                        Happstack.Server.Internal.Types.RqBody),
                                                   Happstack.Server.Internal.Monads.SetAppend
                                                     (Data.Monoid.Dual
                                                        (Data.Monoid.Endo
                                                           Happstack.Server.Internal.Types.Response)))>_N))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                      <Happstack.Server.Internal.Monads.SetAppend
                                                         (Data.Monoid.Dual
                                                            (Data.Monoid.Endo
                                                               Happstack.Server.Internal.Types.Response))>_N
                                                      <Control.Monad.Trans.Maybe.MaybeT
                                                         GHC.Types.IO>_R
                                                      <Data.Either.Either
                                                         Happstack.Server.Internal.Types.Response
                                                         (GHC.Base.Maybe
                                                            Happstack.Server.Internal.Types.RqBody)>_N))
                                            (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                      <Happstack.Server.Internal.Types.Response>_N
                                                      (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                           <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                           GHC.Types.IO>_N)
                                                      <GHC.Base.Maybe
                                                         Happstack.Server.Internal.Types.RqBody>_N)))))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Happstack.Server.Internal.Types.Request>_R
                                  (Happstack.Server.Internal.Monads.NTCo:WebT[0] <GHC.Types.IO>_R)
                                  <GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody>_N)))
                   Main.main20
                     `cast`
                   (<GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody>_R
                    ->_R Trans
                             (<Happstack.Server.Internal.Types.Request>_R
                              ->_R Trans
                                       (Sym (GHC.Types.NTCo:IO[0]
                                                 <GHC.Base.Maybe
                                                    (Data.Either.Either
                                                       Happstack.Server.Internal.Types.Response
                                                       Data.ByteString.Lazy.Internal.ByteString,
                                                     Happstack.Server.Internal.Monads.FilterFun
                                                       Happstack.Server.Internal.Types.Response)>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                      <GHC.Types.IO>_R
                                                      <(Data.Either.Either
                                                          Happstack.Server.Internal.Types.Response
                                                          Data.ByteString.Lazy.Internal.ByteString,
                                                        Happstack.Server.Internal.Monads.FilterFun
                                                          Happstack.Server.Internal.Types.Response)>_N))
                                            (Trans
                                                 (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                           <Happstack.Server.Internal.Monads.FilterFun
                                                              Happstack.Server.Internal.Types.Response>_N
                                                           <Control.Monad.Trans.Maybe.MaybeT
                                                              GHC.Types.IO>_R
                                                           <Data.Either.Either
                                                              Happstack.Server.Internal.Types.Response
                                                              Data.ByteString.Lazy.Internal.ByteString>_N))
                                                 (Trans
                                                      (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                                <Happstack.Server.Internal.Types.Response>_N
                                                                (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                     <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                     GHC.Types.IO>_N)
                                                                <Data.ByteString.Lazy.Internal.ByteString>_N))
                                                      (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                                <GHC.Types.IO>_R) <Data.ByteString.Lazy.Internal.ByteString>_N)))))
                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Happstack.Server.Internal.Types.Request>_R
                                       <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                       <Data.ByteString.Lazy.Internal.ByteString>_N)))
                   eta) -}
09f3146c82850c58e8ccba5698aa6d80
  main2 ::
    Happstack.Server.Internal.Types.Request
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Happstack.Server.Internal.Types.Response
               Happstack.Server.Internal.Types.Response,
             Happstack.Server.Internal.Monads.FilterFun
               Happstack.Server.Internal.Types.Response) #)
  {- Arity: 2,
     Unfolding: (\ eta2 :: Happstack.Server.Internal.Types.Request
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Happstack.Server.Internal.Monads.$wa4
                         @ GHC.Types.IO
                         GHC.Base.$fMonadIO
                         @ Happstack.Server.Internal.Types.Request
                         @ Happstack.Server.Internal.Types.Response
                         Main.main30
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                   <Happstack.Server.Internal.Types.Request>_R
                                   <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                   <Happstack.Server.Internal.Types.Request>_N))
                         Main.main3
                           `cast`
                         (<Happstack.Server.Internal.Types.Request>_R
                          ->_R Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                   <GHC.Types.IO>_R <Happstack.Server.Internal.Types.Response>_N)
                         eta2)
                        `cast`
                      (Trans
                           (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                <GHC.Types.IO>_R <Happstack.Server.Internal.Types.Response>_N)
                           (Trans
                                (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                     <Happstack.Server.Internal.Types.Response>_N
                                     (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                          <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                          GHC.Types.IO>_N)
                                     <Happstack.Server.Internal.Types.Response>_N)
                                (Trans
                                     (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                          <Happstack.Server.Internal.Monads.SetAppend
                                             (Data.Monoid.Dual
                                                (Data.Monoid.Endo
                                                   Happstack.Server.Internal.Types.Response))>_N
                                          <Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO>_R
                                          <Data.Either.Either
                                             Happstack.Server.Internal.Types.Response
                                             Happstack.Server.Internal.Types.Response>_N)
                                     (Trans
                                          (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                               <GHC.Types.IO>_R
                                               <(Data.Either.Either
                                                   Happstack.Server.Internal.Types.Response
                                                   Happstack.Server.Internal.Types.Response,
                                                 Happstack.Server.Internal.Monads.SetAppend
                                                   (Data.Monoid.Dual
                                                      (Data.Monoid.Endo
                                                         Happstack.Server.Internal.Types.Response)))>_N)
                                          (GHC.Types.NTCo:IO[0]
                                               <GHC.Base.Maybe
                                                  (Data.Either.Either
                                                     Happstack.Server.Internal.Types.Response
                                                     Happstack.Server.Internal.Types.Response,
                                                   Happstack.Server.Internal.Monads.SetAppend
                                                     (Data.Monoid.Dual
                                                        (Data.Monoid.Endo
                                                           Happstack.Server.Internal.Types.Response)))>_R)))))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ Happstack.Server.Internal.Types.Response)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either
                                    Happstack.Server.Internal.Types.Response
                                    Happstack.Server.Internal.Types.Response,
                                  Happstack.Server.Internal.Monads.SetAppend
                                    (Data.Monoid.Dual
                                       (Data.Monoid.Endo
                                          Happstack.Server.Internal.Types.Response)))>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either
                                      Happstack.Server.Internal.Types.Response
                                      Happstack.Server.Internal.Types.Response,
                                    Happstack.Server.Internal.Monads.SetAppend
                                      (Data.Monoid.Dual
                                         (Data.Monoid.Endo
                                            Happstack.Server.Internal.Types.Response)))>_R))
                        ipv
                   GHC.Base.Just ds -> ds1 } }) -}
60bd1d9029e9049e7836b5eb5a662cb0
  main20 ::
    GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody
    -> Happstack.Server.Internal.Types.Request
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Happstack.Server.Internal.Types.Response
               Data.ByteString.Lazy.Internal.ByteString,
             Happstack.Server.Internal.Monads.FilterFun
               Happstack.Server.Internal.Types.Response) #)
  {- Arity: 3, Strictness: <S,1*U><L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody
                   w1 :: Happstack.Server.Internal.Types.Request
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa9 w w2) -}
0b212045e2e96bb3a1255095b84e8cc5
  main21 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Happstack.Server.Internal.Types.Response
         Data.ByteString.Lazy.Internal.ByteString,
       Happstack.Server.Internal.Monads.SetAppend
         (Data.Monoid.Dual
            (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Happstack.Server.Internal.Types.Response
                        Data.ByteString.Lazy.Internal.ByteString,
                      Happstack.Server.Internal.Monads.SetAppend
                        (Data.Monoid.Dual
                           (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                   Main.main22) -}
ff83bccd59abdf2600a8507d6acfbff9
  main22 ::
    (Data.Either.Either
       Happstack.Server.Internal.Types.Response
       Data.ByteString.Lazy.Internal.ByteString,
     Happstack.Server.Internal.Monads.SetAppend
       (Data.Monoid.Dual
          (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- Unfolding: ((Main.main23, Main.main11)) -}
7721990a40258cffb7b83d5ff515260d
  main23 ::
    Data.Either.Either
      Happstack.Server.Internal.Types.Response
      Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.Either.Right
                   @ Happstack.Server.Internal.Types.Response
                   @ Data.ByteString.Lazy.Internal.ByteString
                   Main.main24) -}
6cb6d6b4a4ae494394b752b82b6e23f6
  main24 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Lazy.Internal.packChars_$spackChunks
                   32
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e7033d79aaf9a57c5bcb40db5fa86eb7
  main25 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Happstack.Server.Internal.Types.Response
         (GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody),
       Happstack.Server.Internal.Monads.SetAppend
         (Data.Monoid.Dual
            (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Happstack.Server.Internal.Types.Response
                        (GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody),
                      Happstack.Server.Internal.Monads.SetAppend
                        (Data.Monoid.Dual
                           (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                   Main.main26) -}
af6c54547a7da8ca444a8f3de94231ae
  main26 ::
    (Data.Either.Either
       Happstack.Server.Internal.Types.Response
       (GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody),
     Happstack.Server.Internal.Monads.SetAppend
       (Data.Monoid.Dual
          (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- HasNoCafRefs, Unfolding: ((Main.main29, Main.main27)) -}
cdd7a1e6a0bf98d11c893cb85e9f4041
  main27 ::
    Happstack.Server.Internal.Monads.SetAppend
      (Data.Monoid.Dual
         (Data.Monoid.Endo Happstack.Server.Internal.Types.Response))
  {- HasNoCafRefs,
     Unfolding: (Happstack.Server.Internal.Monads.Append
                   @ (Data.Monoid.Dual
                        (Data.Monoid.Endo Happstack.Server.Internal.Types.Response))
                   Main.main28
                     `cast`
                   (Sym (Data.Monoid.NTCo:Dual[0]
                             (Data.Monoid.NTCo:Endo[0]
                                  <Happstack.Server.Internal.Types.Response>_R)))) -}
c061193184a819ffa3bbfd971f7a7c96
  main28 ::
    Happstack.Server.Internal.Types.Response
    -> Happstack.Server.Internal.Types.Response
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ eta :: Happstack.Server.Internal.Types.Response ->
                 eta) -}
1713484831588d8e135628ca606b7126
  main29 ::
    Data.Either.Either
      Happstack.Server.Internal.Types.Response
      (GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody)
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Happstack.Server.Internal.Types.Response
                   @ (GHC.Base.Maybe Happstack.Server.Internal.Types.RqBody)
                   (GHC.Base.Nothing @ Happstack.Server.Internal.Types.RqBody)) -}
fd818ac1c9155c606026f2055672e8c2
  main3 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.ServerPartT
         GHC.Types.IO Happstack.Server.Internal.Types.Response
  {- Arity: 1,
     Strictness: <S(LLSLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Happstack.Server.Internal.Types.Request ->
                 case w of ww { Happstack.Server.Internal.Types.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Main.$wa8 ww3 }) -}
ac30c95d5ce86296bb390b5125e88699
  main30 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.WebT
         GHC.Types.IO Happstack.Server.Internal.Types.Request
  {- Arity: 1,
     Unfolding: (Happstack.Server.Internal.Monads.$fMonadWebT_$creturn
                   @ GHC.Types.IO
                   Main.$s$fApplicativeReaderT_$s$fApplicativeWebT
                   GHC.Base.$fMonadIO
                   @ Happstack.Server.Internal.Types.Request) -}
5ec9cf7b8ebba52592c9fa1eec2ff4b1
  main31 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.WebT GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: (\ w4 :: Happstack.Server.Internal.Types.Request ->
                 Happstack.Server.Internal.Monads.$wa4
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ Happstack.Server.Internal.Types.Request
                   @ ()
                   Main.main30
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Happstack.Server.Internal.Types.Request>_R
                             <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                             <Happstack.Server.Internal.Types.Request>_N))
                   Main.main32
                     `cast`
                   (<Happstack.Server.Internal.Types.Request>_R
                    ->_R Trans
                             (<Happstack.Server.Internal.Types.Request>_R
                              ->_R Trans
                                       (Sym (GHC.Types.NTCo:IO[0]
                                                 <GHC.Base.Maybe
                                                    (Data.Either.Either
                                                       Happstack.Server.Internal.Types.Response (),
                                                     Happstack.Server.Internal.Monads.FilterFun
                                                       Happstack.Server.Internal.Types.Response)>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                      <GHC.Types.IO>_R
                                                      <(Data.Either.Either
                                                          Happstack.Server.Internal.Types.Response
                                                          (),
                                                        Happstack.Server.Internal.Monads.FilterFun
                                                          Happstack.Server.Internal.Types.Response)>_N))
                                            (Trans
                                                 (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                           <Happstack.Server.Internal.Monads.FilterFun
                                                              Happstack.Server.Internal.Types.Response>_N
                                                           <Control.Monad.Trans.Maybe.MaybeT
                                                              GHC.Types.IO>_R
                                                           <Data.Either.Either
                                                              Happstack.Server.Internal.Types.Response
                                                              ()>_N))
                                                 (Trans
                                                      (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                                <Happstack.Server.Internal.Types.Response>_N
                                                                (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                     <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                     GHC.Types.IO>_N)
                                                                <()>_N))
                                                      (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                                <GHC.Types.IO>_R) <()>_N)))))
                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Happstack.Server.Internal.Types.Request>_R
                                       <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                       <()>_N)))
                   w4) -}
11447278bab9f414355dacf1ed87bf5f
  main32 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Types.Request
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either Happstack.Server.Internal.Types.Response (),
             Happstack.Server.Internal.Monads.FilterFun
               Happstack.Server.Internal.Types.Response) #)
  {- Arity: 3,
     Strictness: <S(LSLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A)><L,A><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ rq :: Happstack.Server.Internal.Types.Request
                   eta :: Happstack.Server.Internal.Types.Request
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case rq of wild { Happstack.Server.Internal.Types.Request ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                 case ds2 of wild1 {
                   DEFAULT
                   -> (Happstack.Server.Internal.Monads.$wa1
                         @ GHC.Types.IO
                         Control.Monad.Trans.Error.$fMonadPlusIO
                         @ ())
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                <GHC.Types.IO>_R
                                <(Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                  Happstack.Server.Internal.Monads.FilterFun
                                    Happstack.Server.Internal.Types.Response)>_N)
                           (GHC.Types.NTCo:IO[0]
                                <GHC.Base.Maybe
                                   (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                                    Happstack.Server.Internal.Monads.FilterFun
                                      Happstack.Server.Internal.Types.Response)>_R))
                        eta1
                   Happstack.Server.Internal.Types.POST
                   -> (# eta1,
                         GHC.Base.Just
                           @ (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                              Happstack.Server.Internal.Monads.SetAppend
                                (Data.Monoid.Dual
                                   (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                           (Data.Either.Right
                              @ Happstack.Server.Internal.Types.Response
                              @ ()
                              GHC.Tuple.(),
                            Happstack.Server.Internal.Monads.Append
                              @ (Data.Monoid.Dual
                                   (Data.Monoid.Endo Happstack.Server.Internal.Types.Response))
                              (GHC.Base.id @ Happstack.Server.Internal.Types.Response)
                                `cast`
                              (Sym (Data.Monoid.NTCo:Dual[0]
                                        (Data.Monoid.NTCo:Endo[0]
                                             <Happstack.Server.Internal.Types.Response>_R)))) #) } }) -}
2c7a34ad21cffc6fb12efacea085fc26
  main33 ::
    Control.Monad.Trans.Reader.ReaderT
      Happstack.Server.Internal.Types.Request
      (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
      Happstack.Server.Internal.Types.Response
  {- Unfolding: (Main.main10
                   Main.main40
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Happstack.Server.Internal.Types.Request>_R
                             <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                             <()>_N))
                   Main.main34
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Happstack.Server.Internal.Types.Request>_R
                             <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                             <Happstack.Server.Internal.Types.Response>_N))) -}
d1007253b2ff46e4cf80b548aa1a8325
  main34 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.WebT
         GHC.Types.IO Happstack.Server.Internal.Types.Response
  {- Arity: 1,
     Unfolding: (\ w4 :: Happstack.Server.Internal.Types.Request ->
                 Happstack.Server.Internal.Monads.$wa4
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ [Database.Persist.Class.PersistEntity.Entity Main.User]
                   @ Happstack.Server.Internal.Types.Response
                   Main.main35
                     `cast`
                   (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                        <GHC.Types.IO>_R <[Database.Persist.Class.PersistEntity.Entity
                                             Main.User]>_N)
                   Main.main_w3
                   w4) -}
fd5f817c74c8a32f4bc88cfae6787bd2
  main35 ::
    Happstack.Server.Internal.Monads.ServerPartT
      GHC.Types.IO
      [Database.Persist.Class.PersistEntity.Entity Main.User]
  {- Unfolding: (Main.main39
                   Main.main16
                   Main.main36
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Database.Persist.Sql.Types.SqlBackend>_R
                             <Control.Monad.Logger.NoLoggingT
                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                   (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))>_R
                             <[Database.Persist.Class.PersistEntity.Entity Main.User]>_N))) -}
ca7d1db1913b5ffdf7cd8c15540ac185
  main36 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
         [Database.Persist.Class.PersistEntity.Entity Main.User]
  {- Arity: 1,
     Unfolding: (\ r1 :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   a141 :: Control.Monad.Logger.NoLoggingT
                             (Control.Monad.Trans.Resource.Internal.ResourceT
                                (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))
                             (Data.Acquire.Internal.Acquire
                                (Data.Conduit.Internal.Conduit.Source
                                   GHC.Types.IO
                                   (Database.Persist.Class.PersistEntity.Entity Main.User)))
                   = Main.main_m1
                       `cast`
                     (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                          <Database.Persist.Sql.Types.SqlBackend>_R
                          <Control.Monad.Logger.NoLoggingT
                             (Control.Monad.Trans.Resource.Internal.ResourceT
                                (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO))>_R
                          <Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.Source
                                GHC.Types.IO
                                (Database.Persist.Class.PersistEntity.Entity Main.User))>_N)
                       r1
                 } in
                 (\ r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap ->
                  let {
                    a142 :: Happstack.Server.Internal.Monads.ServerPartT
                              GHC.Types.IO
                              (Data.Acquire.Internal.Acquire
                                 (Data.Conduit.Internal.Conduit.Source
                                    GHC.Types.IO
                                    (Database.Persist.Class.PersistEntity.Entity Main.User)))
                    = a141
                        `cast`
                      (Trans
                           (Control.Monad.Logger.NTCo:NoLoggingT[0]
                                <Control.Monad.Trans.Resource.Internal.ResourceT
                                   (Happstack.Server.Internal.Monads.ServerPartT
                                      GHC.Types.IO)>_R <Data.Acquire.Internal.Acquire
                                                          (Data.Conduit.Internal.Conduit.Source
                                                             GHC.Types.IO
                                                             (Database.Persist.Class.PersistEntity.Entity
                                                                Main.User))>_N)
                           (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                                <Data.Acquire.Internal.Acquire
                                   (Data.Conduit.Internal.Conduit.Source
                                      GHC.Types.IO
                                      (Database.Persist.Class.PersistEntity.Entity Main.User))>_N))
                        r
                  } in
                  \ w4 :: Happstack.Server.Internal.Types.Request ->
                  Happstack.Server.Internal.Monads.$wa4
                    @ GHC.Types.IO
                    GHC.Base.$fMonadIO
                    @ (Data.Acquire.Internal.Acquire
                         (Data.Conduit.Internal.Conduit.Source
                            GHC.Types.IO
                            (Database.Persist.Class.PersistEntity.Entity Main.User)))
                    @ [Database.Persist.Class.PersistEntity.Entity Main.User]
                    a142
                      `cast`
                    (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                         <GHC.Types.IO>_R <Data.Acquire.Internal.Acquire
                                             (Data.Conduit.Internal.Conduit.Source
                                                GHC.Types.IO
                                                (Database.Persist.Class.PersistEntity.Entity
                                                   Main.User))>_N)
                    Main.main37
                      `cast`
                    (<Data.Acquire.Internal.Acquire
                        (Data.Conduit.Internal.Conduit.Source
                           GHC.Types.IO
                           (Database.Persist.Class.PersistEntity.Entity Main.User))>_R
                     ->_R Trans
                              (<Happstack.Server.Internal.Types.Request>_R
                               ->_R Trans
                                        (Sym (GHC.Types.NTCo:IO[0]
                                                  <GHC.Base.Maybe
                                                     (Data.Either.Either
                                                        Happstack.Server.Internal.Types.Response
                                                        [Database.Persist.Class.PersistEntity.Entity
                                                           Main.User],
                                                      Happstack.Server.Internal.Monads.FilterFun
                                                        Happstack.Server.Internal.Types.Response)>_R))
                                        (Trans
                                             (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                       <GHC.Types.IO>_R
                                                       <(Data.Either.Either
                                                           Happstack.Server.Internal.Types.Response
                                                           [Database.Persist.Class.PersistEntity.Entity
                                                              Main.User],
                                                         Happstack.Server.Internal.Monads.FilterFun
                                                           Happstack.Server.Internal.Types.Response)>_N))
                                             (Trans
                                                  (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                            <Happstack.Server.Internal.Monads.FilterFun
                                                               Happstack.Server.Internal.Types.Response>_N
                                                            <Control.Monad.Trans.Maybe.MaybeT
                                                               GHC.Types.IO>_R
                                                            <Data.Either.Either
                                                               Happstack.Server.Internal.Types.Response
                                                               [Database.Persist.Class.PersistEntity.Entity
                                                                  Main.User]>_N))
                                                  (Trans
                                                       (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                                 <Happstack.Server.Internal.Types.Response>_N
                                                                 (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                      <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                      GHC.Types.IO>_N)
                                                                 <[Database.Persist.Class.PersistEntity.Entity
                                                                     Main.User]>_N))
                                                       (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                                 <GHC.Types.IO>_R) <[Database.Persist.Class.PersistEntity.Entity
                                                                                       Main.User]>_N)))))
                              (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                        <Happstack.Server.Internal.Types.Request>_R
                                        <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                        <[Database.Persist.Class.PersistEntity.Entity
                                            Main.User]>_N)))
                    w4)
                   `cast`
                 (Trans
                      (<GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                       ->_R Trans
                                (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                          <Happstack.Server.Internal.Types.Request>_R
                                          <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                          <[Database.Persist.Class.PersistEntity.Entity
                                              Main.User]>_N))
                                (Sym (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                                          <GHC.Types.IO>_R) <[Database.Persist.Class.PersistEntity.Entity
                                                                Main.User]>_N))
                      (Trans
                           (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                     <Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO>_R
                                     <[Database.Persist.Class.PersistEntity.Entity Main.User]>_N))
                           (Sym (Control.Monad.Logger.NTCo:NoLoggingT[0]
                                     <Control.Monad.Trans.Resource.Internal.ResourceT
                                        (Happstack.Server.Internal.Monads.ServerPartT
                                           GHC.Types.IO)>_R) <[Database.Persist.Class.PersistEntity.Entity
                                                                 Main.User]>_N)))) -}
b5c9ff38d8719780449ce7b71fc4d8a7
  main37 ::
    Data.Acquire.Internal.Acquire
      (Data.Conduit.Internal.Conduit.Source
         GHC.Types.IO
         (Database.Persist.Class.PersistEntity.Entity Main.User))
    -> Happstack.Server.Internal.Types.Request
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Happstack.Server.Internal.Types.Response
               [Database.Persist.Class.PersistEntity.Entity Main.User],
             Happstack.Server.Internal.Monads.FilterFun
               Happstack.Server.Internal.Types.Response) #)
  {- Arity: 3, Strictness: <L,C(U)><L,A><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ a141 :: Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.Source
                                GHC.Types.IO
                                (Database.Persist.Class.PersistEntity.Entity Main.User))
                   eta :: Happstack.Server.Internal.Types.Request
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Data.Acquire.Internal.with
                         @ (Data.Conduit.Internal.Conduit.Source
                              GHC.Types.IO
                              (Database.Persist.Class.PersistEntity.Entity Main.User))
                         @ GHC.Types.IO
                         @ [Database.Persist.Class.PersistEntity.Entity Main.User]
                         Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                         a141
                         (Database.Persist.Class.PersistQuery.selectList1 @ Main.User)
                           `cast`
                         (<Data.Conduit.Internal.Conduit.Source
                             GHC.Types.IO
                             (Database.Persist.Class.PersistEntity.Entity Main.User)>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0]
                                        <[Database.Persist.Class.PersistEntity.Entity
                                            Main.User]>_R)))
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <[Database.Persist.Class.PersistEntity.Entity Main.User]>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Base.Just
                      @ (Data.Either.Either
                           Happstack.Server.Internal.Types.Response
                           [Database.Persist.Class.PersistEntity.Entity Main.User],
                         Happstack.Server.Internal.Monads.SetAppend
                           (Data.Monoid.Dual
                              (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                      (Data.Either.Right
                         @ Happstack.Server.Internal.Types.Response
                         @ [Database.Persist.Class.PersistEntity.Entity Main.User]
                         ipv1,
                       Happstack.Server.Internal.Monads.Append
                         @ (Data.Monoid.Dual
                              (Data.Monoid.Endo Happstack.Server.Internal.Types.Response))
                         (\ eta2 :: Happstack.Server.Internal.Types.Response -> eta2)
                           `cast`
                         (Sym (Data.Monoid.NTCo:Dual[0]
                                   (Data.Monoid.NTCo:Endo[0]
                                        <Happstack.Server.Internal.Types.Response>_R)))) #) }) -}
ae7ebbae24399c5685146d683831cf64
  main38 ::
    [Database.Persist.Class.PersistEntity.Filter Main.User]
    -> [Database.Persist.Class.PersistEntity.SelectOpt Main.User]
    -> Control.Monad.Trans.Reader.ReaderT
         Database.Persist.Sql.Types.SqlBackend
         (Control.Monad.Logger.NoLoggingT
            (Control.Monad.Trans.Resource.Internal.ResourceT
               (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
         (Data.Acquire.Internal.Acquire
            (Data.Conduit.Internal.Conduit.Source
               GHC.Types.IO
               (Database.Persist.Class.PersistEntity.Entity Main.User)))
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistQuery.$w$cselectSourceRes
                   @ Main.User
                   @ (Control.Monad.Logger.NoLoggingT
                        (Control.Monad.Trans.Resource.Internal.ResourceT
                           (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
                   @ GHC.Types.IO
                   Main.$fPersistEntityUser
                   Main.$s$fMonadIONoLoggingT2
                   Control.Monad.IO.Class.$fMonadIOIO) -}
2fc6b15f05ccbb35260f36bb3fcd8f19
  main39 ::
    Data.Text.Internal.Text
    -> Database.Persist.Sql.Types.SqlPersistT
         (Control.Monad.Logger.NoLoggingT
            (Control.Monad.Trans.Resource.Internal.ResourceT
               (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
         [Database.Persist.Class.PersistEntity.Entity Main.User]
    -> Happstack.Server.Internal.Monads.ServerPartT
         GHC.Types.IO
         [Database.Persist.Class.PersistEntity.Entity Main.User]
  {- Unfolding: (Database.Persist.Sqlite.runSqlite
                   @ (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)
                   @ [Database.Persist.Class.PersistEntity.Entity Main.User]
                   Main.$s$fMonadBaseControlbServerPartT
                   Main.$s$fMonadIOServerPartT) -}
de04907bd78523b0cabaa29a82fb8f40
  main4 ::
    Control.Monad.Trans.Reader.ReaderT
      Happstack.Server.Internal.Types.Request
      (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
      Happstack.Server.Internal.Types.Response
  {- Unfolding: (Main.main10
                   Main.main31
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Happstack.Server.Internal.Types.Request>_R
                             <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                             <()>_N))
                   Main.main5
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Happstack.Server.Internal.Types.Request>_R
                             <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                             <Happstack.Server.Internal.Types.Response>_N))) -}
9d5ef3cd41f471db5992a107f0be4c67
  main40 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.WebT GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: (\ w4 :: Happstack.Server.Internal.Types.Request ->
                 Happstack.Server.Internal.Monads.$wa4
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ Happstack.Server.Internal.Types.Request
                   @ ()
                   Main.main30
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Happstack.Server.Internal.Types.Request>_R
                             <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                             <Happstack.Server.Internal.Types.Request>_N))
                   Main.main41
                     `cast`
                   (<Happstack.Server.Internal.Types.Request>_R
                    ->_R Trans
                             (<Happstack.Server.Internal.Types.Request>_R
                              ->_R Trans
                                       (Sym (GHC.Types.NTCo:IO[0]
                                                 <GHC.Base.Maybe
                                                    (Data.Either.Either
                                                       Happstack.Server.Internal.Types.Response (),
                                                     Happstack.Server.Internal.Monads.FilterFun
                                                       Happstack.Server.Internal.Types.Response)>_R))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                      <GHC.Types.IO>_R
                                                      <(Data.Either.Either
                                                          Happstack.Server.Internal.Types.Response
                                                          (),
                                                        Happstack.Server.Internal.Monads.FilterFun
                                                          Happstack.Server.Internal.Types.Response)>_N))
                                            (Trans
                                                 (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                           <Happstack.Server.Internal.Monads.FilterFun
                                                              Happstack.Server.Internal.Types.Response>_N
                                                           <Control.Monad.Trans.Maybe.MaybeT
                                                              GHC.Types.IO>_R
                                                           <Data.Either.Either
                                                              Happstack.Server.Internal.Types.Response
                                                              ()>_N))
                                                 (Trans
                                                      (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                                <Happstack.Server.Internal.Types.Response>_N
                                                                (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                     <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                     GHC.Types.IO>_N)
                                                                <()>_N))
                                                      (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                                <GHC.Types.IO>_R) <()>_N)))))
                             (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                       <Happstack.Server.Internal.Types.Request>_R
                                       <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                       <()>_N)))
                   w4) -}
0531639dc78c3b8ceb117620b2f04f1a
  main41 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Types.Request
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either Happstack.Server.Internal.Types.Response (),
             Happstack.Server.Internal.Monads.FilterFun
               Happstack.Server.Internal.Types.Response) #)
  {- Arity: 3,
     Strictness: <S(LSLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A)><L,A><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Happstack.Server.Internal.Types.Request
                   w1 :: Happstack.Server.Internal.Types.Request[OneShot]
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Happstack.Server.Internal.Types.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 Main.$wa10 ww2 w2 }) -}
a5bacffdf792c30c35527fdfa44cc590
  main42 ::
    GHC.Base.Maybe
      (Data.Either.Either Happstack.Server.Internal.Types.Response (),
       Happstack.Server.Internal.Monads.SetAppend
         (Data.Monoid.Dual
            (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either Happstack.Server.Internal.Types.Response (),
                      Happstack.Server.Internal.Monads.SetAppend
                        (Data.Monoid.Dual
                           (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                   Main.main43) -}
acabf6ba66da97b656e27ef154a6e039
  main43 ::
    (Data.Either.Either Happstack.Server.Internal.Types.Response (),
     Happstack.Server.Internal.Monads.SetAppend
       (Data.Monoid.Dual
          (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- HasNoCafRefs, Unfolding: ((Main.main44, Main.main11)) -}
11a78c5190031a769b7d075c6f495273
  main44 ::
    Data.Either.Either Happstack.Server.Internal.Types.Response ()
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Happstack.Server.Internal.Types.Response
                   @ ()
                   GHC.Tuple.()) -}
f16ce305f8466f028e561964617b491f
  main45 ::
    Happstack.Server.Internal.Types.Request
    -> Control.Monad.Trans.Maybe.MaybeT
         GHC.Types.IO
         (Data.Either.Either
            Happstack.Server.Internal.Types.Response
            Happstack.Server.Internal.Types.Response,
          Happstack.Server.Internal.Monads.SetAppend
            (Data.Monoid.Dual
               (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ eta :: Happstack.Server.Internal.Types.Request ->
                 Happstack.Server.Internal.Monads.$wa1
                   @ GHC.Types.IO
                   Control.Monad.Trans.Error.$fMonadPlusIO
                   @ Happstack.Server.Internal.Types.Response) -}
ebe3ceab81ef4d575543a85d7e1016ce
  main46 ::
    Database.Persist.Sql.Types.SqlBackend
    -> Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO) ()
  {- Arity: 1,
     Unfolding: (\ eta :: Database.Persist.Sql.Types.SqlBackend ->
                 let {
                   a141 :: Control.Monad.Logger.NoLoggingT
                             (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
                             [Data.Text.Internal.Text]
                   = Database.Persist.Sql.Migration.runMigration1
                       @ (Control.Monad.Logger.NoLoggingT
                            (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                       Main.$s$fMonadIONoLoggingT
                       Main.main47
                         `cast`
                       (Trans
                            (<Database.Persist.Sql.Types.SqlBackend>_R
                             ->_R Sym (GHC.Types.NTCo:IO[0]
                                           <(((), [Data.Text.Internal.Text]),
                                             [(GHC.Types.Bool,
                                               Database.Persist.Sql.Types.Sql)])>_R))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                           <Database.Persist.Sql.Types.SqlBackend>_R
                                           <GHC.Types.IO>_R
                                           <(((), [Data.Text.Internal.Text]),
                                             [(GHC.Types.Bool,
                                               Database.Persist.Sql.Types.Sql)])>_N))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                <[(GHC.Types.Bool,
                                                   Database.Persist.Sql.Types.Sql)]>_N
                                                <Control.Monad.Trans.Reader.ReaderT
                                                   Database.Persist.Sql.Types.SqlBackend
                                                   GHC.Types.IO>_R
                                                <((), [Data.Text.Internal.Text])>_N))
                                      (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                <[Data.Text.Internal.Text]>_N
                                                <Control.Monad.Trans.Writer.Lazy.WriterT
                                                   Database.Persist.Sql.Types.CautiousMigration
                                                   (Control.Monad.Trans.Reader.ReaderT
                                                      Database.Persist.Sql.Types.SqlBackend
                                                      GHC.Types.IO)>_R
                                                <()>_N)))))
                       GHC.Types.False
                       eta
                 } in
                 (\ r :: GHC.IORef.IORef
                           Control.Monad.Trans.Resource.Internal.ReleaseMap
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case (a141
                          `cast`
                        (Trans
                             (Control.Monad.Logger.NTCo:NoLoggingT[0]
                                  <Control.Monad.Trans.Resource.Internal.ResourceT
                                     GHC.Types.IO>_R <[Data.Text.Internal.Text]>_N)
                             (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                  <GHC.Types.IO>_R <[Data.Text.Internal.Text]>_N))
                          r)
                         `cast`
                       (GHC.Types.NTCo:IO[0] <[Data.Text.Internal.Text]>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, GHC.Tuple.() #) })
                   `cast`
                 (Trans
                      (<GHC.IORef.IORef
                          Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Resource.Internal.NTCo:ResourceT[0]
                                     <GHC.Types.IO>_R <()>_N))
                           (Sym (Control.Monad.Logger.NTCo:NoLoggingT[0]
                                     <Control.Monad.Trans.Resource.Internal.ResourceT
                                        GHC.Types.IO>_R) <()>_N)))) -}
681cf169d047a38e27389f61d52e3a2e
  main47 ::
    Database.Persist.Sql.Types.SqlBackend
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (((), [Data.Text.Internal.Text]),
           [(GHC.Types.Bool, Database.Persist.Sql.Types.Sql)]) #)
  {- Arity: 2,
     Strictness: <S(LLLLLC(C(C(C(S(LS)))))LLLLLLLL),1*U(C(C1(U(U,U(C(U(U,A)),C(U(U,U)),C(C1(U(U,U))),C(C1(C1(C1(U)))))))),A,A,U(U),A,C(C1(C1(C1(U(U,1*U))))),A,A,A,A,A,A,A,A)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Database.Persist.Sql.Types.SqlBackend
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Database.Persist.Sql.Types.SqlBackend ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Main.$wa11 ww1 ww4 ww6 w1 }) -}
9429a407653bc882eef718352d3fa09d
  main48 :: [Database.Persist.Types.Base.EntityDef]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EntityDef
                   Main.main57
                   Main.main49) -}
dc4aca145bf1b06906c05517106acadd
  main49 :: [Database.Persist.Types.Base.EntityDef]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EntityDef
                   Main.main54
                   Main.main50) -}
4dd672552cab69032e0e481237f11469
  main5 ::
    Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.WebT
         GHC.Types.IO Happstack.Server.Internal.Types.Response
  {- Arity: 1,
     Unfolding: (\ w4 :: Happstack.Server.Internal.Types.Request ->
                 Happstack.Server.Internal.Monads.$wa4
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ Data.ByteString.Lazy.Internal.ByteString
                   @ Happstack.Server.Internal.Types.Response
                   Main.main18
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Happstack.Server.Internal.Types.Request>_R
                             <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                             <Data.ByteString.Lazy.Internal.ByteString>_N))
                   Main.main6
                     `cast`
                   (<Data.ByteString.Lazy.Internal.ByteString>_R
                    ->_R Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Happstack.Server.Internal.Types.Request>_R
                                  <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                  <Happstack.Server.Internal.Types.Response>_N))
                   w4) -}
42542edd523080ef7cc8112c5476affb
  main50 :: [Database.Persist.Types.Base.EntityDef]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.EntityDef
                   Main.main51
                   (GHC.Types.[] @ Database.Persist.Types.Base.EntityDef)) -}
09d68758de5dc5f138ea539084f5f0c9
  main51 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Main.$fPersistEntitySong14 of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "song"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Database.Persist.Class.PersistField.$fPersistFieldMap_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntitySong12
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntitySong8))
                   Main.$fPersistEntitySong32
                   Main.main52
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntitySong16
                   dt
                   GHC.Types.False } } } } }) -}
5d6bcd24a023895ec4afa3709072fd2d
  main52 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntitySong6
                   Main.main53) -}
77546545e8be14af16cfecfab1cb7520
  main53 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntitySong3
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
6bf1b2f7d87ce5afc87c0eb5752f504c
  main54 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "Playlist"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "playlist"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Database.Persist.Class.PersistField.$fPersistFieldMap_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntityPlaylist19
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntitySong8))
                   Main.$fPersistEntitySong32
                   Main.main55
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntitySong16
                   dt
                   GHC.Types.False } } } } }) -}
410a64be7704ef1a5ce12adb25650691
  main55 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityPlaylist9
                   Main.main56) -}
e4978eb996539a2bade7e89eff64310d
  main56 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityPlaylist1
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
9bfdfcbb315d588e6dd1077e1d1c2380
  main57 :: Database.Persist.Types.Base.EntityDef
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "User"# of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "user"# of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 case Data.Text.Show.unpackCString#
                        "Id"# of nt2 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                 case Data.Text.Show.unpackCString#
                        "id"# of nt3 { Data.Text.Internal.Text ipv9 ipv10 ipv11 ->
                 case Database.Persist.Class.PersistField.$fPersistFieldMap_$sfromList
                        @ [Database.Persist.Types.Base.ExtraLine]
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              [Database.Persist.Types.Base.ExtraLine])) of dt { DEFAULT ->
                 Database.Persist.Types.Base.EntityDef
                   nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                   nt1 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                   (Database.Persist.Types.Base.FieldDef
                      nt2 `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                      nt3 `cast` (Sym (Database.Persist.Types.Base.NTCo:DBName[0]))
                      Main.$fPersistEntityUser3
                      Database.Persist.Types.Base.SqlInt64
                      (GHC.Types.[] @ Database.Persist.Types.Base.Attr)
                      GHC.Types.True
                      (Database.Persist.Types.Base.ForeignRef
                         nt `cast` (Sym (Database.Persist.Types.Base.NTCo:HaskellName[0]))
                         Main.$fPersistEntitySong8))
                   Main.$fPersistEntitySong32
                   Main.main58
                   (GHC.Types.[] @ Database.Persist.Types.Base.UniqueDef)
                   (GHC.Types.[] @ Database.Persist.Types.Base.ForeignDef)
                   Main.$fPersistEntitySong16
                   dt
                   GHC.Types.False } } } } }) -}
a4d7dedf388ff13ca064e6d0a5952038
  main58 :: [Database.Persist.Types.Base.FieldDef]
  {- Unfolding: (GHC.Types.:
                   @ Database.Persist.Types.Base.FieldDef
                   Main.$fPersistEntityUser1
                   (GHC.Types.[] @ Database.Persist.Types.Base.FieldDef)) -}
c4fb17b7407fdec57826f423ad679820
  main59 ::
    Data.Text.Internal.Text
    -> Database.Persist.Sql.Types.SqlPersistT
         (Control.Monad.Logger.NoLoggingT
            (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
         ()
    -> GHC.Types.IO ()
  {- Unfolding: (Database.Persist.Sqlite.runSqlite
                   @ GHC.Types.IO
                   @ ()
                   Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                   Control.Monad.IO.Class.$fMonadIOIO) -}
7ebd7d0b2a6f1a9b74ee56f331efc335
  main6 ::
    Data.ByteString.Lazy.Internal.ByteString
    -> Happstack.Server.Internal.Types.Request
    -> Happstack.Server.Internal.Monads.WebT
         GHC.Types.IO Happstack.Server.Internal.Types.Response
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ body :: Data.ByteString.Lazy.Internal.ByteString ->
                 let {
                   a141 :: Happstack.Server.Internal.Monads.ServerPartT
                             GHC.Types.IO (Database.Persist.Class.PersistEntity.Key Main.User)
                   = Main.main15
                       (Main.main14
                          (case body of wild {
                             Data.ByteString.Lazy.Internal.Empty
                             -> case Main.main12 of wild1 {
                                  Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                                  -> Data.Maybe.fromJust1 @ Main.User
                                  Data.Attoparsec.ByteString.Lazy.Done ds v
                                  -> case (Main.$fFromJSONEntity0_$cparseJSON2 v)
                                            `cast`
                                          (Data.Aeson.Types.Internal.NTCo:Parser[0] <Main.User>_R)
                                            @ Data.Aeson.Types.Internal.Result
                                            @ Main.User
                                            (Data.Aeson.Types.Internal.Error @ Main.User)
                                            (Data.Aeson.Types.Internal.Success
                                               @ Main.User) of wild2 {
                                       Data.Aeson.Types.Internal.Error ipv
                                       -> Data.Maybe.fromJust1 @ Main.User
                                       Data.Aeson.Types.Internal.Success a142 -> a142 } }
                             Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                             -> case Data.Attoparsec.ByteString.Lazy.parse_go
                                       @ Data.Aeson.Types.Internal.Value
                                       (Data.Aeson.Parser.Internal.$wa3
                                          @ Data.Aeson.Types.Internal.Value
                                          dt
                                          dt1
                                          dt2
                                          dt3
                                          dt3
                                          0
                                          0
                                          Data.Attoparsec.Internal.Types.Incomplete
                                          (Data.Attoparsec.ByteString.Internal.failK
                                             @ Data.Aeson.Types.Internal.Value)
                                            `cast`
                                          (Sub (Sym (Data.Attoparsec.Internal.Types.TFCo:R:StateByteString[0]))
                                           ->_R <Data.Attoparsec.Internal.Types.Pos
                                                 -> Data.Attoparsec.Internal.Types.More
                                                 -> [GHC.Base.String]
                                                 -> GHC.Base.String
                                                 -> Data.Attoparsec.Internal.Types.IResult
                                                      Data.ByteString.Internal.ByteString
                                                      Data.Aeson.Types.Internal.Value>_R)
                                          (Data.Attoparsec.ByteString.Internal.successK
                                             @ Data.Aeson.Types.Internal.Value)
                                            `cast`
                                          (Sub (Sym (Data.Attoparsec.Internal.Types.TFCo:R:StateByteString[0]))
                                           ->_R <Data.Attoparsec.Internal.Types.Pos
                                                 -> Data.Attoparsec.Internal.Types.More
                                                 -> Data.Aeson.Types.Internal.Value
                                                 -> Data.Attoparsec.Internal.Types.IResult
                                                      Data.ByteString.Internal.ByteString
                                                      Data.Aeson.Types.Internal.Value>_R))
                                       xs of wild1 {
                                  Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                                  -> Data.Maybe.fromJust1 @ Main.User
                                  Data.Attoparsec.ByteString.Lazy.Done ds v
                                  -> case (Main.$fFromJSONEntity0_$cparseJSON2 v)
                                            `cast`
                                          (Data.Aeson.Types.Internal.NTCo:Parser[0] <Main.User>_R)
                                            @ Data.Aeson.Types.Internal.Result
                                            @ Main.User
                                            (Data.Aeson.Types.Internal.Error @ Main.User)
                                            (Data.Aeson.Types.Internal.Success
                                               @ Main.User) of wild2 {
                                       Data.Aeson.Types.Internal.Error ipv
                                       -> Data.Maybe.fromJust1 @ Main.User
                                       Data.Aeson.Types.Internal.Success a142 -> a142 } } }))
                 } in
                 \ w4 :: Happstack.Server.Internal.Types.Request ->
                 Happstack.Server.Internal.Monads.$wa4
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   @ (Database.Persist.Class.PersistEntity.Key Main.User)
                   @ Happstack.Server.Internal.Types.Response
                   a141
                     `cast`
                   (Happstack.Server.Internal.Monads.NTCo:ServerPartT[0]
                        <GHC.Types.IO>_R <Database.Persist.Class.PersistEntity.Key
                                            Main.User>_N)
                   Main.main7
                   w4) -}
034f21ac9d0e855d987b09cc140275e2
  main60 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
16d39470788da9ec3ea1e8c815fb7f03
  main7 ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Control.Monad.Trans.Reader.ReaderT
         Happstack.Server.Internal.Types.Request
         (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
         Happstack.Server.Internal.Types.Response
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ userKey :: Database.Persist.Class.PersistEntity.Key
                                Main.User ->
                 let {
                   a141 :: Data.ByteString.Lazy.Internal.ByteString
                   = Data.ByteString.Builder.toLazyByteString
                       (case userKey
                               `cast`
                             (Trans
                                  (Sub (Main.TFCo:R:KeyUser[0]))
                                  (Trans
                                       (Main.NTCo:R:KeyUser[0])
                                       (Trans
                                            (Sub (Database.Persist.Sql.Orphan.PersistStore.TFCo:R:BackendKeySqlBackend[0]))
                                            (Database.Persist.Sql.Orphan.PersistStore.NTCo:R:BackendKeySqlBackend[0])))) of wild { GHC.Int.I64# x# ->
                        case GHC.Integer.Type.smallInteger x# of dt { DEFAULT ->
                        Data.Aeson.Encode.ByteString.encodeToBuilder
                          (Data.Aeson.Types.Internal.Number
                             (Data.Scientific.Scientific dt 0)) } })
                 } in
                 let {
                   a142 :: Happstack.Server.Internal.Types.Response
                   = Happstack.Server.Internal.Types.Response
                       Happstack.Server.Response.$fToMessage()1
                       (Data.Map.Base.Tip
                          @ Data.ByteString.Internal.ByteString
                          @ Happstack.Server.Internal.Types.HeaderPair)
                       Happstack.Server.Internal.Types.nullRsFlags
                       a141
                       (GHC.Base.Nothing
                          @ (Happstack.Server.Internal.Types.Response
                             -> GHC.Types.IO Happstack.Server.Internal.Types.Response))
                 } in
                 let {
                   a143 :: Data.Either.Either
                             Happstack.Server.Internal.Types.Response
                             Happstack.Server.Internal.Types.Response
                   = Data.Either.Right
                       @ Happstack.Server.Internal.Types.Response
                       @ Happstack.Server.Internal.Types.Response
                       a142
                 } in
                 let {
                   a144 :: (Data.Either.Either
                              Happstack.Server.Internal.Types.Response
                              Happstack.Server.Internal.Types.Response,
                            Happstack.Server.Internal.Monads.SetAppend
                              (Data.Monoid.Dual
                                 (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                   = (a143, Main.main11)
                 } in
                 let {
                   lvl80 :: GHC.Base.Maybe
                              (Data.Either.Either
                                 Happstack.Server.Internal.Types.Response
                                 Happstack.Server.Internal.Types.Response,
                               Happstack.Server.Internal.Monads.SetAppend
                                 (Data.Monoid.Dual
                                    (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                   = GHC.Base.Just
                       @ (Data.Either.Either
                            Happstack.Server.Internal.Types.Response
                            Happstack.Server.Internal.Types.Response,
                          Happstack.Server.Internal.Monads.SetAppend
                            (Data.Monoid.Dual
                               (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                       a144
                 } in
                 Main.main10
                   Main.main8
                     `cast`
                   (Trans
                        (<Happstack.Server.Internal.Types.Request>_R
                         ->_R Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                            <Happstack.Server.Internal.Monads.SetAppend
                                               (Data.Monoid.Dual
                                                  (Data.Monoid.Endo
                                                     Happstack.Server.Internal.Types.Response))>_N
                                            <Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO>_R
                                            <Data.Either.Either
                                               Happstack.Server.Internal.Types.Response ()>_N))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                 <Happstack.Server.Internal.Types.Response>_N
                                                 (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                      <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                      GHC.Types.IO>_N)
                                                 <()>_N))
                                       (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                 <GHC.Types.IO>_R) <()>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Happstack.Server.Internal.Types.Request>_R
                                  <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                  <()>_N)))
                   (\ ds :: Happstack.Server.Internal.Types.Request
                      eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    (# eta, lvl80 #))
                     `cast`
                   (Trans
                        (<Happstack.Server.Internal.Types.Request>_R
                         ->_R Trans
                                  (Sym (GHC.Types.NTCo:IO[0]
                                            <GHC.Base.Maybe
                                               (Data.Either.Either
                                                  Happstack.Server.Internal.Types.Response
                                                  Happstack.Server.Internal.Types.Response,
                                                Happstack.Server.Internal.Monads.SetAppend
                                                  (Data.Monoid.Dual
                                                     (Data.Monoid.Endo
                                                        Happstack.Server.Internal.Types.Response)))>_R))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                 <GHC.Types.IO>_R
                                                 <(Data.Either.Either
                                                     Happstack.Server.Internal.Types.Response
                                                     Happstack.Server.Internal.Types.Response,
                                                   Happstack.Server.Internal.Monads.SetAppend
                                                     (Data.Monoid.Dual
                                                        (Data.Monoid.Endo
                                                           Happstack.Server.Internal.Types.Response)))>_N))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                      <Happstack.Server.Internal.Monads.SetAppend
                                                         (Data.Monoid.Dual
                                                            (Data.Monoid.Endo
                                                               Happstack.Server.Internal.Types.Response))>_N
                                                      <Control.Monad.Trans.Maybe.MaybeT
                                                         GHC.Types.IO>_R
                                                      <Data.Either.Either
                                                         Happstack.Server.Internal.Types.Response
                                                         Happstack.Server.Internal.Types.Response>_N))
                                            (Trans
                                                 (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                           <Happstack.Server.Internal.Types.Response>_N
                                                           (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                GHC.Types.IO>_N)
                                                           <Happstack.Server.Internal.Types.Response>_N))
                                                 (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                           <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Happstack.Server.Internal.Types.Request>_R
                                  <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                  <Happstack.Server.Internal.Types.Response>_N)))) -}
b8b962fe8f1132c00675913763b7edd0
  main8 ::
    Happstack.Server.Internal.Types.Request
    -> Control.Monad.Trans.Maybe.MaybeT
         GHC.Types.IO
         (Data.Either.Either Happstack.Server.Internal.Types.Response (),
          Happstack.Server.Internal.Monads.SetAppend
            (Data.Monoid.Dual
               (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- Arity: 1,
     Unfolding: (\ ds :: Happstack.Server.Internal.Types.Request ->
                 Main.main_a20) -}
4d7e1a61bf24ff190ad20d860a978f06
  main9 ::
    Happstack.Server.Internal.Types.Response
    -> Happstack.Server.Internal.Types.Response
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ r :: Happstack.Server.Internal.Types.Response ->
                 case r of wild {
                   Happstack.Server.Internal.Types.Response ds ds1 ds2 ds3 ds4
                   -> Happstack.Server.Internal.Types.Response
                        Happstack.Server.Response.$fToMessage()1
                        ds1
                        ds2
                        ds3
                        ds4
                   Happstack.Server.Internal.Types.SendFile ds ds1 ds2 ds3 ds4 ds5 ds6
                   -> Happstack.Server.Internal.Types.SendFile
                        Happstack.Server.Response.$fToMessage()1
                        ds1
                        ds2
                        ds3
                        ds4
                        ds5
                        ds6 }) -}
5012ad01e3cd591d6550276e1046eee7
  main_a20 ::
    Control.Monad.Trans.Maybe.MaybeT
      GHC.Types.IO
      (Data.Either.Either Happstack.Server.Internal.Types.Response (),
       Happstack.Server.Internal.Monads.SetAppend
         (Data.Monoid.Dual
            (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
  {- Unfolding: (Happstack.Server.Internal.Monads.$wa6
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   Main.main9) -}
dad67630a0277179d47613cfd53979b9
  main_eta :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "users"#) -}
b2dc2aa80c4178b4e745a789422c6696
  main_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.SqlBackend
      (Control.Monad.Logger.NoLoggingT
         (Control.Monad.Trans.Resource.Internal.ResourceT
            (Happstack.Server.Internal.Monads.ServerPartT GHC.Types.IO)))
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.Source
            GHC.Types.IO
            (Database.Persist.Class.PersistEntity.Entity Main.User)))
  {- Unfolding: (Main.main38
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter Main.User))
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt Main.User))) -}
d91dc27aa6b09602eeb616f46c9135d1
  main_w3 ::
    [Database.Persist.Class.PersistEntity.Entity Main.User]
    -> Control.Monad.Trans.Reader.ReaderT
         Happstack.Server.Internal.Types.Request
         (Happstack.Server.Internal.Monads.WebT GHC.Types.IO)
         Happstack.Server.Internal.Types.Response
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ users :: [Database.Persist.Class.PersistEntity.Entity
                               Main.User] ->
                 let {
                   a141 :: Data.ByteString.Lazy.Internal.ByteString
                   = Data.ByteString.Builder.toLazyByteString
                       (Data.Aeson.Encode.ByteString.encodeToBuilder
                          (Main.$sencode3 users))
                 } in
                 let {
                   a142 :: Happstack.Server.Internal.Types.Response
                   = Happstack.Server.Internal.Types.Response
                       Happstack.Server.Response.$fToMessage()1
                       (Data.Map.Base.Tip
                          @ Data.ByteString.Internal.ByteString
                          @ Happstack.Server.Internal.Types.HeaderPair)
                       Happstack.Server.Internal.Types.nullRsFlags
                       a141
                       (GHC.Base.Nothing
                          @ (Happstack.Server.Internal.Types.Response
                             -> GHC.Types.IO Happstack.Server.Internal.Types.Response))
                 } in
                 let {
                   a143 :: Data.Either.Either
                             Happstack.Server.Internal.Types.Response
                             Happstack.Server.Internal.Types.Response
                   = Data.Either.Right
                       @ Happstack.Server.Internal.Types.Response
                       @ Happstack.Server.Internal.Types.Response
                       a142
                 } in
                 let {
                   a144 :: (Data.Either.Either
                              Happstack.Server.Internal.Types.Response
                              Happstack.Server.Internal.Types.Response,
                            Happstack.Server.Internal.Monads.SetAppend
                              (Data.Monoid.Dual
                                 (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                   = (a143, Main.main11)
                 } in
                 let {
                   lvl80 :: GHC.Base.Maybe
                              (Data.Either.Either
                                 Happstack.Server.Internal.Types.Response
                                 Happstack.Server.Internal.Types.Response,
                               Happstack.Server.Internal.Monads.SetAppend
                                 (Data.Monoid.Dual
                                    (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                   = GHC.Base.Just
                       @ (Data.Either.Either
                            Happstack.Server.Internal.Types.Response
                            Happstack.Server.Internal.Types.Response,
                          Happstack.Server.Internal.Monads.SetAppend
                            (Data.Monoid.Dual
                               (Data.Monoid.Endo Happstack.Server.Internal.Types.Response)))
                       a144
                 } in
                 Main.main10
                   Main.main8
                     `cast`
                   (Trans
                        (<Happstack.Server.Internal.Types.Request>_R
                         ->_R Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                            <Happstack.Server.Internal.Monads.SetAppend
                                               (Data.Monoid.Dual
                                                  (Data.Monoid.Endo
                                                     Happstack.Server.Internal.Types.Response))>_N
                                            <Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO>_R
                                            <Data.Either.Either
                                               Happstack.Server.Internal.Types.Response ()>_N))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                 <Happstack.Server.Internal.Types.Response>_N
                                                 (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                      <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                      GHC.Types.IO>_N)
                                                 <()>_N))
                                       (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                 <GHC.Types.IO>_R) <()>_N)))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Happstack.Server.Internal.Types.Request>_R
                                  <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                  <()>_N)))
                   (\ ds :: Happstack.Server.Internal.Types.Request
                      eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    (# eta, lvl80 #))
                     `cast`
                   (Trans
                        (<Happstack.Server.Internal.Types.Request>_R
                         ->_R Trans
                                  (Sym (GHC.Types.NTCo:IO[0]
                                            <GHC.Base.Maybe
                                               (Data.Either.Either
                                                  Happstack.Server.Internal.Types.Response
                                                  Happstack.Server.Internal.Types.Response,
                                                Happstack.Server.Internal.Monads.SetAppend
                                                  (Data.Monoid.Dual
                                                     (Data.Monoid.Endo
                                                        Happstack.Server.Internal.Types.Response)))>_R))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Maybe.NTCo:MaybeT[0]
                                                 <GHC.Types.IO>_R
                                                 <(Data.Either.Either
                                                     Happstack.Server.Internal.Types.Response
                                                     Happstack.Server.Internal.Types.Response,
                                                   Happstack.Server.Internal.Monads.SetAppend
                                                     (Data.Monoid.Dual
                                                        (Data.Monoid.Endo
                                                           Happstack.Server.Internal.Types.Response)))>_N))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Writer.Lazy.NTCo:WriterT[0]
                                                      <Happstack.Server.Internal.Monads.SetAppend
                                                         (Data.Monoid.Dual
                                                            (Data.Monoid.Endo
                                                               Happstack.Server.Internal.Types.Response))>_N
                                                      <Control.Monad.Trans.Maybe.MaybeT
                                                         GHC.Types.IO>_R
                                                      <Data.Either.Either
                                                         Happstack.Server.Internal.Types.Response
                                                         Happstack.Server.Internal.Types.Response>_N))
                                            (Trans
                                                 (Sym (Control.Monad.Trans.Error.NTCo:ErrorT[0]
                                                           <Happstack.Server.Internal.Types.Response>_N
                                                           (Happstack.Server.Internal.Monads.NTCo:FilterT[0]
                                                                <Happstack.Server.Internal.Types.Response>_N <Control.Monad.Trans.Maybe.MaybeT
                                                                                                                GHC.Types.IO>_N)
                                                           <Happstack.Server.Internal.Types.Response>_N))
                                                 (Sym (Happstack.Server.Internal.Monads.NTCo:WebT[0]
                                                           <GHC.Types.IO>_R) <Happstack.Server.Internal.Types.Response>_N)))))
                        (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                  <Happstack.Server.Internal.Types.Request>_R
                                  <Happstack.Server.Internal.Monads.WebT GHC.Types.IO>_R
                                  <Happstack.Server.Internal.Types.Response>_N)))) -}
76b10daf160ab696cb78c81513b68518
  playlistCollaborators :: Main.Playlist -> [Main.User]
  RecSel Main.Playlist
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Playlist ->
                 case ds of wild { Main.Playlist ds1 ds2 -> ds2 }) -}
cc53528af8df5de1d14c40ae06e5c8a1
  playlistSongs :: Main.Playlist -> [Main.Song]
  RecSel Main.Playlist
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Playlist ->
                 case ds of wild { Main.Playlist ds1 ds2 -> ds1 }) -}
4e0afa76a6979c41d0989ff343a359f3
  songName :: Main.Song -> GHC.Base.String
  RecSel Main.Song
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(U,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Song ->
                 case ds of wild { Main.Song ds1 ds2 -> ds1 }) -}
9c41dcfe98d7c41bb649356f3e6a5be1
  songUrl :: Main.Song -> GHC.Base.String
  RecSel Main.Song
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Song ->
                 case ds of wild { Main.Song ds1 ds2 -> ds2 }) -}
261e99bff73ad820977b6332d53528b9
  unPlaylistKey ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistStore.BackendKey
         Database.Persist.Sql.Types.SqlBackend
  RecSel Main.R:KeyPlaylist
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.unPlaylistKey1
                  `cast`
                (<Database.Persist.Class.PersistEntity.Key Main.Playlist>_R
                 ->_R Trans
                          (Sub (Main.TFCo:R:KeyPlaylist[0])) (Main.NTCo:R:KeyPlaylist[0])) -}
261e99bff73ad820977b6332d53528b9
  unPlaylistKey1 ::
    Database.Persist.Class.PersistEntity.Key Main.Playlist
    -> Database.Persist.Class.PersistEntity.Key Main.Playlist
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Key Main.Playlist ->
                 ds) -}
49814fff28b1b1012fadefc14273c7cd
  unSongKey ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistStore.BackendKey
         Database.Persist.Sql.Types.SqlBackend
  RecSel Main.R:KeySong
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.unSongKey1
                  `cast`
                (<Database.Persist.Class.PersistEntity.Key Main.Song>_R
                 ->_R Trans
                          (Sub (Main.TFCo:R:KeySong[0])) (Main.NTCo:R:KeySong[0])) -}
49814fff28b1b1012fadefc14273c7cd
  unSongKey1 ::
    Database.Persist.Class.PersistEntity.Key Main.Song
    -> Database.Persist.Class.PersistEntity.Key Main.Song
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Key Main.Song ->
                 ds) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  unUserKey ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistStore.BackendKey
         Database.Persist.Sql.Types.SqlBackend
  RecSel Main.R:KeyUser
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Main.unUserKey1
                  `cast`
                (<Database.Persist.Class.PersistEntity.Key Main.User>_R
                 ->_R Trans
                          (Sub (Main.TFCo:R:KeyUser[0])) (Main.NTCo:R:KeyUser[0])) -}
ef3f6fb37c44a5c754ab9177dd6f7c32
  unUserKey1 ::
    Database.Persist.Class.PersistEntity.Key Main.User
    -> Database.Persist.Class.PersistEntity.Key Main.User
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Database.Persist.Class.PersistEntity.Key Main.User ->
                 ds) -}
1b89be341385016b4a8669d553066f9b
  userSoundCloudId :: Main.User -> GHC.Base.String
  RecSel Main.User
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.User -> case ds of wild { Main.User ds1 -> ds1 }) -}
instance GHC.Generics.Constructor [Main.C1_0Playlist]
  = Main.$fConstructorPlaylist
instance GHC.Generics.Constructor [Main.C1_0Song]
  = Main.$fConstructorSong
instance GHC.Generics.Constructor [Main.C1_0User]
  = Main.$fConstructorUser
instance Data.Data.Data [Main.Playlist] = Main.$fDataPlaylist
instance Data.Data.Data [Main.Song] = Main.$fDataSong
instance Data.Data.Data [Main.User] = Main.$fDataUser
instance GHC.Generics.Datatype [Main.D1Playlist]
  = Main.$fDatatypePlaylist
instance GHC.Generics.Datatype [Main.D1Song] = Main.$fDatatypeSong
instance GHC.Generics.Datatype [Main.D1User] = Main.$fDatatypeUser
instance GHC.Classes.Eq [Database.Persist.Class.PersistEntity.Key]
  = Main.$fEqKey
instance GHC.Classes.Eq [Database.Persist.Class.PersistEntity.Key]
  = Main.$fEqKey0
instance GHC.Classes.Eq [Database.Persist.Class.PersistEntity.Key]
  = Main.$fEqKey1
instance GHC.Classes.Eq [Main.Playlist] = Main.$fEqPlaylist
instance GHC.Classes.Eq [Main.Song] = Main.$fEqSong
instance GHC.Classes.Eq [Main.User] = Main.$fEqUser
instance Web.HttpApiData.Internal.FromHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromHttpApiDataKey
instance Web.HttpApiData.Internal.FromHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromHttpApiDataKey0
instance Web.HttpApiData.Internal.FromHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromHttpApiDataKey1
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fFromJSONEntity
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fFromJSONEntity0
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fFromJSONEntity1
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromJSONKey
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromJSONKey0
instance Data.Aeson.Types.Class.FromJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fFromJSONKey1
instance Data.Aeson.Types.Class.FromJSON [Main.Playlist]
  = Main.$fFromJSONPlaylist
instance Data.Aeson.Types.Class.FromJSON [Main.Song]
  = Main.$fFromJSONSong
instance Data.Aeson.Types.Class.FromJSON [Main.User]
  = Main.$fFromJSONUser
instance GHC.Generics.Generic [Main.Playlist]
  = Main.$fGenericPlaylist
instance GHC.Generics.Generic [Main.Song] = Main.$fGenericSong
instance GHC.Generics.Generic [Main.User] = Main.$fGenericUser
instance GHC.Classes.Ord [Database.Persist.Class.PersistEntity.Key]
  = Main.$fOrdKey
instance GHC.Classes.Ord [Database.Persist.Class.PersistEntity.Key]
  = Main.$fOrdKey0
instance GHC.Classes.Ord [Database.Persist.Class.PersistEntity.Key]
  = Main.$fOrdKey1
instance Web.PathPieces.PathPiece [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPathPieceKey
instance Web.PathPieces.PathPiece [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPathPieceKey0
instance Web.PathPieces.PathPiece [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPathPieceKey1
instance Database.Persist.Class.PersistEntity.PersistEntity [Main.Playlist]
  = Main.$fPersistEntityPlaylist
instance Database.Persist.Class.PersistEntity.PersistEntity [Main.Song]
  = Main.$fPersistEntitySong
instance Database.Persist.Class.PersistEntity.PersistEntity [Main.User]
  = Main.$fPersistEntityUser
instance Database.Persist.Class.PersistField.PersistField [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldKey
instance Database.Persist.Class.PersistField.PersistField [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldKey0
instance Database.Persist.Class.PersistField.PersistField [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldKey1
instance Database.Persist.Class.PersistField.PersistField [Main.Playlist]
  = Main.$fPersistFieldPlaylist
instance Database.Persist.Class.PersistField.PersistField [Main.Song]
  = Main.$fPersistFieldSong
instance Database.Persist.Sql.Class.PersistFieldSql [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldSqlKey
instance Database.Persist.Sql.Class.PersistFieldSql [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldSqlKey0
instance Database.Persist.Sql.Class.PersistFieldSql [Database.Persist.Class.PersistEntity.Key]
  = Main.$fPersistFieldSqlKey1
instance Database.Persist.Sql.Class.PersistFieldSql [Main.Playlist]
  = Main.$fPersistFieldSqlPlaylist
instance Database.Persist.Sql.Class.PersistFieldSql [Main.Song]
  = Main.$fPersistFieldSqlSong
instance Database.Persist.Sql.Class.PersistFieldSql [Main.User]
  = Main.$fPersistFieldSqlUser
instance Database.Persist.Class.PersistField.PersistField [Main.User]
  = Main.$fPersistFieldUser
instance GHC.Read.Read [Database.Persist.Class.PersistEntity.Key]
  = Main.$fReadKey
instance GHC.Read.Read [Database.Persist.Class.PersistEntity.Key]
  = Main.$fReadKey0
instance GHC.Read.Read [Database.Persist.Class.PersistEntity.Key]
  = Main.$fReadKey1
instance GHC.Generics.Selector [Main.S1_0_0Playlist]
  = Main.$fSelectorPlaylist
instance GHC.Generics.Selector [Main.S1_0_1Playlist]
  = Main.$fSelectorPlaylist0
instance GHC.Generics.Selector [Main.S1_0_0Song]
  = Main.$fSelectorSong
instance GHC.Generics.Selector [Main.S1_0_1Song]
  = Main.$fSelectorSong0
instance GHC.Generics.Selector [Main.S1_0_0User]
  = Main.$fSelectorUser
instance GHC.Show.Show [Database.Persist.Class.PersistEntity.Key]
  = Main.$fShowKey
instance GHC.Show.Show [Database.Persist.Class.PersistEntity.Key]
  = Main.$fShowKey0
instance GHC.Show.Show [Database.Persist.Class.PersistEntity.Key]
  = Main.$fShowKey1
instance GHC.Show.Show [Main.Playlist] = Main.$fShowPlaylist
instance GHC.Show.Show [Main.Song] = Main.$fShowSong
instance GHC.Show.Show [Main.User] = Main.$fShowUser
instance Database.Persist.Class.PersistStore.ToBackendKey [Database.Persist.Sql.Types.SqlBackend,
                                                           Main.Playlist]
  = Main.$fToBackendKeySqlBackendPlaylist
instance Database.Persist.Class.PersistStore.ToBackendKey [Database.Persist.Sql.Types.SqlBackend,
                                                           Main.Song]
  = Main.$fToBackendKeySqlBackendSong
instance Database.Persist.Class.PersistStore.ToBackendKey [Database.Persist.Sql.Types.SqlBackend,
                                                           Main.User]
  = Main.$fToBackendKeySqlBackendUser
instance Web.HttpApiData.Internal.ToHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToHttpApiDataKey
instance Web.HttpApiData.Internal.ToHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToHttpApiDataKey0
instance Web.HttpApiData.Internal.ToHttpApiData [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToHttpApiDataKey1
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fToJSONEntity
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fToJSONEntity0
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Entity]
  = Main.$fToJSONEntity1
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToJSONKey
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToJSONKey0
instance Data.Aeson.Types.Class.ToJSON [Database.Persist.Class.PersistEntity.Key]
  = Main.$fToJSONKey1
instance Data.Aeson.Types.Class.ToJSON [Main.Playlist]
  = Main.$fToJSONPlaylist
instance Data.Aeson.Types.Class.ToJSON [Main.Song]
  = Main.$fToJSONSong
instance Data.Aeson.Types.Class.ToJSON [Main.User]
  = Main.$fToJSONUser
family instance Database.Persist.Class.PersistEntity.EntityField [Main.User]
  = Main.TFCo:R:EntityFieldUsertyp
family instance Database.Persist.Class.PersistEntity.EntityField [Main.Playlist]
  = Main.TFCo:R:EntityFieldPlaylisttyp
family instance Database.Persist.Class.PersistEntity.EntityField [Main.Song]
  = Main.TFCo:R:EntityFieldSongtyp
family instance Database.Persist.Class.PersistEntity.Key [Main.User]
  = Main.TFCo:R:KeyUser
family instance Database.Persist.Class.PersistEntity.Key [Main.Playlist]
  = Main.TFCo:R:KeyPlaylist
family instance Database.Persist.Class.PersistEntity.Key [Main.Song]
  = Main.TFCo:R:KeySong
family instance Database.Persist.Class.PersistEntity.PersistEntityBackend [Main.User]
  = Main.TFCo:R:PersistEntityBackendUser
family instance Database.Persist.Class.PersistEntity.PersistEntityBackend [Main.Playlist]
  = Main.TFCo:R:PersistEntityBackendPlaylist
family instance Database.Persist.Class.PersistEntity.PersistEntityBackend [Main.Song]
  = Main.TFCo:R:PersistEntityBackendSong
family instance GHC.Generics.Rep [Main.Playlist]
  = Main.Rep_Playlist
family instance GHC.Generics.Rep [Main.User] = Main.Rep_User
family instance GHC.Generics.Rep [Main.Song] = Main.Rep_Song
family instance Database.Persist.Class.PersistEntity.Unique [Main.User]
  = Main.TFCo:R:UniqueUser
family instance Database.Persist.Class.PersistEntity.Unique [Main.Playlist]
  = Main.TFCo:R:UniquePlaylist
family instance Database.Persist.Class.PersistEntity.Unique [Main.Song]
  = Main.TFCo:R:UniqueSong
"SPEC/Main $WPlaylistId @ (Key Playlist)" [ALWAYS] forall dt :: Database.Persist.Class.PersistEntity.Key
                                                                  Main.Playlist
                                                                ~ Database.Persist.Class.PersistEntity.Key
                                                                    Main.Playlist
  Main.$WPlaylistId @ (Database.Persist.Class.PersistEntity.Key
                         Main.Playlist)
                    dt
  = Main.$fPersistEntityPlaylist_$s$WPlaylistId
"SPEC/Main $WSongId @ (Key Song)" [ALWAYS] forall dt :: Database.Persist.Class.PersistEntity.Key
                                                          Main.Song
                                                        ~ Database.Persist.Class.PersistEntity.Key
                                                            Main.Song
  Main.$WSongId @ (Database.Persist.Class.PersistEntity.Key
                     Main.Song)
                dt
  = Main.$fPersistEntitySong_$s$WSongId
"SPEC/Main $WUserId @ (Key User)" [ALWAYS] forall dt :: Database.Persist.Class.PersistEntity.Key
                                                          Main.User
                                                        ~ Database.Persist.Class.PersistEntity.Key
                                                            Main.User
  Main.$WUserId @ (Database.Persist.Class.PersistEntity.Key
                     Main.User)
                dt
  = Main.$fPersistEntityUser_$s$WUserId
"SPEC/Main $dmconFixity @ C1_0Playlist" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                           Main.C1_0Playlist
  GHC.Generics.$dmconFixity @ Main.C1_0Playlist $dConstructor
  = Main.$fConstructorPlaylist_$s$dmconFixity
"SPEC/Main $dmconFixity @ C1_0Song" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                       Main.C1_0Song
  GHC.Generics.$dmconFixity @ Main.C1_0Song $dConstructor
  = Main.$fConstructorSong_$s$dmconFixity
"SPEC/Main $dmconFixity @ C1_0User" [ALWAYS] forall $dConstructor :: GHC.Generics.Constructor
                                                                       Main.C1_0User
  GHC.Generics.$dmconFixity @ Main.C1_0User $dConstructor
  = Main.$fConstructorUser_$s$dmconFixity
"SPEC/Main $dmdataCast1 @ Playlist" [ALWAYS] forall $dData :: Data.Data.Data
                                                                Main.Playlist
  Data.Data.$dmdataCast1 @ Main.Playlist $dData
  = Main.$fDataPlaylist_$s$dmdataCast1
"SPEC/Main $dmdataCast1 @ Song" [ALWAYS] forall $dData :: Data.Data.Data
                                                            Main.Song
  Data.Data.$dmdataCast1 @ Main.Song $dData
  = Main.$fDataSong_$s$dmdataCast1
"SPEC/Main $dmdataCast1 @ User" [ALWAYS] forall $dData :: Data.Data.Data
                                                            Main.User
  Data.Data.$dmdataCast1 @ Main.User $dData
  = Main.$fDataUser_$s$dmdataCast1
"SPEC/Main $dmdataCast2 @ Playlist" [ALWAYS] forall $dData :: Data.Data.Data
                                                                Main.Playlist
  Data.Data.$dmdataCast2 @ Main.Playlist $dData
  = Main.$fDataPlaylist_$s$dmdataCast2
"SPEC/Main $dmdataCast2 @ Song" [ALWAYS] forall $dData :: Data.Data.Data
                                                            Main.Song
  Data.Data.$dmdataCast2 @ Main.Song $dData
  = Main.$fDataSong_$s$dmdataCast2
"SPEC/Main $dmdataCast2 @ User" [ALWAYS] forall $dData :: Data.Data.Data
                                                            Main.User
  Data.Data.$dmdataCast2 @ Main.User $dData
  = Main.$fDataUser_$s$dmdataCast2
"SPEC/Main $dmisNewtype @ D1Playlist" [ALWAYS] forall $dDatatype :: GHC.Generics.Datatype
                                                                      Main.D1Playlist
  GHC.Generics.$dmisNewtype @ Main.D1Playlist $dDatatype
  = Main.$fDatatypePlaylist_$s$dmisNewtype
"SPEC/Main $dmisNewtype @ D1Song" [ALWAYS] forall $dDatatype :: GHC.Generics.Datatype
                                                                  Main.D1Song
  GHC.Generics.$dmisNewtype @ Main.D1Song $dDatatype
  = Main.$fDatatypeSong_$s$dmisNewtype
"SPEC/Main $dmisNewtype @ D1User" [ALWAYS] forall $dDatatype :: GHC.Generics.Datatype
                                                                  Main.D1User
  GHC.Generics.$dmisNewtype @ Main.D1User $dDatatype
  = Main.$fDatatypeUser_$s$dmisNewtype
"SPEC/Main $dmreadsPrec @ (Key Playlist)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      (Database.Persist.Class.PersistEntity.Key
                                                                         Main.Playlist)
  GHC.Read.$dmreadsPrec @ (Database.Persist.Class.PersistEntity.Key
                             Main.Playlist)
                        $dRead
  = Main.$fReadKey0_$s$dmreadsPrec
"SPEC/Main $dmreadsPrec @ (Key Song)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  (Database.Persist.Class.PersistEntity.Key
                                                                     Main.Song)
  GHC.Read.$dmreadsPrec @ (Database.Persist.Class.PersistEntity.Key
                             Main.Song)
                        $dRead
  = Main.$fReadKey_$s$dmreadsPrec
"SPEC/Main $dmreadsPrec @ (Key User)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  (Database.Persist.Class.PersistEntity.Key
                                                                     Main.User)
  GHC.Read.$dmreadsPrec @ (Database.Persist.Class.PersistEntity.Key
                             Main.User)
                        $dRead
  = Main.$fReadKey1_$s$dmreadsPrec
"SPEC/Main $fApplicativeErrorT @ Response @ (FilterT
                                              Response (MaybeT IO))" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                                                                         (Control.Monad.Trans.Error.ErrorT
                                                                                                                                                            Happstack.Server.Internal.Types.Response
                                                                                                                                                            (Happstack.Server.Internal.Monads.FilterT
                                                                                                                                                               Happstack.Server.Internal.Types.Response
                                                                                                                                                               (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                                                                  GHC.Types.IO)))
                                                                                                                                          $dFunctor1 :: GHC.Base.Functor
                                                                                                                                                          (Happstack.Server.Internal.Monads.FilterT
                                                                                                                                                             Happstack.Server.Internal.Types.Response
                                                                                                                                                             (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                                                                GHC.Types.IO))
                                                                                                                                          $dMonad :: GHC.Base.Monad
                                                                                                                                                       (Happstack.Server.Internal.Monads.FilterT
                                                                                                                                                          Happstack.Server.Internal.Types.Response
                                                                                                                                                          (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                                                             GHC.Types.IO))
  Control.Monad.Trans.Error.$fApplicativeErrorT @ Happstack.Server.Internal.Types.Response
                                                @ (Happstack.Server.Internal.Monads.FilterT
                                                     Happstack.Server.Internal.Types.Response
                                                     (Control.Monad.Trans.Maybe.MaybeT
                                                        GHC.Types.IO))
                                                $dFunctor
                                                $dFunctor1
                                                $dMonad
  = Main.$s$fApplicativeErrorT
"SPEC/Main $fApplicativeFilterT @ Response @ (MaybeT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                         (Happstack.Server.Internal.Monads.FilterT
                                                                                            Happstack.Server.Internal.Types.Response
                                                                                            (Control.Monad.Trans.Maybe.MaybeT
                                                                                               GHC.Types.IO))
                                                                          $dApplicative :: GHC.Base.Applicative
                                                                                             (Control.Monad.Trans.Maybe.MaybeT
                                                                                                GHC.Types.IO)
  Happstack.Server.Internal.Monads.$fApplicativeFilterT @ Happstack.Server.Internal.Types.Response
                                                        @ (Control.Monad.Trans.Maybe.MaybeT
                                                             GHC.Types.IO)
                                                        $dFunctor
                                                        $dApplicative
  = Main.$s$fApplicativeErrorT_$s$fApplicativeFilterT
"SPEC/Main $fApplicativeMaybeT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                    (Control.Monad.Trans.Maybe.MaybeT
                                                                       GHC.Types.IO)
                                                     $dFunctor1 :: GHC.Base.Functor GHC.Types.IO
                                                     $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Trans.Maybe.$fApplicativeMaybeT @ GHC.Types.IO
                                                $dFunctor
                                                $dFunctor1
                                                $dMonad
  = Main.$s$fApplicativeErrorT_$s$fApplicativeMaybeT
"SPEC/Main $fApplicativeNoLoggingT @ (ResourceT (ServerPartT IO))" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                                  (Control.Monad.Logger.NoLoggingT
                                                                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                        (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                           GHC.Types.IO)))
                                                                                   $dMonad :: GHC.Base.Monad
                                                                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                   (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                      GHC.Types.IO))
  Control.Monad.Logger.$fApplicativeNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                    (Happstack.Server.Internal.Monads.ServerPartT
                                                       GHC.Types.IO))
                                               $dFunctor
                                               $dMonad
  = Main.$s$fApplicativeNoLoggingT5
"SPEC/Main $fApplicativeNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                    (Control.Monad.Logger.NoLoggingT
                                                                                       (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                          GHC.Types.IO))
                                                                     $dMonad :: GHC.Base.Monad
                                                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                     GHC.Types.IO)
  Control.Monad.Logger.$fApplicativeNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                    GHC.Types.IO)
                                               $dFunctor
                                               $dMonad
  = Main.$s$fApplicativeNoLoggingT
"SPEC/Main $fApplicativeResourceT @ (ServerPartT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                        (Happstack.Server.Internal.Monads.ServerPartT
                                                                                           GHC.Types.IO))
                                                                      $dApplicative :: GHC.Base.Applicative
                                                                                         (Happstack.Server.Internal.Monads.ServerPartT
                                                                                            GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT @ (Happstack.Server.Internal.Monads.ServerPartT
                                                                    GHC.Types.IO)
                                                               $dFunctor
                                                               $dApplicative
  = Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT1
"SPEC/Main $fApplicativeResourceT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                       (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                          GHC.Types.IO)
                                                        $dApplicative :: GHC.Base.Applicative
                                                                           GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT @ GHC.Types.IO
                                                               $dFunctor
                                                               $dApplicative
  = Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT
"SPEC/Main $fApplicativeResourceT_$c*> @ (ServerPartT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                             (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                GHC.Types.IO))
                                                                           $dApplicative :: GHC.Base.Applicative
                                                                                              (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c*> @ (Happstack.Server.Internal.Monads.ServerPartT
                                                                         GHC.Types.IO)
                                                                    $dFunctor
                                                                    $dApplicative
  = Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c*>1
"SPEC/Main $fApplicativeResourceT_$c*> @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                               GHC.Types.IO)
                                                             $dApplicative :: GHC.Base.Applicative
                                                                                GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c*> @ GHC.Types.IO
                                                                    $dFunctor
                                                                    $dApplicative
  = Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c*>
"SPEC/Main $fApplicativeResourceT_$c<* @ (ServerPartT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                             (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                GHC.Types.IO))
                                                                           $dApplicative :: GHC.Base.Applicative
                                                                                              (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c<* @ (Happstack.Server.Internal.Monads.ServerPartT
                                                                         GHC.Types.IO)
                                                                    $dFunctor
                                                                    $dApplicative
  = Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c<*1
"SPEC/Main $fApplicativeResourceT_$c<* @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                               GHC.Types.IO)
                                                             $dApplicative :: GHC.Base.Applicative
                                                                                GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c<* @ GHC.Types.IO
                                                                    $dFunctor
                                                                    $dApplicative
  = Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$c<*
"SPEC/Main $fApplicativeResourceT_$cpure @ (ServerPartT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                               (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                  GHC.Types.IO))
                                                                             $dApplicative :: GHC.Base.Applicative
                                                                                                (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                   GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$cpure @ (Happstack.Server.Internal.Monads.ServerPartT
                                                                           GHC.Types.IO)
                                                                      $dFunctor
                                                                      $dApplicative
  = Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$cpure1
"SPEC/Main $fApplicativeResourceT_$cpure @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                 GHC.Types.IO)
                                                               $dApplicative :: GHC.Base.Applicative
                                                                                  GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$cpure @ GHC.Types.IO
                                                                      $dFunctor
                                                                      $dApplicative
  = Main.$s$fApplicativeNoLoggingT_$s$fApplicativeResourceT_$cpure
"SPEC/Main $fApplicativeServerPartT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                         (Happstack.Server.Internal.Monads.ServerPartT
                                                                            GHC.Types.IO)
                                                          $dMonad :: GHC.Base.Monad GHC.Types.IO
                                                          $dFunctor1 :: GHC.Base.Functor
                                                                          GHC.Types.IO
  Happstack.Server.Internal.Monads.$fApplicativeServerPartT @ GHC.Types.IO
                                                            $dFunctor
                                                            $dMonad
                                                            $dFunctor1
  = Main.$s$fAlternativeServerPartT_$s$fApplicativeServerPartT
"SPEC/Main $fApplicativeServerPartT_$c*> @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                              (Happstack.Server.Internal.Monads.ServerPartT
                                                                                 GHC.Types.IO)
                                                               $dMonad :: GHC.Base.Monad
                                                                            GHC.Types.IO
                                                               $dFunctor1 :: GHC.Base.Functor
                                                                               GHC.Types.IO
  Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$c*> @ GHC.Types.IO
                                                                 $dFunctor
                                                                 $dMonad
                                                                 $dFunctor1
  = Main.$s$fAlternativeServerPartT_$s$fApplicativeServerPartT_$c*>
"SPEC/Main $fApplicativeServerPartT_$c<* @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                              (Happstack.Server.Internal.Monads.ServerPartT
                                                                                 GHC.Types.IO)
                                                               $dMonad :: GHC.Base.Monad
                                                                            GHC.Types.IO
                                                               $dFunctor1 :: GHC.Base.Functor
                                                                               GHC.Types.IO
  Happstack.Server.Internal.Monads.$fApplicativeServerPartT_$c<* @ GHC.Types.IO
                                                                 $dFunctor
                                                                 $dMonad
                                                                 $dFunctor1
  = Main.$s$fAlternativeServerPartT_$s$fApplicativeServerPartT_$c<*
"SPEC/Main $fApplicativeWebT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                  (Happstack.Server.Internal.Monads.WebT
                                                                     GHC.Types.IO)
                                                   $dMonad :: GHC.Base.Monad GHC.Types.IO
                                                   $dFunctor1 :: GHC.Base.Functor GHC.Types.IO
  Happstack.Server.Internal.Monads.$fApplicativeWebT @ GHC.Types.IO
                                                     $dFunctor
                                                     $dMonad
                                                     $dFunctor1
  = Main.$s$fApplicativeReaderT_$s$fApplicativeWebT
"SPEC/Main $fData[] @ Song" [ALWAYS] forall $dTypeable :: Data.Typeable.Internal.Typeable
                                                            [Main.Song]
                                            $dData :: Data.Data.Data Main.Song
  Data.Data.$fData[] @ Main.Song $dTypeable $dData
  = Main.$fDataPlaylist_$s$fData[]
"SPEC/Main $fData[] @ User" [ALWAYS] forall $dTypeable :: Data.Typeable.Internal.Typeable
                                                            [Main.User]
                                            $dData :: Data.Data.Data Main.User
  Data.Data.$fData[] @ Main.User $dTypeable $dData
  = Main.$fDataPlaylist_$s$fData[]1
"SPEC/Main $fData[]_$cdataCast1 @ Song" [ALWAYS] forall $dTypeable :: Data.Typeable.Internal.Typeable
                                                                        [Main.Song]
                                                        $dData :: Data.Data.Data Main.Song
  Data.Data.$fData[]_$cdataCast1 @ Main.Song $dTypeable $dData
  = Main.$fDataPlaylist_$s$fData[]_$cdataCast1
"SPEC/Main $fData[]_$cdataCast1 @ User" [ALWAYS] forall $dTypeable :: Data.Typeable.Internal.Typeable
                                                                        [Main.User]
                                                        $dData :: Data.Data.Data Main.User
  Data.Data.$fData[]_$cdataCast1 @ Main.User $dTypeable $dData
  = Main.$fDataPlaylist_$s$fData[]_$cdataCast2
"SPEC/Main $fFunctorErrorT _ @ (FilterT Response (MaybeT IO))" [ALWAYS] forall @ e
                                                                               $dFunctor :: GHC.Base.Functor
                                                                                              (Happstack.Server.Internal.Monads.FilterT
                                                                                                 Happstack.Server.Internal.Types.Response
                                                                                                 (Control.Monad.Trans.Maybe.MaybeT
                                                                                                    GHC.Types.IO))
  Control.Monad.Trans.Error.$fFunctorErrorT @ e
                                            @ (Happstack.Server.Internal.Monads.FilterT
                                                 Happstack.Server.Internal.Types.Response
                                                 (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                                            $dFunctor
  = Main.$s$fApplicativeErrorT_$s$fFunctorErrorT @ e
"SPEC/Main $fFunctorFilterT _ @ (MaybeT IO)" [ALWAYS] forall @ a141
                                                             $dFunctor :: GHC.Base.Functor
                                                                            (Control.Monad.Trans.Maybe.MaybeT
                                                                               GHC.Types.IO)
  Happstack.Server.Internal.Monads.$fFunctorFilterT @ a141
                                                    @ (Control.Monad.Trans.Maybe.MaybeT
                                                         GHC.Types.IO)
                                                    $dFunctor
  = Main.$s$fApplicativeErrorT_$s$fFunctorFilterT @ a141
"SPEC/Main $fFunctorMaybeT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                GHC.Types.IO
  Control.Monad.Trans.Maybe.$fFunctorMaybeT @ GHC.Types.IO $dFunctor
  = Main.$s$fApplicativeErrorT_$s$fFunctorMaybeT
"SPEC/Main $fFunctorNoLoggingT @ (ResourceT (ServerPartT IO))" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                               (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                  GHC.Types.IO))
  Control.Monad.Logger.$fFunctorNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                (Happstack.Server.Internal.Monads.ServerPartT
                                                   GHC.Types.IO))
                                           $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT1
"SPEC/Main $fFunctorNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                 GHC.Types.IO)
  Control.Monad.Logger.$fFunctorNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                GHC.Types.IO)
                                           $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fFunctorNoLoggingT
"SPEC/Main $fFunctorResourceT @ (ServerPartT IO)" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                 (Happstack.Server.Internal.Monads.ServerPartT
                                                                                    GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fFunctorResourceT @ (Happstack.Server.Internal.Monads.ServerPartT
                                                                GHC.Types.IO)
                                                           $dFunctor
  = Main.$s$fApplicativeNoLoggingT_$s$fFunctorResourceT1
"SPEC/Main $fFunctorResourceT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                   GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fFunctorResourceT @ GHC.Types.IO
                                                           $dFunctor
  = Main.$s$fApplicativeNoLoggingT_$s$fFunctorResourceT
"SPEC/Main $fFunctorServerPartT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                     GHC.Types.IO
  Happstack.Server.Internal.Monads.$fFunctorServerPartT @ GHC.Types.IO
                                                        $dFunctor
  = Main.$s$fAlternativeServerPartT_$s$fFunctorServerPartT
"SPEC/Main $fFunctorWebT @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                              GHC.Types.IO
  Happstack.Server.Internal.Monads.$fFunctorWebT @ GHC.Types.IO
                                                 $dFunctor
  = Main.$s$fApplicativeReaderT_$s$fFunctorWebT
"SPEC/Main $fMonadBaseControlbServerPartT @ IO @ IO" [ALWAYS] forall $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                      GHC.Types.IO
                                                                                      (Happstack.Server.Internal.Monads.ServerPartT
                                                                                         GHC.Types.IO)
                                                                     $dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                             GHC.Types.IO
                                                                                             GHC.Types.IO
  Happstack.Server.Internal.Monads.$fMonadBaseControlbServerPartT @ GHC.Types.IO
                                                                  @ GHC.Types.IO
                                                                  $dMonadBase
                                                                  $dMonadBaseControl
  = Main.$s$fMonadBaseControlbServerPartT
"SPEC/Main $fMonadBaseControlbServerPartT_$cliftBaseWith @ IO @ IO" [ALWAYS] forall $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                     GHC.Types.IO
                                                                                                     (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                        GHC.Types.IO)
                                                                                    $dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                            GHC.Types.IO
                                                                                                            GHC.Types.IO
  Happstack.Server.Internal.Monads.$fMonadBaseControlbServerPartT_$cliftBaseWith @ GHC.Types.IO
                                                                                 @ GHC.Types.IO
                                                                                 $dMonadBase
                                                                                 $dMonadBaseControl
  = Main.$s$fMonadBaseControlbServerPartT_$s$fMonadBaseControlbServerPartT_$cliftBaseWith
"SPEC/Main $fMonadBasebServerPartT @ IO @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                 GHC.Types.IO
                                                              $dApplicative1 :: GHC.Base.Applicative
                                                                                  (Happstack.Server.Internal.Monads.ServerPartT
                                                                                     GHC.Types.IO)
                                                              $dMonad :: GHC.Base.Monad GHC.Types.IO
                                                              $dMonad1 :: GHC.Base.Monad
                                                                            (Happstack.Server.Internal.Monads.ServerPartT
                                                                               GHC.Types.IO)
                                                              $dMonadBase :: Control.Monad.Base.MonadBase
                                                                               GHC.Types.IO
                                                                               GHC.Types.IO
  Happstack.Server.Internal.Monads.$fMonadBasebServerPartT @ GHC.Types.IO
                                                           @ GHC.Types.IO
                                                           $dApplicative
                                                           $dApplicative1
                                                           $dMonad
                                                           $dMonad1
                                                           $dMonadBase
  = Main.$s$fMonadBaseControlbServerPartT_$s$fMonadBasebServerPartT
"SPEC/Main $fMonadBasebServerPartT_$cliftBase @ IO @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                            GHC.Types.IO
                                                                         $dApplicative1 :: GHC.Base.Applicative
                                                                                             (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                GHC.Types.IO)
                                                                         $dMonad :: GHC.Base.Monad
                                                                                      GHC.Types.IO
                                                                         $dMonad1 :: GHC.Base.Monad
                                                                                       (Happstack.Server.Internal.Monads.ServerPartT
                                                                                          GHC.Types.IO)
                                                                         $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                          GHC.Types.IO
                                                                                          GHC.Types.IO
  Happstack.Server.Internal.Monads.$fMonadBasebServerPartT_$cliftBase @ GHC.Types.IO
                                                                      @ GHC.Types.IO
                                                                      $dApplicative
                                                                      $dApplicative1
                                                                      $dMonad
                                                                      $dMonad1
                                                                      $dMonadBase
  = Main.$s$fMonadBaseControlbServerPartT_$s$fMonadBasebServerPartT_$cliftBase
"SPEC/Main $fMonadErrorT @ Response @ (FilterT Response (MaybeT IO))" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                         (Control.Monad.Trans.Error.ErrorT
                                                                                                            Happstack.Server.Internal.Types.Response
                                                                                                            (Happstack.Server.Internal.Monads.FilterT
                                                                                                               Happstack.Server.Internal.Types.Response
                                                                                                               (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                  GHC.Types.IO)))
                                                                                      $dMonad :: GHC.Base.Monad
                                                                                                   (Happstack.Server.Internal.Monads.FilterT
                                                                                                      Happstack.Server.Internal.Types.Response
                                                                                                      (Control.Monad.Trans.Maybe.MaybeT
                                                                                                         GHC.Types.IO))
                                                                                      $dError :: Control.Monad.Trans.Error.Error
                                                                                                   Happstack.Server.Internal.Types.Response
  Control.Monad.Trans.Error.$fMonadErrorT @ Happstack.Server.Internal.Types.Response
                                          @ (Happstack.Server.Internal.Monads.FilterT
                                               Happstack.Server.Internal.Types.Response
                                               (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                                          $dApplicative
                                          $dMonad
                                          $dError
  = Main.$s$fMonadErrorT
"SPEC/Main $fMonadErrorT_$c>> @ Response @ (FilterT
                                             Response (MaybeT IO))" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                                                                           (Control.Monad.Trans.Error.ErrorT
                                                                                                                                                              Happstack.Server.Internal.Types.Response
                                                                                                                                                              (Happstack.Server.Internal.Monads.FilterT
                                                                                                                                                                 Happstack.Server.Internal.Types.Response
                                                                                                                                                                 (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                                                                    GHC.Types.IO)))
                                                                                                                                        $dMonad :: GHC.Base.Monad
                                                                                                                                                     (Happstack.Server.Internal.Monads.FilterT
                                                                                                                                                        Happstack.Server.Internal.Types.Response
                                                                                                                                                        (Control.Monad.Trans.Maybe.MaybeT
                                                                                                                                                           GHC.Types.IO))
                                                                                                                                        $dError :: Control.Monad.Trans.Error.Error
                                                                                                                                                     Happstack.Server.Internal.Types.Response
  Control.Monad.Trans.Error.$fMonadErrorT_$c>> @ Happstack.Server.Internal.Types.Response
                                               @ (Happstack.Server.Internal.Monads.FilterT
                                                    Happstack.Server.Internal.Types.Response
                                                    (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO))
                                               $dApplicative
                                               $dMonad
                                               $dError
  = Main.$s$fMonadErrorT_$s$fMonadErrorT_$c>>
"SPEC/Main $fMonadFilterT @ Response @ (MaybeT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                       (Happstack.Server.Internal.Monads.FilterT
                                                                                          Happstack.Server.Internal.Types.Response
                                                                                          (Control.Monad.Trans.Maybe.MaybeT
                                                                                             GHC.Types.IO))
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 (Control.Monad.Trans.Maybe.MaybeT
                                                                                    GHC.Types.IO)
  Happstack.Server.Internal.Monads.$fMonadFilterT @ Happstack.Server.Internal.Types.Response
                                                  @ (Control.Monad.Trans.Maybe.MaybeT GHC.Types.IO)
                                                  $dApplicative
                                                  $dMonad
  = Main.$s$fApplicativeErrorT_$s$fMonadFilterT
"SPEC/Main $fMonadIOFilterT @ Response @ (MaybeT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                   (Happstack.Server.Internal.Monads.FilterT
                                                                                      Happstack.Server.Internal.Types.Response
                                                                                      (Control.Monad.Trans.Maybe.MaybeT
                                                                                         GHC.Types.IO))
                                                                      $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                     (Control.Monad.Trans.Maybe.MaybeT
                                                                                        GHC.Types.IO)
  Happstack.Server.Internal.Monads.$fMonadIOFilterT @ Happstack.Server.Internal.Types.Response
                                                    @ (Control.Monad.Trans.Maybe.MaybeT
                                                         GHC.Types.IO)
                                                    $dMonad
                                                    $dMonadIO
  = Main.$s$fMonadIOFilterT
"SPEC/Main $fMonadIOMaybeT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                              (Control.Monad.Trans.Maybe.MaybeT
                                                                 GHC.Types.IO)
                                                 $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                GHC.Types.IO
  Control.Monad.Trans.Maybe.$fMonadIOMaybeT @ GHC.Types.IO
                                            $dMonad
                                            $dMonadIO
  = Main.$s$fMonadIOFilterT_$s$fMonadIOMaybeT
"SPEC/Main $fMonadIONoLoggingT @ (ResourceT (ServerPartT IO))" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                            (Control.Monad.Logger.NoLoggingT
                                                                                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                  (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                     GHC.Types.IO)))
                                                                               $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                 (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                    GHC.Types.IO))
  Control.Monad.Logger.$fMonadIONoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                (Happstack.Server.Internal.Monads.ServerPartT
                                                   GHC.Types.IO))
                                           $dMonad
                                           $dMonadIO
  = Main.$s$fMonadIONoLoggingT2
"SPEC/Main $fMonadIONoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                              (Control.Monad.Logger.NoLoggingT
                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                    GHC.Types.IO))
                                                                 $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                   GHC.Types.IO)
  Control.Monad.Logger.$fMonadIONoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                GHC.Types.IO)
                                           $dMonad
                                           $dMonadIO
  = Main.$s$fMonadIONoLoggingT
"SPEC/Main $fMonadIOReaderT_$cliftIO @ Request @ (WebT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                            Happstack.Server.Internal.Types.Request
                                                                                            (Happstack.Server.Internal.Monads.WebT
                                                                                               GHC.Types.IO))
                                                                            $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                           (Happstack.Server.Internal.Monads.WebT
                                                                                              GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadIOReaderT_$cliftIO @ Happstack.Server.Internal.Types.Request
                                                       @ (Happstack.Server.Internal.Monads.WebT
                                                            GHC.Types.IO)
                                                       $dMonad
                                                       $dMonadIO
  = Main.$s$fMonadIONoLoggingT_$s$fMonadIOReaderT_$cliftIO
"SPEC/Main $fMonadIOResourceT @ (ServerPartT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                  (Happstack.Server.Internal.Monads.ServerPartT
                                                                                     GHC.Types.IO))
                                                                  $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                 (Happstack.Server.Internal.Monads.ServerPartT
                                                                                    GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT @ (Happstack.Server.Internal.Monads.ServerPartT
                                                                GHC.Types.IO)
                                                           $dMonad
                                                           $dMonadIO
  = Main.$s$fMonadIONoLoggingT_$s$fMonadIOResourceT1
"SPEC/Main $fMonadIOResourceT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                    GHC.Types.IO)
                                                    $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                   GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT @ GHC.Types.IO
                                                           $dMonad
                                                           $dMonadIO
  = Main.$s$fMonadIONoLoggingT_$s$fMonadIOResourceT
"SPEC/Main $fMonadIOResourceT_$cliftIO @ (ServerPartT IO)" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                        (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                           (Happstack.Server.Internal.Monads.ServerPartT
                                                                                              GHC.Types.IO))
                                                                           $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                          (Happstack.Server.Internal.Monads.ServerPartT
                                                                                             GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT_$cliftIO @ (Happstack.Server.Internal.Monads.ServerPartT
                                                                         GHC.Types.IO)
                                                                    $dMonad
                                                                    $dMonadIO
  = Main.$s$fMonadIONoLoggingT_$s$fMonadIOResourceT_$cliftIO1
"SPEC/Main $fMonadIOResourceT_$cliftIO @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                             GHC.Types.IO)
                                                             $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                            GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT_$cliftIO @ GHC.Types.IO
                                                                    $dMonad
                                                                    $dMonadIO
  = Main.$s$fMonadIONoLoggingT_$s$fMonadIOResourceT_$cliftIO
"SPEC/Main $fMonadIOServerPartT @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                   (Happstack.Server.Internal.Monads.ServerPartT
                                                                      GHC.Types.IO)
                                                      $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                     GHC.Types.IO
  Happstack.Server.Internal.Monads.$fMonadIOServerPartT @ GHC.Types.IO
                                                        $dMonad
                                                        $dMonadIO
  = Main.$s$fMonadIOServerPartT
"SPEC/Main $fMonadMaybeT @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                  (Control.Monad.Trans.Maybe.MaybeT
                                                                     GHC.Types.IO)
                                               $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Trans.Maybe.$fMonadMaybeT @ GHC.Types.IO
                                          $dApplicative
                                          $dMonad
  = Main.$s$fApplicativeErrorT_$s$fMonadMaybeT
"SPEC/Main $fMonadNoLoggingT @ (ResourceT (ServerPartT IO))" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                (Control.Monad.Logger.NoLoggingT
                                                                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                      (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                         GHC.Types.IO)))
                                                                             $dMonad :: GHC.Base.Monad
                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                             (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                GHC.Types.IO))
  Control.Monad.Logger.$fMonadNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                              (Happstack.Server.Internal.Monads.ServerPartT
                                                 GHC.Types.IO))
                                         $dApplicative
                                         $dMonad
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT1
"SPEC/Main $fMonadNoLoggingT @ (ResourceT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                  (Control.Monad.Logger.NoLoggingT
                                                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                        GHC.Types.IO))
                                                               $dMonad :: GHC.Base.Monad
                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                               GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                              GHC.Types.IO)
                                         $dApplicative
                                         $dMonad
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT
"SPEC/Main $fMonadNoLoggingT_$c>> @ (ResourceT (ServerPartT IO))" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                                     (Control.Monad.Logger.NoLoggingT
                                                                                                        (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                           (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                              GHC.Types.IO)))
                                                                                  $dMonad :: GHC.Base.Monad
                                                                                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                  (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                     GHC.Types.IO))
  Control.Monad.Logger.$fMonadNoLoggingT_$c>> @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   (Happstack.Server.Internal.Monads.ServerPartT
                                                      GHC.Types.IO))
                                              $dApplicative
                                              $dMonad
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>1
"SPEC/Main $fMonadNoLoggingT_$c>> @ (ResourceT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                       (Control.Monad.Logger.NoLoggingT
                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                             GHC.Types.IO))
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                    GHC.Types.IO)
  Control.Monad.Logger.$fMonadNoLoggingT_$c>> @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   GHC.Types.IO)
                                              $dApplicative
                                              $dMonad
  = Main.$s$fMonadIONoLoggingT_$s$fMonadNoLoggingT_$c>>
"SPEC/Main $fMonadResourceT @ (ServerPartT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                      (Happstack.Server.Internal.Monads.ServerPartT
                                                                                         GHC.Types.IO))
                                                                $dMonad :: GHC.Base.Monad
                                                                             (Happstack.Server.Internal.Monads.ServerPartT
                                                                                GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT @ (Happstack.Server.Internal.Monads.ServerPartT
                                                              GHC.Types.IO)
                                                         $dApplicative
                                                         $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fMonadResourceT1
"SPEC/Main $fMonadResourceT @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                        GHC.Types.IO)
                                                  $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT @ GHC.Types.IO
                                                         $dApplicative
                                                         $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fMonadResourceT
"SPEC/Main $fMonadResourceT_$creturn @ (ServerPartT IO)" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                               (Happstack.Server.Internal.Monads.ServerPartT
                                                                                                  GHC.Types.IO))
                                                                         $dMonad :: GHC.Base.Monad
                                                                                      (Happstack.Server.Internal.Monads.ServerPartT
                                                                                         GHC.Types.IO)
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$creturn @ (Happstack.Server.Internal.Monads.ServerPartT
                                                                       GHC.Types.IO)
                                                                  $dApplicative
                                                                  $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fMonadResourceT_$creturn1
"SPEC/Main $fMonadResourceT_$creturn @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                 GHC.Types.IO)
                                                           $dMonad :: GHC.Base.Monad GHC.Types.IO
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$creturn @ GHC.Types.IO
                                                                  $dApplicative
                                                                  $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fMonadResourceT_$creturn
"SPEC/Main $fMonadServerPartT @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                       (Happstack.Server.Internal.Monads.ServerPartT
                                                                          GHC.Types.IO)
                                                    $dMonad :: GHC.Base.Monad GHC.Types.IO
  Happstack.Server.Internal.Monads.$fMonadServerPartT @ GHC.Types.IO
                                                      $dApplicative
                                                      $dMonad
  = Main.$s$fApplicativeNoLoggingT_$s$fMonadServerPartT
"SPEC/Main $fPersistField[] @ Song" [ALWAYS] forall $dPersistField :: Database.Persist.Class.PersistField.PersistField
                                                                        Main.Song
  Database.Persist.Class.PersistField.$fPersistField[] @ Main.Song
                                                       $dPersistField
  = Main.$fPersistEntityPlaylist_$s$fPersistField[]1
"SPEC/Main $fPersistField[] @ User" [ALWAYS] forall $dPersistField :: Database.Persist.Class.PersistField.PersistField
                                                                        Main.User
  Database.Persist.Class.PersistField.$fPersistField[] @ Main.User
                                                       $dPersistField
  = Main.$fPersistEntityPlaylist_$s$fPersistField[]
"SPEC/Main $fPersistField[]_$ctoPersistValue @ Song" [ALWAYS] forall $dPersistField :: Database.Persist.Class.PersistField.PersistField
                                                                                         Main.Song
  Database.Persist.Class.PersistField.$fPersistField[]_$ctoPersistValue @ Main.Song
                                                                        $dPersistField
  = Main.$fPersistEntityPlaylist_$s$fPersistField[]_$ctoPersistValue1
"SPEC/Main $fPersistField[]_$ctoPersistValue @ User" [ALWAYS] forall $dPersistField :: Database.Persist.Class.PersistField.PersistField
                                                                                         Main.User
  Database.Persist.Class.PersistField.$fPersistField[]_$ctoPersistValue @ Main.User
                                                                        $dPersistField
  = Main.$fPersistEntityPlaylist_$s$fPersistField[]_$ctoPersistValue
"SPEC/Main defaultLiftBaseWith @ ServerPartT @ IO @ IO _" [ALWAYS] forall @ a141
                                                                          $dMonadTransControl :: Control.Monad.Trans.Control.MonadTransControl
                                                                                                   Happstack.Server.Internal.Monads.ServerPartT
                                                                          $dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                                                                                  GHC.Types.IO
                                                                                                  GHC.Types.IO
  Control.Monad.Trans.Control.defaultLiftBaseWith @ Happstack.Server.Internal.Monads.ServerPartT
                                                  @ GHC.Types.IO
                                                  @ GHC.Types.IO
                                                  @ a141
                                                  $dMonadTransControl
                                                  $dMonadBaseControl
  = Main.$s$fMonadBaseControlbServerPartT_$sdefaultLiftBaseWith
      @ a141
"SPEC/Main readListDefault @ (Key Playlist)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         (Database.Persist.Class.PersistEntity.Key
                                                                            Main.Playlist)
  GHC.Read.readListDefault @ (Database.Persist.Class.PersistEntity.Key
                                Main.Playlist)
                           $dRead
  = Main.$fReadKey0_$sreadListDefault
"SPEC/Main readListDefault @ (Key Song)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     (Database.Persist.Class.PersistEntity.Key
                                                                        Main.Song)
  GHC.Read.readListDefault @ (Database.Persist.Class.PersistEntity.Key
                                Main.Song)
                           $dRead
  = Main.$fReadKey_$sreadListDefault
"SPEC/Main readListDefault @ (Key User)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     (Database.Persist.Class.PersistEntity.Key
                                                                        Main.User)
  GHC.Read.readListDefault @ (Database.Persist.Class.PersistEntity.Key
                                Main.User)
                           $dRead
  = Main.$fReadKey1_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

