name: scientific
version: 0.3.4.6
id: scientific-0.3.4.6-231fe2dae16ddf33db193ed40eaed096
key: scien_5s26qRhE5w04kI4pP1Rtwm
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.Scientific Data.Text.Lazy.Builder.Scientific
    Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
                GHC.Integer.Logarithms.Compat GHC.Integer.Compat Utils
trusted: False
import-dirs: /Users/austin/Other/Cloud9Server/.stack-work/install/x86_64-osx/lts-5.11/7.10.3/lib/x86_64-osx-ghc-7.10.3/scientific-0.3.4.6-5s26qRhE5w04kI4pP1Rtwm
library-dirs: /Users/austin/Other/Cloud9Server/.stack-work/install/x86_64-osx/lts-5.11/7.10.3/lib/x86_64-osx-ghc-7.10.3/scientific-0.3.4.6-5s26qRhE5w04kI4pP1Rtwm
data-dir: /Users/austin/Other/Cloud9Server/.stack-work/install/x86_64-osx/lts-5.11/7.10.3/share/x86_64-osx-ghc-7.10.3/scientific-0.3.4.6
hs-libraries: HSscientific-0.3.4.6-5s26qRhE5w04kI4pP1Rtwm
depends:
    base-4.8.2.0-cc43d8e06aa74e9c4c0132becc49ee25
    binary-0.7.5.0-6e00b63f955513e2407019611c681b56
    bytestring-0.10.6.0-8363d61ddfe397e767bde0e3fed6260e
    containers-0.5.6.2-68e3ece8a4f91a31e327fe89f8052a53
    deepseq-1.4.1.1-8eec8f9bea2efc2500f63544ec6ca569
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.4.0-7550865fa2a6bb3193b4e312352713f7
    integer-gmp-1.0.0.0-3c8c40657a9870f5c33be17496806d8d
    text-1.2.2.1-7d0e2ea4f6c20c86065fc9fde58d97e6
    vector-0.11.0.0-324da2b07f25721d305480db94a9f1d6
haddock-interfaces: /Users/austin/Other/Cloud9Server/.stack-work/install/x86_64-osx/lts-5.11/7.10.3/doc/scientific-0.3.4.6/scientific.haddock
haddock-html: /Users/austin/Other/Cloud9Server/.stack-work/install/x86_64-osx/lts-5.11/7.10.3/doc/scientific-0.3.4.6
